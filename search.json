[{"title":"vscode中git放弃了所有更改怎么办","path":"//posts/47.html","content":"使用 vscode 的 git 管理工具的时候，不小心放弃了所有更改，这时候怎么办呢？ Ctrl + Shift + P 打开命令面板，输入 Local History:Find Entry to Restore，打开。 选择你想要恢复的文件，直接点击即可。 目前没有找到特别好的方法，只能一个个文件恢复，如果有更好的方法，欢迎留言交流。"},{"title":"如何正确处理别人的pr","path":"//posts/46.html","content":"使用 Git 进行远程仓库管理与合并操作在开发中，经常需要与团队成员或外部贡献者一起协作，在这个过程中，我们可能需要从其他人的分支获取代码、合并并推送到主分支。本文将详细介绍如何使用 Git 执行这些操作，包括如何从远程拉取特定的 Pull Request、推送本地修改到远程仓库、以及如何清理本地仓库等步骤。 1. 从远程拉取 Pull Request首先，假设我们需要从 GitHub 上获取某个 Pull Request (PR) 的内容。在 Git 中，我们可以使用 git fetch 命令来获取远程仓库的最新内容。以下是一个从远程仓库拉取 PR 的示例： git fetch origin pull/10/head:test 在这个命令中： origin 是默认的远程仓库名称。 pull/10/head 表示获取 PR 编号为 10 的代码。 test 是本地新创建的分支名称，用来跟踪该 PR 的内容。 成功执行此命令后，我们可以使用 git checkout test 切换到 test 分支，查看和编辑拉取下来的内容。 git checkout test 2. 配置远程仓库并推送代码如果你需要将本地修改推送到远程仓库，首先需要确保你已经正确设置了远程仓库的地址。假如你希望将本地的 test 分支推送到远程仓库，可以通过 git remote add 命令添加一个新的远程仓库地址。例如： git remote add github-desktop-xingwangzhe 远程仓库URL 这将添加一个新的远程仓库。你可以通过 git remote -v 查看当前配置的远程仓库。 接下来，我们可以将本地的 test 分支推送到远程仓库的 main 分支： git push github-desktop-xingwangzhe test:main 执行这个命令后，Git 会将 test 分支的内容推送到远程仓库的 main 分支。如果推送成功，Git 会显示推送的对象和提交信息。 3. 远程仓库进行 Squash 和 Merge通常，在 PR 拉取请求合并时，你可能需要执行 Squash 和 Merge 操作，这样可以将多个提交压缩成一个提交，以便保持历史记录的简洁。GitHub 提供了这种操作的功能，具体步骤如下： 进入 GitHub 仓库，找到对应的 PR。 选择 “Squash and Merge” 选项来合并该 PR。 根据需要修改合并提交的信息，然后点击 “Confirm Merge” 完成合并。 4. 清理本地仓库在完成上述步骤后，通常我们会清理掉本地临时分支。可以通过以下命令删除本地分支： git branch -D test 该命令会删除本地的 test 分支，清理掉之前拉取 PR 的内容。 最后，如果不再需要该远程仓库地址，可以使用 git remote remove 命令删除它： git remote remove github-desktop-xingwangzhe 这样，我们就清理掉了本地对远程仓库的引用。 总结本文介绍了如何从 GitHub 拉取 PR，如何推送本地修改到远程仓库，如何进行 Squash 和 Merge 操作，以及如何清理本地分支。通过这些操作，我们可以更高效地管理代码库，并确保我们的本地仓库和远程仓库保持一致。 希望这些内容能帮助你更好地进行 Git 远程仓库管理。如果有任何问题或疑问，欢迎随时联系！"},{"title":"设置","path":"/settings/index.html","content":"AI 摘要默认关闭 当前状态：loading 启用/禁用 黑夜模式默认白昼 白昼/黑夜/默认 雪花模式默认关闭 启用/禁用 重新加载清除缓存"},{"title":"即刻短文","path":"/shuoshuo/index.html","content":"第一步：打开 GitHub打开 Stellar 的 GitHub 页面。第二步：点击 Star如果发现右上角的 Star 还没点亮，就点亮它！"},{"title":"每日新闻 & 放眼看世界","path":"/news/index.html","content":"本站会每日早晨定时更新新闻，准时为大家带来新鲜出炉的新闻汇总，让你不错过任何重要的国内外大事。小伙伴们，快来订阅我们的早间新闻吧，让每一天都有个信息满满的开始！期待成为你每日信赖的信息伙伴。 每日新闻"},{"title":"探索者笔记","path":"/explore/notes/探索者笔记.html","content":"2024年的小目标 O1 开发一个商城系统 正常 30% KR1 学习 vue3 和 golang 的基本语法 element-plus 的使用gin 的使用gorm 的使用 正常 90% KR2 开发商城购物前台和后台 延期 0% KR3 测试，发布和上线 风险 0% O2 开发一个用户日志管理系统 正常 5% KR1 学习 golang 的进阶语法 primevue 的使用tailwindcss 的使用 正常 10% KR2 尚未开始 延期 0% 感觉大概率完不成了，学习任务紧，看看能不能坚持把目标完成吧。"},{"title":"免责声明","path":"/document/disclaimer/index.html","content":"本站内容仅为个人言论，不代表站长本人所属（或曾经所属）机构或集体的观点。评论区的内容仅代表该评论发布者的观点，不代表本站认同该言论，且不对此内容产生的影响承担责任。 由于本站所发布的内容有其特定背景，而社会环境不断变化，又因获取资料信息限制，本站不对所发布内容之准确性、完整性、可靠性、可用性和及时性做保证。因此，相关读者有义务自行对所有内容在其预期用途中的适用性进行检查。在任何情况下，本站都不对因使用本站内容而造成的或与之有关的任何间接、附带或结果性损失负责或承担责任。 本站所发布的内容包含有外部网站链接，仅为方便读者而设。本站在添加链接时已尽可能检查其是否违反相关法律法规，但是外部网站内容始终由其相关提供者或运营者负责，本站无法控制这些外部网站，因此本站不对其内容承担任何责任。 最后更新日期：2024102215:00:00"},{"title":"收藏的站点","path":"/explore/sites/收藏的站点.html","content":"编程社区 Gin-Vue-Adminhttps://www.gin-vue-admin.com/LearnKuhttps://learnku.com/看云https://www.kancloud.cn/ 大佬网站 陈明勇-go语言大佬https://chenmingyong.cn/ 我的站点 gitea存储库https://repo.codepzj.cn/it-tools实用工具库https://tools.codepzj.cn/alist云盘https://share.codepzj.cn/ 前端工具库 图片背景消除https://www.remove.bg/zh/图片压缩https://tinypng.com/AI去图片水印https://www.photoroom.com/zh/tools/remove-object-from-photo/高清图片修复https://www.tpqxb.com/logo徽章生成https://shields.io/badges免费静态资源cdnhttps://imagekit.io/ 第三方服务平台 国外短信服务接收平台https://lubansms.com/"},{"title":"windows相关问题","path":"/explore/solutions/windows相关问题.html","content":"id_rsa Load key: Permission denied 的解决方法 C:\\Users\\pzjecho %USERNAME%AdministratorC:\\Users\\pzjicacls C:\\Users\\pzj\\.ssh\\id_rsa /inheritance:r /grant:r Administrator:(R)processed file: C:\\Users\\pzj\\.ssh\\id_rsaSuccessfully processed 1 files; Failed processing 0 filesC:\\Users\\pzjssh -T git@github.comHi codepzj! Youve successfully authenticated, but GitHub does not provide shell access."},{"title":"node相关问题","path":"/explore/solutions/node相关问题.html","content":"解决本地npm安装依赖时缓存错误 npm ERR! A complete log of this run can be found in: C:\\Users\\pzj\\AppData\\Local pm-cache_logs\\2024-10-29T14_56_45_532Z-debug-0.lognpm cache clean --forcerm -rf node_modules package-lock.jsonnpm i"},{"title":"数据统计","path":"/social/stats/index.html","content":"Blog Heatmap Monthly Article Statistics Tag Statistics Category Statistics CategoryTree Statistics"},{"title":"关于本站 & 留言板","path":"/social/about/index.html","content":"本站是 克喵爱吃卤面 的 Blog，我爱好轻音乐，喜欢打乒乓球，常活跃于开源社区，热衷于设计和打磨美妙的东西。喜欢折腾一些博客，脚本，动画之类的玩意儿，希望大家能够喜欢我的博客。 我的相册 @tianhao_wang@eberhard@eberhard@eberhard@eberhard@vklemen 我的兴趣 喜欢的音乐喜欢的游戏非常热爱音乐，喜欢的品类很多，但是特别喜欢轻音乐 stilla little storycollapsing world城南花已开风居住的街道空山比较喜欢农和植物大战僵尸 王者荣耀植物大战僵尸"},{"title":"小伙伴们 & 朋友文章","path":"/social/friends/index.html","content":"我的小伙伴们 xaoxuu崔亮的博客杜老师说Thun888张洪HeoMC-Sep纸鹿本鹿姓王者子书沐晨nukix的工具箱华岁云小屋萝卜兔农场星日语收录客薩魔5mg龙腾收录网BlogFinder浪海导航宇阳小妖客栈陵长镜Allen的小破站十年老狗 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 长期更新：网站内容需定期更新，以保持活跃度和吸引用户访问。 欢迎大家来申请友链 我已满足全部条件，快告诉我如何交换友链！ 如果您没有满足上述条件，即时提交了申请也不会通过哦～若要添加友链，请先添加本站友链，并按以下格式在下方评论区留言- 网站名: 浩瀚星河 网站简介: 代码，日常，生活 网址: https://haohanxinghe.com 头像: https://haohanxinghe.com/assets/images/avatar.webp"},{"title":"隐私政策","path":"/document/policy/index.html","content":"信息收集本站重视访客的隐私和个人信息保护，但为了更好的服务质量，我们可能会收集和使用您的相关信息： 用于保持状态的 Cookies 储存个性化配置的 LocalStorage 用户的 User-Agent 数据 有关您计算机的信息，包括但不限于 IP 地址、浏览器类型和版本以及操作系统类型和版本； 您主动提交给本站的个人信息，包括昵称、邮箱、网址； 有关您访问和使用本网站的信息，包括但不限于引荐来源、访问日期和时间、页面浏览量以及网站导航路径。 本站为深色模式切换，会通过 LocalStorage 在您的浏览器中进行本地存储以提供更便捷的体验，您可以随时清除浏览器中保存的所有 Cookies 以及 LocalStorage。 信息使用 对于收集到的 IP 地址、User-Agent 等用户信息，本站有多个用途： 通过 Umami 做分析之用，且仅博主可见； 在评论页面展示所在省份； 昵称仅作访客身份辨识。昵称信息全站访客可见； 邮箱地址将用于验证访客真实性，及接收评论回复通知； 提交评论时可选是否填写网址项，仅为方便博主回访及个人网站的推广。网址信息全站访客可见。 其他符合法律规定的合理用途。 我们保留您自由选择的权利，在本站（haohanxinghe.com）中可以在左下角的设置界面中关闭 Umami 统计。而其他站点可以在 LocalStorage 中设置 umamiStatus 值为 false 以关闭 Umami 统计。该操作不会影响任何站点的正常使用 如何共享、转让您的个人信息本站提供的服务可能会包含第三方的产品和服务，或包含通往他们的链接。本站无法控制第三方的隐私政策和规则，并且不对此承担任何责任。 本站不会主动公开披露用户信息，但以下情况除外： 中国的法律法规规定应当公开披露的信息； 与中国的国家安全、重大公共利益有关，或与犯罪侦查、起诉、审判和判决执行等有关，而应中国执法机构要求提供的； 出于维护您或其他个人的生命、财产等重大合法权益但又很难得到本人同意的； 您自行在本站评论区公开的个人信息； 本政策另有特别规定的情况。 该隐私政策仅针对以上未特殊标明的 haohanxinghe.com 下站点生效。 本站保留在任何时间修改、修订或更新本页政策内容的权利。 最后更新日期：2024102215:00:00"},{"title":"主题更新日志","path":"/update/index.html","content":"2024 年 12 月 14 日修复最新评论a标签显示问题2024 年 12 月 1 日添加博客热力图2024 年 11 月 11 日添加 echarts 数据统计2024 年 11 月 10 日添加 chat 组件2024 年 11 月 8 日删除博客轮播图，剔除黑暗状态下卡片悬浮发光效果，修改 wiki 文档侧边栏目录为折叠块"},{"title":"我的说说 & 记录生活","path":"/social/talks/index.html","content":"这里是我发牢骚的地方，也是我记录生活的地方 😃😃"},{"title":"2024/11","path":"/wiki/notes/2024/11/index.html","content":"golang遍历文件夹，判断子文件类型 package mainimport ( fmt os)func main() pathList, err := os.ReadDir(D:/Code/Program/Hexo) if err != nil errMsg := fmt.Sprintf(读取失败，错误为：%v, err) panic(errMsg) for _, pathName := range pathList fmt.Println(pathName.Name(), pathName.IsDir()) Linux修改主机名 # 方法一hostnamectl set-hostname newHostNameservice network restart# 方法二echo newHostName /etc/hostname# 重启sudo rebootLinux修改ip地址 cd /etc/sysconfig/network-scriptsvi ifcfg-ens33然后修改 IPADDRTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=4e255d11-c746-4da9-af60-07462b04a19aDEVICE=ens33ONBOOT=yesIPADDR=192.168.202.202GATEWAY=192.168.202.2DNS1=192.168.202.2重启网络service network restartgolang如何读取文件内容 为什么不直接用 os.ReadFile 读取，再 string()转换成文件直接输出呢。因为直接读取整个文件会造成额外的内存开销，如果文件很大，就容易让内存负载过高，package mainimport ( bufio fmt os)func main() file, _ := os.Open(D:/Code/Program/hexo/package.json) // 一行行读取 scanner := bufio.NewScanner(file) for scanner.Scan() fmt.Println(scanner.Text()) // 打印每一行 if err := scanner.Err(); err != nil panic(err) golang如何使用channel优化读取速度 不使用goroutine使用goroutinepackage mainimport ( fmt os time)var ( matches = 0 query = test)func Search(pathName string) fileList, err := os.ReadDir(pathName) if err == nil for _, file := range fileList if file.Name() == query fmt.Println(pathName+/+file.Name(), matches) matches++ if file.IsDir() Search(pathName + / + file.Name()) func main() startTime := time.Now() Search(D:/Code) fmt.Println(matches) fmt.Println(time.Since(startTime))package mainimport ( fmt os sync time)var query = test// Search 函数接收一个路径，递归查找匹配的文件func Search(pathName string, c chan int, wg *sync.WaitGroup) defer wg.Done() // 确保每个 goroutine 执行完后，调用 Done() // 读取目录内容 fileList, err := os.ReadDir(pathName) if err != nil fmt.Println(Failed to read dir:, err) return // 遍历文件列表 for _, file := range fileList // 如果是目录，递归查找 if file.IsDir() wg.Add(1) // 对每个子目录，增加 WaitGroup 计数 go Search(pathName+/+file.Name(), c, wg) // 如果文件名匹配，发送到通道 if file.Name() == query fmt.Println(pathName+/+file.Name(), matches) c - 1 func main() startTime := time.Now() // 创建 WaitGroup 和通道 var wg sync.WaitGroup c := make(chan int, 1000) // 使用缓冲通道来防止阻塞 // 启动递归搜索 wg.Add(1) // 初始计数 go Search(D:/Code, c, wg) // 先启动接收操作 matches := 0 go func() for match := range c matches += match () // 等待所有的 goroutine 完成 wg.Wait() // 关闭通道 close(c) // 输出结果 fmt.Println(Total matches:, matches) fmt.Println(Time taken:, time.Since(startTime))golang互斥锁和读写锁的运用场景 对于互斥锁，在对共享资源进行频繁的写操作且不希望同时有多个协程进行读写操作的场景下使用。对于读写锁，在读操作远多于写操作的场景下，如缓存系统、配置文件读取等，可以提高并发性能。更新.gitignore发现文件已经加入缓冲区 git rm -r --cached .git add .这样即可删除索引，重新加入暂存区，使.gitignore生效"},{"title":"2024/12","path":"/wiki/notes/2024/12/index.html","content":"wsl安装ubuntu 查看可安装镜像$NAME FRIENDLY NAMEUbuntu UbuntuDebian Debian GNU/Linuxkali-linux Kali Linux RollingUbuntu-18.04 Ubuntu 18.04 LTSUbuntu-20.04 Ubuntu 20.04 LTSUbuntu-22.04 Ubuntu 22.04 LTSUbuntu-24.04 Ubuntu 24.04 LTSOracleLinux_7_9 Oracle Linux 7.9OracleLinux_8_7 Oracle Linux 8.7OracleLinux_9_1 Oracle Linux 9.1openSUSE-Leap-15.6 openSUSE Leap 15.6SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6openSUSE-Tumbleweed openSUSE Tumbleweed直接安装$查看可安装镜像$适用于 Linux 的 Windows 子系统分发:docker-desktop-data (默认)docker-desktopUbuntu-24.04设置Ubuntu-24.04为默认$gin中匹配路由*和:的区别 /find/user 这种可以接收到路由（带/）pg.GET(/find/*id, ProgramApi.ProgramFindAll) # /user/find/6 这种接收参数pg.GET(/find/:id, ProgramApi.ProgramFindAll) # 6pinia持久化存储的原理 将对象序列化成 json 存储到 session 和 localstorge 里面，每次修改或获取值都通过 setItem 和 getItem 完成。cookie在前后端的交互是怎么样的 用户登录，后端往浏览器置入cookie，在用户发起请求的时候会校验请求头token或者cookie中的jwt加密字符串，一般前端会使用pinia把登录后返回的用户信息存储起来。退出登录，要让pinia持久化数据失效，同时向后端发起清空 cookie 的操作。cookie 应该设置HttpOnly让前端无法直接访问，防止一些跨站脚本的攻击。a标签的target参数分析 target: _self,指的是在当前页打开 target: _blank,指的是在新的标签页打开数据库允许root用户远程登录 mysql SELECT Host, User FROM mysql.user WHERE User = root;+-----------+------+| Host | User |+-----------+------+| localhost | root |+-----------+------+1 row in set (0.00 sec)mysql CREATE USER root@% IDENTIFIED BY pzj20162116;Query OK, 0 rows affected (0.01 sec)mysql GRANT ALL PRIVILEGES ON *.* TO root@% WITH GRANT OPTION;Query OK, 0 rows affected (0.00 sec)mysql flush privileges;Query OK, 0 rows affected (0.00 sec)mysql SELECT Host, User FROM mysql.user WHERE User = root;+-----------+------+| Host | User |+-----------+------+| % | root || localhost | root |+-----------+------+2 rows in set (0.00 sec)vue3设置@别名可点击跳转 在项目根目录新建jsconfig.json:jsconfig.json compilerOptions: baseUrl: ., paths: @/*: [src/*] , target: ES6, allowSyntheticDefaultImports: true , include: [src/**/*], exclude: [node_modules]gin中ShouldBind传参传默认值，切记不要使用required 在 gin 里面，有 c.ShouldBind 这个方法，常用于绑定结构体，如果你设置 json 字段为required（即必填），就算你填了对应的零值（即默认值），shouldbind 会认为你没填，就会绑定失败。所以如果传参包含默认值，对应的 json 字段不应该设置为 required，比如说金额（int），默认为 0，我没买东西，传参为 0，设定 required 是无法识别的，会误认为你没有传参。jsdliver有缓存怎么强制清除 假如说你的 cdn 地址是这样https://cdn.jsdelivr.net/gh/user/repo@version/file那么使用如下地址https://purge.jsdelivr.net/gh/user/repo@version/file id: oBCXlFgXNJdiqwIb, status: finished, timestamp: 2024-12-18T06:20:53.917Z, paths: /gh/codepzj/fonts@main/QianMoKai/result.css: throttled: false, providers: CF: true, FY: true 返回如下结果就说明刷新成功。"}]