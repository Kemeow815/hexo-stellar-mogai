[{"title":"vscode中git放弃了所有更改怎么办","path":"//posts/47.html","content":"使用 vscode 的 git 管理工具的时候，不小心放弃了所有更改，这时候怎么办呢？ Ctrl + Shift + P 打开命令面板，输入 Local History:Find Entry to Restore，打开。 选择你想要恢复的文件，直接点击即可。 目前没有找到特别好的方法，只能一个个文件恢复，如果有更好的方法，欢迎留言交流。"},{"title":"如何正确处理别人的pr","path":"//posts/46.html","content":"使用 Git 进行远程仓库管理与合并操作在开发中，经常需要与团队成员或外部贡献者一起协作，在这个过程中，我们可能需要从其他人的分支获取代码、合并并推送到主分支。本文将详细介绍如何使用 Git 执行这些操作，包括如何从远程拉取特定的 Pull Request、推送本地修改到远程仓库、以及如何清理本地仓库等步骤。 1. 从远程拉取 Pull Request首先，假设我们需要从 GitHub 上获取某个 Pull Request (PR) 的内容。在 Git 中，我们可以使用 git fetch 命令来获取远程仓库的最新内容。以下是一个从远程仓库拉取 PR 的示例： git fetch origin pull/10/head:test 在这个命令中： origin 是默认的远程仓库名称。 pull/10/head 表示获取 PR 编号为 10 的代码。 test 是本地新创建的分支名称，用来跟踪该 PR 的内容。 成功执行此命令后，我们可以使用 git checkout test 切换到 test 分支，查看和编辑拉取下来的内容。 git checkout test 2. 配置远程仓库并推送代码如果你需要将本地修改推送到远程仓库，首先需要确保你已经正确设置了远程仓库的地址。假如你希望将本地的 test 分支推送到远程仓库，可以通过 git remote add 命令添加一个新的远程仓库地址。例如： git remote add github-desktop-xingwangzhe 远程仓库URL 这将添加一个新的远程仓库。你可以通过 git remote -v 查看当前配置的远程仓库。 接下来，我们可以将本地的 test 分支推送到远程仓库的 main 分支： git push github-desktop-xingwangzhe test:main 执行这个命令后，Git 会将 test 分支的内容推送到远程仓库的 main 分支。如果推送成功，Git 会显示推送的对象和提交信息。 3. 远程仓库进行 Squash 和 Merge通常，在 PR 拉取请求合并时，你可能需要执行 Squash 和 Merge 操作，这样可以将多个提交压缩成一个提交，以便保持历史记录的简洁。GitHub 提供了这种操作的功能，具体步骤如下： 进入 GitHub 仓库，找到对应的 PR。 选择 “Squash and Merge” 选项来合并该 PR。 根据需要修改合并提交的信息，然后点击 “Confirm Merge” 完成合并。 4. 清理本地仓库在完成上述步骤后，通常我们会清理掉本地临时分支。可以通过以下命令删除本地分支： git branch -D test 该命令会删除本地的 test 分支，清理掉之前拉取 PR 的内容。 最后，如果不再需要该远程仓库地址，可以使用 git remote remove 命令删除它： git remote remove github-desktop-xingwangzhe 这样，我们就清理掉了本地对远程仓库的引用。 总结本文介绍了如何从 GitHub 拉取 PR，如何推送本地修改到远程仓库，如何进行 Squash 和 Merge 操作，以及如何清理本地分支。通过这些操作，我们可以更高效地管理代码库，并确保我们的本地仓库和远程仓库保持一致。 希望这些内容能帮助你更好地进行 Git 远程仓库管理。如果有任何问题或疑问，欢迎随时联系！"},{"title":"使用Github的CI/CD部署前后端","path":"//posts/45.html","content":"前端 ci 配置name: deploy-hexo-blogon: push: branches: [main] workflow_dispatch:jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 # Install Node.js - name: install nodejs uses: actions/setup-node@v3.4.1 with: node-version: 20.12.0 # Use pnpm package manager - name: use pnpm run: npm i -g pnpm pnpm config set registry https://registry.npmmirror.com # Install dependencies - name: install packages run: pnpm install --no-frozen-lockfile # Build the Hexo project - name: build run: pnpm run build # Deploy the project to the server - name: deploy to server uses: appleboy/scp-action@master with: host: $ secrets.REMOTE_HOST username: $ secrets.REMOTE_USER password: $ secrets.REMOTE_PASSWORD port: $ secrets.REMOTE_PORT source: dist/ target: $ secrets.REMOTE_TARGET 后端 ci 配置name: Build Logsphere and Push Docker Imageon: push: branches: - main # 当推送到 main 分支时触发 pull_request: branches: - main # 当提交 PR 到 main 分支时触发jobs: build: runs-on: ubuntu-latest # 使用最新的 Ubuntu 环境 steps: - name: Check out repository uses: actions/checkout@v4 # 检出代码 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v2 # 设置 Docker Buildx，支持多平台构建 - name: Cache Docker layers uses: actions/cache@v2 # 缓存 Docker 镜像构建的层 with: path: /tmp/.buildx-cache key: $ runner.os -buildx-$ github.sha restore-keys: | $ runner.os -buildx- - name: Log in to Docker Hub uses: docker/login-action@v2 # 登录 Docker Hub with: username: $ secrets.DOCKER_USERNAME # 使用 GitHub Secrets 存储的 Docker 用户名 password: $ secrets.DOCKER_PASSWORD # 使用 GitHub Secrets 存储的 Docker 密码 - name: Build Docker image run: | docker build -t codepzj/logsphere-server:$ github.sha . # 基于 commit SHA 打标签 docker tag codepzj/logsphere-server:$ github.sha codepzj/logsphere-server:latest - name: Push Docker images to Docker Hub run: | docker push codepzj/logsphere-server:$ github.sha # 推送 SHA 标签 docker push codepzj/logsphere-server:latest # 推送 latest 标签 服务器自动监控 docker 镜像版本 使用 watchover 镜像 docker run -d --name watchtower --restart always -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup logsphere-server -i 600"},{"title":"记录做网站流量分析系统的一些bug和总结","path":"//posts/44.html","content":"前言网站流量分析系统，是我模仿umami做的一个练手的项目，实现的功能非常有限，但是勉强能用。它的本质是往一个网站添加一个 script 脚本，向远程服务器发送请求，获取用户的访问来源，访问次数，访问延时，ip 定位等等。功能在持续开发中… 效果大概长这样： 项目中的 bug 和解决方案（持续更新中）golang 中的 switch caseswitch case 中 case 匹配多个值 ❌ 错误写法 switch tm.Type case pageview || pageStayTime: return global.LS_DB.Create(tm).Error ✔ 正确写法 switch tm.Type case pageview, pageStayTime: return global.LS_DB.Create(tm).Error 动态显示侧边栏和导航栏网上教程：错误的 path: /login, name: Login, component: Login, meta: NotSidebar: true, // 登录页面不显示侧边栏 NotNavbar: true, // 登录页面不显示导航栏 , , path: /register, name: Register, component: Register, meta: NotSidebar: true, // 登录页面不显示侧边栏 NotNavbar: true, // 登录页面不显示导航栏 , , 做法是错误的，只是依靠$route的响应式将子组件取消挂载，虽然用了v-if,实际上还是调用了子组件的钩子函数，只是挂载完之后，$route获取到的 meta 变了，子组件又被注销了。子组件是侧边栏，需要从后端调取动态路由，退出登录就会触发无限跳转登录页的错误，在登录页无法跳转到注册页。 正确做法是在在父组件使用 watch 来监听路由的变化，因为路由变化一般在父组件挂载完成之后，所以在父组件使用 v-if 判断是否需要渲染子组件。 template n-config-provider n-message-provider div class=px-4 n-layout n-layout-headerNavbar v-if=showNavBar/Navbar/n-layout-header n-layout-content content-style=padding: 24px; div v-if=showSideBar n-space vertical n-layout has-sider n-layout-sider bordered collapse-mode=width :collapsed-width=64 :collapsed=collapsed :width=240 show-trigger @collapse=collapsed = true @expand=collapsed = false Sidebar/Sidebar /n-layout-sider n-layout class=ml-8 router-view/router-view /n-layout /n-layout /n-space /div div class=w-full v-else router-view/router-view /div /n-layout-content n-layout-footer class=fixed bottom-0 left-0 span class=px-8 strong本站是开源项目Logsphere的演示站/strong /span /n-layout-footer /n-layout /div /n-message-provider /n-config-provider/templatescript setup import Navbar from @/components/Navbar.vue; import Sidebar from @/components/Sidebar.vue; import watch, onMounted from vue; import useRoute from vue-router; const route = useRoute(); const NavName = [Register, Login]; const SideName = [Register, Login, Profile]; const showNavBar = ref(false); const showSideBar = ref(false); const collapsed = ref(false); const screenWidth = ref(window.innerWidth); const handleResize = () = screenWidth.value = window.innerWidth; ; onMounted(() = window.addEventListener(resize, handleResize); ); watch( () = route.name, (name) = const isRL = NavName.includes(name); const isRR = SideName.includes(name); showNavBar.value = !isRL; showSideBar.value = !isRR; ); watch( screenWidth, (width) = collapsed.value = width 768; , immediate: true, );/scriptstyle lang=scss @use styles/main.scss as *;/style nginx 添加跨域请求add_header Access-Control-Allow-Origin $http_origin;add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;add_header Access-Control-Allow-Headers Content-Type, Authorization, X-Requested-With;add_header Access-Control-Allow-Credentials true always;if ($request_method = OPTIONS ) return 204; 导航栏多端数据不同步问题得每次加载页面从后端重新获取用户信息数据，存到 pinia 中 功能持续开发中，bug 肯定也很多，解决方案也会实时更新，走一步看一步吧"},{"title":"cnpm同步npm发布的包","path":"//posts/43.html","content":"在 npm 发布新的包后，下载的时候发现从 npm 仓库拉下来的不是刚刚最新发布到仓库的包，原因是我们太”墙”大了，cnpm 还没有把 npm 包给同步过来，可能得 1，2 天左右。 所以我们要手动同步，前往https://npmmirror.com/package/hexo-graph 后面填写你的package_name 点击 Sync 按钮，手动同步 我看网上有人用，CICD 在发布包的时候，顺便同步了 cnpm 仓库，不过有时间再研究了 大功告成"},{"title":"华硕充电器更换（差点被无良商家坑）","path":"//posts/42.html","content":"今天在图书馆学习，发现电脑充不进电了，我的电脑型号是华硕灵曜 14（2021 版），当时有点慌，要么充电器坏了，要么就是电脑电池坏了，然后跑去实体店问。 来到百脑汇华硕实体店问，一个店员，是一名头发半白的老者，帮我排查了一下，是充电器问题，然后他说换一个充电器要 499，然后立刻开发票，立刻联系仓库拿货，这一套流程真的非常熟练，显然是老手了，我看情况不对，立刻拿手机查京东、淘宝原装话说充电器的价格，网上都是 100~200 左右，过了一段时间，他过来叫我在发票上签字，问我微信还是支付宝，然后被我婉言拒绝，我问他说，我看晚上才一两百的样子，他转身就叫仓库不要给我送，非常果断，还说这些都是二手的，原装就是这个价格，看见他的操作，我迟疑了一会，还是选择转身离开。 我回到原来买电脑那个京东实体店，因为两年保修期已过，得重新花钱买新的，然后店员也非常耐心，帮我试错，不像刚刚那个老头一样，上来就要我付款。最后找到对应型号的充电器，花费 209 元。而且在这过程中，我发现现在的大多数电脑都开始支持 Typec 接口了，我看这个京东实体店，大多数用的都是 Typec 口充电。 充电器买来了： 那个华硕实体店店员张口就要 500，假如说原装批发是 100 的话，那么利润就是 400%，而且这种电脑城的店虽然标注是华硕的名字，不过不知道是不是真的，也可能看我是学生，涉世未深，然后想割韭菜，张口就要 500，而且行为非常果断，很具有迷惑性（我店里都是正品，便宜买的都是赝品的那种错觉）。 所以买数码产品还是得货比三家，保持一种防范和谨慎的心理，买卖往往也考验人性。"},{"title":"前端工程化之配置eslint和prettier（2024版教程）","path":"//posts/41.html","content":"在现代前端开发中，代码质量和一致性是至关重要的。为此，ESLint 和 Prettier 成为了开发者的得力助手。本文将介绍如何在 Vue 项目中配置 ESLint 和 Prettier，以确保代码的语法正确性和格式统一性。 安装 ESLint首先，我们需要在项目中安装 ESLint。可以通过以下命令完成： $ 接着，使用 ESLint 的初始化命令生成配置文件： $ 在初始化过程中，您会被询问一系列问题以确定您的项目设置。以下是推荐的回答： ? How would you like to use ESLint? ... To check syntax only ✔ To check syntax and find problems? What type of modules does your project use? ... JavaScript modules (import/export) ✔ CommonJS (require/exports) None of these? Which framework does your project use? ... React Vue.js ✔ None of these? Does your project use TypeScript? ... No YesWhere does your code run?...(Press spaceto select,ato toggle all,ito invert selection)Browser ✔Node√ Would you like to install them now? · No / Yes? Which package manager do you want to use? ... npm yarn pnpm ✔ bun 在项目根目录下，您会看到一个 eslint.config.js 文件。接下来，我们需要对其进行额外的配置，以适应 Vue.js 的开发需求。以下是一个示例配置： import globals from globals;import pluginVue from eslint-plugin-vue;/** @type import(eslint).Linter.Config[] */export default [ files: [**/*.js,mjs,cjs,vue] , languageOptions: globals: globals.browser , ...pluginVue.configs[flat/essential], rules: vue/multi-word-component-names: off, // 禁用 vue/multi-word-component-names 规则 , ,]; 在这个配置中，我们禁用了 vue/multi-word-component-names 规则，以允许使用单词组件名称。 安装 Prettier接下来，我们需要安装 Prettier，以确保代码格式的一致性。使用以下命令安装： $ 在项目根目录下，创建一个 .prettierrc.js 文件，并添加以下配置： export default printWidth: 80, // 每行代码长度（默认80） tabWidth: 2, // 每个tab相当于多少个空格（默认2） useTabs: false, // 是否使用tab进行缩进（默认false） singleQuote: false, // 使用单引号（默认false） semi: true, // 声明结尾使用分号(默认true) trailingComma: es5, // 多行使用拖尾逗号（默认none） bracketSpacing: true, // 对象字面量的大括号间使用空格（默认true） jsxBracketSameLine: false, // 多行JSX中的放置在最后一行的结尾，而不是另起一行（默认false） arrowParens: avoid, // 只有一个参数的箭头函数的参数是否带圆括号（默认avoid）; 添加脚本在package.json下添加 scripts: dev: vite, build: vite build, preview: vite preview, lint: npx eslint src/ --fix npx prettier --write src/ // 添加lint脚本, 现在，您可以使用以下命令来检查和格式化您的代码： $ 效果展示 总结通过上述步骤，您已经成功在 Vue 项目中配置了 ESLint 和 Prettier。这将帮助您保持代码的高质量和一致性，减少潜在的错误并提升开发效率。随着项目的增长，保持代码风格的一致性将变得尤为重要，因此强烈建议在团队中推广使用 ESLint 和 Prettier。"},{"title":"html2md-一款好用的html转md在线工具","path":"//posts/40.html","content":"效果预览https://www.helloworld.net/html2md Docker 部署version: 3.9services: html2md: image: codepzj/html2md:1.0 container_name: html2md ports: - 3031:3031"},{"title":"将docker本地镜像推送到hub.docker.com","path":"//posts/39.html","content":"参考文档 Docker ID accounts Docker Hub Quickstart Repositories 1.注册 docker hub 帐号登录，创建 repository 仓库 2.准备推送的镜像选择其中的一种方式生成镜像 构建镜像 docker build -t image-name . 对已经存在的镜像再加标签（取别名） docker tag existing-image hub-user/repo-name[:tag] 3.在 docker 宿主机登录 dockerhubC:\\Users\\pzjdocker loginFailed to start web-based login - falling back to command line login...Log in with your Docker ID or email address to push and pull images from Docker Hub. If you dont have a Docker ID, head over to https://hub.docker.com/ to create one.You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/Username: codepzjPassword:Login Succeeded docker login 省略登录地址，默认是 hub.docker.com 4.推送镜像docker push hub-user/repo-name:tag 默认向hub.docker.com推送。所以镜像名中也没有以仓库域名开头来命名。 示例 操作日志 C:\\Users\\pzjdocker loginFailed to start web-based login - falling back to command line login...Log in with your Docker ID or email address to push and pull images from Docker Hub. If you dont have a Docker ID, head over to https://hub.docker.com/ to create one.You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/Username: codepzjPassword:Login SucceededC:\\Users\\pzjdocker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES7fdcdf8d9920 html2md:latest docker-entrypoint.s… 2 hours ago Up 2 hours 0.0.0.0:3031-3031/tcp html2mdC:\\Users\\pzjdocker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhtml2md latest ad9da6667caa 2 hours ago 1.32GBghcr.io/codepzj/qexo latest f58c43f851e2 5 days ago 254MBC:\\Users\\pzjdocker tag html2md codepzj/html2md:1.0C:\\Users\\pzjdocker push codepzj/html2md:1.0The push refers to repository [docker.io/codepzj/html2md]b3c7b342dae3: Pushed47389b1e7363: Pushed4a27e69489f4: Pushedaf392e0adf37: Pusheda0d7aa7696a1: Pushed6b473f54d3b7: Pushed4fc0d2d9bba9: Pushed68d2102e7b65: Pushed0d5f5a015e5d: Mounted from library/node3c777d951de2: Mounted from library/nodef8a91dd5fc84: Mounted from library/nodecb81227abde5: Mounted from library/nodee01a454893a9: Mounted from library/nodec45660adde37: Mounted from library/nodefe0fb3ab4a0f: Mounted from library/node f1186e5061f2: Mounted from library/nodeb2dba7477754: Mounted from library/node1.0: digest: sha256:acb71605002f339ae87fa6e27f9c6a5d6ab230035b86fca7e5f4b5f6d78474dc size: 3891 查看 dockerhub 控制台 拉取镜像 docker pull codepzj/html2md"},{"title":"gin向浏览器SetCookie失效踩坑","path":"//posts/38.html","content":"项目在做 JWT 鉴权的时候，发现 SetCookie 一直无法置入浏览器中，就很操蛋，然后折腾了很久，被自己蠢哭了。 Axios一开始我以为是 axios 的问题： const request = axios.create( baseURL: http://localhost:8080/, timeout: 5000, withCredentials: true,); 我已经允许 axios 发请求的时候携带 Cookie 了，反复测试，发现没有问题 SameSite在网上查阅资料提到了 SameSite 问题，其实就是服务端对携带 Cookie 请求的限制 SameSite的作用 SameSiteStrict浏览器仅在同一站点的请求中发送 Cookie。如果用户从外部站点跳转到当前站点，Cookie 将不会被发送。适用于需要最大程度的安全性并防止跨站请求伪造（CSRF）的情况。SameSiteLax默认值（如果没有设置 SameSite 时）。它在同一站点的请求中始终发送 Cookie，但对于一些安全级别较低的请求（例如从外部站点的 GET 请求），它也会发送 Cookie。对于跨站的某些请求（比如链接点击），会发送 Cookie，但 POST 请求等不会发送 Cookie。适用于需要一定安全性且希望允许某些跨站请求的情况。SameSiteNone允许在所有情况下发送 Cookie，包括跨站请求。为了允许 Cookie 在跨域请求中发送，你必须同时设置 Secure 属性为 true，确保只通过 HTTPS 传输。适用于需要跨站请求时发送 Cookie 的场景，比如跨域认证、第三方 API 调用等。 const ( SameSiteDefaultMode SameSite = iota + 1 SameSiteLaxMode SameSiteStrictMode SameSiteNoneMode) c.SetSameSite(4) Cookies marked with SameSite=None must also be marked with Secure to allow setting them in a cross-site context. This behavior protects user data from being sent over an insecure connection. Resolve this issue by updating the attributes of the cookie: Specify SameSite=None and Secure if the cookie is intended to be set in cross-site contexts. Note that only cookies sent over HTTPS may use the Secure attribute. Specify SameSite=Strict or SameSite=Lax if the cookie should not be set by cross-site requests. 设置 SameSite=None 时，**必须同时设置 Secure**，以确保 Cookie 只能通过 HTTPS 发送。 开发环境这样设置是不可行的，因为是 http 环境 Cors检查了一下 Cors 中间件： func Cors() gin.HandlerFunc return func(c *gin.Context) method := c.Request.Method origin := c.Request.Header.Get(Origin) c.Header(Access-Control-Allow-Origin, origin) c.Header(Access-Control-Allow-Headers, Content-Type,AccessToken,X-CSRF-Token, Authorization, Token,X-Token,X-User-Id) c.Header(Access-Control-Allow-Methods, POST, GET, OPTIONS,DELETE,PUT) c.Header(Access-Control-Expose-Headers, Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type, New-Token, New-Expires-At) c.Header(Access-Control-Allow-Credentials, true) // 放行所有OPTIONS方法 if method == OPTIONS c.AbortWithStatus(http.StatusNoContent) // 处理请求 c.Next() 感觉也没什么问题 逻辑最后，使用 ApiFox 测试了一下，接口返回的也没有 Cookie 然后我就怀疑是不是逻辑出错了，果不其然 func (ua *UserApi) UserLogin(c *gin.Context) var u user.UserModel if err := c.ShouldBindJSON(u); err != nil response.FailWithMessage(用户参数不合法, c) return if usrService.FindUser(u) token, _ := utils.GenerateToken(u.Account) response.Ok(c) utils.SetToken(c, token, int(72*time.Hour.Seconds())) return response.FailWithMessage(用户尚未注册, c) 调用 c.JSON() 之后设置 Cookie，导致 Cookie 无效。因为 c.JSON() 方法会立即写入响应并结束请求的处理流程，因此在此之后的任何操作（如设置 Cookie）都不会生效。 所以得在 c.JSON() 前调用 SetCookie 才能将 Cookie 真正的置入浏览器！！！ 犯这种低级错误，心里五味杂陈，而且这个问题我几个月前遇到过一次，也是弄了好久，当时没有记录下来，导致如今依旧踩雷，特此记录一下。"},{"title":"提高自己的执行力","path":"//posts/37.html","content":"看到一个视频，感触很深，记录一下！ 一个近乎偏执，但能让你拥有恐怖执行力的顶级思维https://www.bilibili.com/video/BV1gBzoYQEdf/ 一个近乎偏执，但能让你拥有恐怖执行力的顶级思维当一个时间赌徒所谓时间赌徒就是一个阶段内只选一件事然后下重注压上自己所有时间不顾一切的去做2024 年还剩最后一个月如果你今年到现在依然浑浑噩噩跟年初的自己相比一成不变不想让自己今年彻底荒废的话就是选择一件你最想实现的事情然后压上你最后这一个月的所有的时间孤注一掷的去完成不需要任何花里胡哨的时间管理方法因为最简单粗暴的时间管理就是完全不管理花尽一切可能的时间专心做好一件事这是我们大部分普通人拿到结果最高效的路径没有之一因为只有时间上压倒性的投入才有可能换来结果上压倒性的胜利太多目标和太多欲望只会造成选择模糊和动力损耗这是阻碍一个人行动力的根源即便我们有能力实现所有目标但是也几乎不可能同时达成所有目标因为想要得到异于常人的结果就必须拥有异于常人的专注这种专注分为短时专注与长期专注反识专注就是当下的专注做一件事时专心致志心无旁骛而长期专注就是在较长一段时间周期内将核心的时间都投入一件事想要做成一件事这两种专注缺一不可并且必须形成合力很多人考研失败是因为缺乏对于具体学习任务的短时专注很多人创业失败是因为缺乏对于一个赛道项目的长期专注拥有专心当下的能力很重要而具备长期专一的定力更重要因为我们付出的行动和我们得到的结果之间是有延迟的想要的结果越好需要等待的时间就会越久可惜大多数人既希望得到期待的结果又没有耐心等待总是一边做一边怀疑短时间内得不到正反馈就立刻陷入情绪内耗所以很多事情你一旦发疯似的开始做用逢高祭鬼的决心持续做其实赛道一点都不拥挤问题也一点都不难只要你愿意不顾一切把自己一个时期内的时间都压在一件核心的事情上孤注一掷买定离手不设退路就在这件事上死磕到底在过程中不断精进与历练就一定会带来革新性改变你愿意花最后这一个月孤注一掷完成的事情等到跨年的那一天再来看看自己的改变用自己的行动见证时间的强大力量所谓流水不争先争的是滔滔不绝坚定选择一条自己的河道用最大最强的势能汹涌澎湃的奔流向大海吧"},{"title":"hexo-graph，我开发的第一个npm包","path":"//posts/36.html","content":"hexo-graph，一个基于 echarts，集成博客热力图，博客月份统计图，分类统计图，标签统计图的多元化可交互插件。 具体效果：https://haohanxinghe.com/social/stats/ 代码仓库： NPMJS GitHub 安装依赖pnpm i moment # 使用hexo-graph先安装相关依赖pnpm i hexo-graph 在根目录的config.yml中配置:light 主题配置 hexo_graph: theme: light #light/dark 不设置或不填默认是light dark 主题配置 hexo_graph: theme: dark #light/dark 不设置或不填默认是light 进阶主题配色目前该插件支持自定义颜色，monthlyColors 只允许填一个主题颜色，其他支持多个不配置则采用默认配置 hexo_graph: theme: light # 或者 dark monthlyColors: - #FF9A8B # 粉红色与橙色的渐变 heatmapColors: - #A3DFF7 # 浅天蓝色 - #B5D8C4 # 浅绿松石色 - #F7C9B7 # 浅珊瑚色 tagsColors: - #F2A7D1 # 粉紫色 - #F5E05D # 明亮的黄绿色 - #D74B76 # 玫瑰红色 - #1EAEAC # 湖蓝色 - #FFC836 # 浅橙色 - #A8A2FF # 薰衣草紫 - #A9E9FF # 浅天蓝色 - #FF6767 # 鲜艳红色 categoriesColors: - #4C8C99 # 青蓝色 - #F9B5E2 # 浅桃粉色 使用方法在任意页面中导入以下 html 标签 ### Blog Heatmapdiv id=heatmapChart style=width: 100%; height: 200px; overflow-x: auto; overflow-y: hidden; border-radius: 10px; padding: 10px;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);/div### Monthly Article Statisticsdiv id=monthlyChart style=width: 100%; height: 350px; overflow-x: auto; overflow-y: hidden; border-radius: 10px; padding: 10px;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);/div### Tag Statisticsdiv id=tagsChart style=width: 100%; height: 400px; overflow-x: auto; overflow-y: hidden; border-radius: 10px; padding: 10px;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);/div### Category Statisticsdiv id=categoriesChart style=width: 100%; height: 350px;; overflow-x: auto; overflow-y: hidden; border-radius: 10px; padding: 10px;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);/div"},{"title":"如何发布自己的npm包","path":"//posts/35.html","content":"前言安装使用 npm 包是日常学习的一部分，优秀的 npm 包为我们提供了很多便利，也为我们的开发节省了很多的时间。所以学习开发发布一个好用 No Bug npm 包是一项很重要的技能，下面我会结合自己的实战心得总结下发布一个npm包的流程。 1.初始化项目mkdir project-namecd project-namenpm init 2.package.json 配置 name: 包的标识，如果你打算把它发布到全局 registry，请确保这个标识是唯一的 version: 是语义版本号（semver），包可以被发布任意多次，但每次发布必须包含新的版本号 description: 包的描述，用以让其他 npm 用户搜索并了解你的项目，这个字段非必须，但推荐填写 main: 项目暴露的入口文件,默认值为 index.js scripts: shell 执行命令 keywords: 关键字利于搜索 author: 是包的创建者或维护者，遵循 “Your Name (http://your-website.com)” 这样的格式。 license: 是包发布的法律条款，以及什么是包代码的许可用法(ISC | MIT | Apache…) files: 会发布到到仓库的文件白名单,npm 会列出项目中的所有文件。 repository: 可以帮助其他用户找到包的代码托管处，并为其做贡献，这同样是一个可选但推荐填写的字段 bin: 是一个让 npm 在包安装时给包创建 cli 命令（二进制）的映射表 contributors: 是包的贡献者列表，如果有别人参与你的项目，你可以在这里指明 bugs: 是帮助用户了解包现有问题的 URL 链接 homepage: 是项目的主页，包含包的简介、文档和其他附加资源链接 3.项目命名和版本管理规范项目命名注册 npm 用户帐户或创建组织时，系统会授予与您的用户或组织名称匹配的范围。您可以将此作用域用作相关程序包的命名空间。 版本管理SemVer（Semantic Versioning，语义化版本控制）是 Github 起草的一个语义化版本号管理模块，它实现了版本号的解析和比较，规范版本号的格式，它解决了依赖地狱的问题。 基本版本格式 主版本号（Major）.次版本号（Minor）.修订号（Patch）每个部分都为整数（0），按照递增的规则改变。 版本号递增规则 主版本号（Major）：当你做了不兼容的 API 修改 次版本号（Minor）：当你做了向下兼容的功能性新增 修订号（Patch）：当你做了向下兼容的问题修正 先行版本号及版本编译信息可以加到基本版本格式的后面，作为延伸先行版本号由首位的连接号”-“、标识符号（由 ASCII 码的英文数字和连接号标识符[0-9A-Za-z-]组成）、句点”.“组成。如 1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。先行版的优先级低于相关联的标准版本版本编译信息由首位的一个加号和一连串以句点分隔的标识符号（由 ASCII 码的英文数字和连接号标识符[0-9A-Za-z-]组成）组成。如 1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。判断版本优先层级时，版本编译信息可以被忽略 4.开发功能以及打包编译前端库： 需要考虑到使用场景和引用的模块类型，通常需要 gulp 或者 webpack 来进行打包构建成 umd 模块规范纯 js 库： 需要通过编译成 es5 语法，通常需要 babel 或者 ts 进行编译 5.README 文档编写为了帮助其他人在 npm 上找到你发布的软件包，你需要提供一个文档包括安装，配置和使用程序包中的代码的说明。README 文档将会自动作为 npm 包的主页显示。 6.发布到 npm 仓库 搜索项目名查看是否有重名项目 npm search package-name 注册登录 npm login 发布 cd project-dirnpm publish --access public 安装测试 npm install package-name 常用 npm 命令表 Action Commond 创建软连接 npm link [package-name] 删除链接 npm unlink 登录 npm login 查找 npm 包 npm search [package-name] 发布 npm publish [package-name] 撤销发布 npm unpublish [package-name] 查看包信息 npm info [package-name] 查看包的当前版本 npm view [package-name] version 查看包的所有版本 npm view [package-name] versions 查看包安装依赖 npm ls"},{"title":"1panel绕过限制，使用http3传输","path":"//posts/34.html","content":"http3 使用的QUIC传输协议（基于 UDP），对比 http2，有以下优点： 改善了连接建立时间，因为 TCP 是有连接的，在信息发送前得三次握手；而 UDP 是无连接的，可直接发送数据给服务端。 使用更加灵活的控制阻塞算法，TCP 丢包需要重传，导致头阻塞问题，而 QUIC 让每个数据流都有独立的序列号，这样一个流中的数据包丢失不会影响其他流的传输。 使用的加密套件 TLS1.3 更安全 什么是 HTTP3？ 言归正传，1panel 开启 http3 需要 nginx 和 openresty 版本在 1.25 及以上，小于该版本协议使用的 http2。 但是 1panel 的最新官方应用商店的 openresty 的版本为 1.21，不满足开启 http3，那我们该怎么办呢？ 操作前请记得备份，安全第一！！！ 取消 WAF 配置因为 1panel 的 openresty 绑定在一起，本人亲测强行更新 openresty 版本会导致 openresty 启动异常。 打开/opt/1panel/apps/openresty/openresty/conf/nginx.conf 在大约 34 行的位置处： # include /usr/local/openresty/1pwaf/data/conf/waf.conf; 把这行给注释掉 修改 openresty 版本打开/opt/1panel/apps/openresty/openresty/docker-compose.yml 修改 openresty 版本为1.27.1.1-0-focal 重建应用打开已安装，点击重建按钮 或者执行： docker-compose down docker-compose up -d 这样也是可以的 防火墙放行sudo ufw allow 443/udp 配置 http3然后打开网站的配置文件，添加以下几行 listen 443 quic reuseport ;listen [::]:443 quic reuseport ; # 如果支持ipv6 上述是静态网站，如果是反向代理，继续添加这 2 行 add_header Alt-Svc h3=:443; ma=86400;add_header Strict-Transport-Security max-age=63072000; includeSubdomains; preload; 添加响应头，告知客户端关于备用服务的信息（Alt-Svc）以及强制使用安全连接的策略（Strict-Transport-Security）。 网站实测打开https://http3.wcode.net/检测 还提供了一个 http3 的徽标，确实挺不错的 控制台实测请不要开 🪜 可以看到，大多数都是支持h3的 使用 PageSpeed 检测PC 端速度提升了一丢丢，而移动端性能提升显著 移动端的渲染时间比 PC 端慢很多 🤣 今天就到这吧。。。"},{"title":"nuxt初始化被墙解决方案（DNS污染）","path":"//posts/33.html","content":"今天打算开始学习 nuxt 框架，结果初始化项目就报错了 🤣👉🤡 由于 hosts 的原因无法下载 nuxt 前往 C:\\Windows\\System32\\drivers\\etc\\hosts，然后往里面加 2 条记录 185.199.108.133 raw.githubusercontent.com185.199.108.133:443 raw.githubusercontent.com 打开 cmd ipconfig /flushdns 更换 淘宝镜像源 nrm use taobao 下载 nuxt npx nuxi@latest init myNuxt 问题成功解决，"},{"title":"数据科学概论复习（一）","path":"//posts/32.html","content":"第一代数据库（20 世纪 60 年代）层次数据结构本质是 树，节点代表实体，边代表关系，一个子节点只能对应一个父节点，允许没有子节点，查询时需要从根节点开始遍历子节点，节点需要存储大量冗余数据，不利于多对多的查询。 例子 1969，IBM 公司的 IMS（Information Management System） 公司├── 部门A│ ├── 员工A1│ ├── 员工A2├── 部门B ├── 员工B1 ├── 员工B2 网状数据模型本质是 有向图，用网状结构表示各类实体及其间的联系，节点表示实体，边表示实体间的关系。一个节点可以有多个子节点和父节点，简化了层次数据模型多对多查询，但是被后来的关系模型取代。 例子 1970，CODASYL（Conference On Data System Language）下属的数据库任务组 DBTG（Data Base Task Group）提出 DBTG 报告 第二代数据库（70-80 年代）关系数据模型关系型数据库（mysql，pgsql 等），由 关系数据结构，关系操作，关系完整性约束 组成。 第三代数据模型（80 年代后）复杂数据模型4 个特点 一维到多维，结构化到非结构化，如 neo4j 普通静态查询到媒体查询（视频、音频） 并发控制，故障恢复 数据分析与推理 第三代数据库宣言：1990 年美国高级 DBMS 功能委员会发表《第三代数据库系统宣言》，提出了第三代数据库管理系统应有三个基本特征： 应支持数据管理、对象管理和知识管理。 保持或继承第二代数据库系统的技术。 对其它系统开放 数据库的学科含义数据库技术是研究 组织、存储和应用 数据一门学科。 数据模型三个层次（三层模式）：概念数据模型：面向用户逻辑数据模型：面向 DBMS物理数据模型：面向计算机 数据库技术的外延如今大数据时代，仅仅靠 DBMS 是不够的，首先现在大多数数据类型都从简单的一维数据转变为多维数据，结构化数据转换为非结构化数据，而且负载，事务和并发控制已经无法满足时代的发展了，这个时代有很多种数据，现在 Nosql 是主流，数据库从单机转变成集群（HDFS，Amazon S3），服务器也从单机转变为集群（Hadoop），分布式系统不仅提高负载和保证数据稳定性的同时，也提高了数据的查询效率。 数据科学与工程范畴数据采集 -- 数据管理 -- 数据应用 一些复杂的数据库类型（都是存储一些复杂数据结构） 数据库类型 主要特点 应用场景 示例数据库 OODB 面向对象，支持复杂数据结构 CAD、GIS、多媒体数据库 ObjectDB、db4o TDB 支持时间维度和数据历史管理 金融、医疗、供应链 Oracle、PostgreSQL SDB 专注于空间数据和地理计算 地图、导航、城市规划、环境监测 PostGIS、Oracle Spatial 数据管理结构化数据管理：一般使用关系型数据库即可，一般关系都是规定好的，即二维数组。 非结构化数据管理：数据类型位置多样的，关系不能用简单的关系模型表示，如图数据，知识图谱（neo4j），其实知识大模型也算，根据文档内容，生成对应的解答，比如说 MaxKB，这是一款飞致云的一款知识库问答系统，它也通过上传文档爬取文档的形式，对数据进行采集、清洗（文本划分，向量化，RAG）之后存到本地 pgsql 中，对接第三方的大模型引用，然后接入业务系统当中，实现文档 GPT 的功能。 文本划分：故名思意就是把句子划分成多个词 向量化：就是提取特征词，统计词频 RAG：生成增强技术 或 智能检索技术，结合了 信息检索（IR） 课后习题 请谈谈你对数据科学内涵和外延的理解。 答：内涵：数据科学主要以数据采集、数据管理、数据应用为核心，它的生命周期主要是获取数据后进行数据预处理、数据清洗，将数据存储到数据库中（通常是 Nosql），对接第三方应用，起到信息检索，信息可视化等作用。外延：单纯的 DBMS 不满足时代的需要，如今大数据时代，数据逐渐从一维转变成多维，结构化转变为非结构化，现在更倾向于搭建分布式数据库和服务器集群来保证数据节点的稳定性、高可用性、高负载以及高并发等等。 请从数据库技术发展，谈谈数据科学的知识体系。 答：数据库从层次、网状模型到关系模型再到复杂模型，数据从一维转变到多维，结构化转变到非结构化。数据科学知识体系主要由数据采集，数据管理和数据应用为核心。数据采集主要为爬虫，预处理，分词分段，特征化，向量化等等，数据管理主要为数据库存储，分布式存储等，数据应用主要为接入大模型，知识图谱等等。"},{"title":"Go 学习笔记（一）","path":"//posts/31.html","content":"锁的使用在 Go 语言中，锁是一种重要的同步机制，用于确保在并发环境下对共享资源的安全访问。这里我们将介绍两种常见的锁：互斥锁和读写锁。 互斥锁 特点：互斥锁会阻塞其他的读锁和写锁。这意味着在同一时刻，只有一个 goroutine 可以访问被互斥锁保护的资源。无论是读取还是写入操作，都会排斥其他的并发访问。这种严格的同步机制在对资源的访问需要高度一致性时非常有用，但在某些情况下可能会限制并发性能。 读写锁 特点：读写锁相对于互斥锁更加灵活。它允许同时存在多个读锁，但排斥其他的写锁。这意味着在没有写操作进行时，多个 goroutine 可以同时读取被保护的资源，从而提高了并发读取的效率。然而，当有写操作进行时，所有的读操作和其他写操作都会被阻塞，以确保数据的一致性。 sync.Oncesync.Once 是 Go 语言中一个非常有用的工具，用于确保某个操作只执行一次。 示例代码package mainimport ( fmt sync)func main() o := sync.Once for i := 0; i 10; i++ o.Do(func() fmt.Println(i) ) 结果分析：在上述代码中，尽管循环执行了 10 次，但由于 sync.Once 的作用，内部的函数只会被执行一次。输出结果为 0，这展示了 sync.Once 确保操作只执行一次的强大功能。 并发安全的 map在 Go 语言中，原生的 map 类型并不是并发安全的，这意味着在多个 goroutine 同时读写 map 时可能会导致数据不一致或程序崩溃。为了解决这个问题，Go 提供了 sync.Map 类型。 示例代码package mainimport ( fmt sync)func main() m := sync.Map go func() for m.Store(1, 853) () go func() for fmt.Println(m.Load(1)) () for 注意事项： Go 原生的 map 不支持异步读写。在并发环境下，如果尝试同时对原生 map 进行读写操作，可能会导致不可预测的结果。 为了保证并发安全，必须使用 sync.Map。sync.Map 提供了一系列方法，如 Store 用于存储键值对，Load 用于读取键对应的值，这些方法在并发环境下是安全的。 并发池 (sync.Pool)sync.Pool 是 Go 语言中用于管理临时对象的一种机制，可以有效地减少内存分配的开销。 示例代码package mainimport ( fmt sync time)func main() p := sync.Pool p.Put(1) p.Put(2) p.Put(3) for time.Sleep(1 * time.Second) fmt.Println(p.Get()) 特点分析：并发池 sync.Pool 可以存储临时对象，当需要使用这些对象时，可以从池中获取，而不是每次都重新分配内存。这样可以减少内存分配和垃圾回收的压力，提高程序的性能。 文件操作在 Go 语言中，文件操作是一项常见的任务。这里我们将介绍文件的读写操作以及文件夹的操作。 文件读写 直接文件读写： package mainimport ( fmt os)func main() f, err := os.OpenFile(test.txt, os.O_RDWR|os.O_CREATE, 0777) if err!= nil panic(文件打开失败) f.Write([]byte(how do you do what the help I like golang)) f.Seek(0, 0) for b := make([]byte, 12) n, err := f.Read(b) fmt.Println(err) if err!= nil return fmt.Println(string(b), n) 在这个例子中，我们首先打开一个文件，如果文件不存在则创建它。然后向文件中写入一些内容，并通过循环读取文件的内容。 使用 bufio 进行文件读写： package mainimport ( bufio fmt os)func main() f, err := os.OpenFile(test.txt, os.O_RDWR|os.O_CREATE, 0777) if err!= nil panic(文件打开失败) reader := bufio.NewReader(f) for str, err := reader.ReadString( ) fmt.Println(str) if err!= nil return bufio 包提供了更方便的文件读写方式。在这个例子中，我们使用 bufio.NewReader 创建了一个读取器，然后逐行读取文件的内容。 文件夹操作package mainimport ( fmt os)func main() dirEntry, err := os.ReadDir(./) if err!= nil return for _, file := range dirEntry fmt.Println(file.Name()) fmt.Println(file.IsDir()) fmt.Println(file.Info()) // 字节信息 fmt.Println(file.Type()) // 文件类型 这个例子展示了如何读取当前文件夹下的文件和文件夹信息。通过 os.ReadDir 函数可以获取当前文件夹下的所有条目，然后可以获取每个条目的名称、是否为文件夹、字节信息和文件类型等。 写文件（使用 bufio.NewWriter）package mainimport ( bufio fmt os strconv)func main() f, _ := os.OpenFile(test.txt, os.O_RDWR, 0777) reader := bufio.NewReader(f) writer := bufio.NewWriter(f) i := 0 for i++ line, _, err := reader.ReadLine() if err!= nil fmt.Println(err.Error()) break writer.WriteString(strconv.Itoa(i) + + string(line) + ) f.Seek(0, 0) writer.Flush() 这个例子展示了如何使用 bufio.NewWriter 向文件中写入内容。首先打开一个文件，然后创建一个读取器和一个写入器。通过循环读取文件的每一行，并在每一行前面加上行号后写入文件。最后，调用 writer.Flush 确保所有的写入操作都被提交到文件中。 httpHTTP 是现代应用程序中广泛使用的协议，Go 语言提供了强大的 HTTP 支持。 简单 HTTP 服务端package mainimport net/httpfunc handler(rep http.ResponseWriter, req *http.Request) rep.Write([]byte(hello world))func main() http.HandleFunc(/test, handler) http.ListenAndServe(:8081, nil) 这个例子创建了一个简单的 HTTP 服务端，当接收到 /test 路径的请求时，返回 hello world。 支持 GET 和 POST 请求package mainimport ( io net/http)func handler(rep http.ResponseWriter, req *http.Request) method := req.Method switch method case GET: rep.Write([]byte(这是一个 GET 请求)) case POST: body, _ := io.ReadAll(req.Body) header := rep.Header() header[myheader] = []stringmyvalue rep.WriteHeader(http.StatusBadRequest) rep.Write(body) func main() mux := http.NewServeMux() mux.HandleFunc(/test, handler) http.ListenAndServe(:8081, mux) 这个例子中的服务端可以处理 GET 和 POST 请求。根据请求的方法不同，返回不同的响应内容，并设置响应头。 HTTP 服务端 + 客户端服务端代码： package mainimport ( fmt io net/http time)func handler(resp http.ResponseWriter, req *http.Request) method := req.Method switch method case GET: resp.Write([]byte(这是一个 GET 请求)) case POST: body, _ := io.ReadAll(req.Body) header := resp.Header() fmt.Println(string(body)) header[myheader] = []stringmyvalue resp.WriteHeader(http.StatusBadRequest) resp.Write(body) func main() mux := http.NewServeMux() mux.HandleFunc(/test, handler) go func() time.Sleep(1 * time.Second) client.Request() () http.ListenAndServe(:8081, mux) 客户端代码： package clientimport ( bytes fmt net/http)func Request() client := new(http.Client) jsonData := `name:pzj,age:20` r1, _ := http.NewRequest(POST, http://localhost:8081/test, bytes.NewBuffer([]byte(jsonData))) resp, _ := client.Do(r1) fmt.Println(resp.Header) 这个例子展示了一个完整的 HTTP 服务端和客户端的交互。服务端可以处理 GET 和 POST 请求，并在接收到 POST 请求时打印请求体内容并设置响应头。客户端发送一个 POST 请求，并打印响应头信息。 注意事项：在进行 HTTP 编程时，要注意处理各种请求方法、设置正确的响应状态码和响应头，以及处理可能出现的错误情况。同时，合理地设计服务端和客户端的交互流程，可以提高应用程序的可靠性和性能。"},{"title":"artalk配置社交登录踩坑日记","path":"//posts/30.html","content":"社交登录匿名登录这是最简单的一个，勾选即可 邮件登录邮件登录也是直接勾选 GitHub 登录请替换你的 artalk 评论 的域名 然后去 Github OAuth Apps 创建一个 app 注意Homepage 写的是博客首页，Callback 写的是 artalk 对应的回调地址 red 微信登录登录 微信开放平台 管理中心 网站应用 创建网站应用 每个账号最多能够创建 10 个网站应用 网站信息登记表扫描件下载 网站信息登记表扫描件https://open.weixin.qq.com/zh_CN/htmledition/res/assets/manage/Website_Information_Form.doc 下载好后，填写自己的个人信息，去附近打印店打印，盖手印之类的，微信备案也挺麻烦的。不过审核速度真的快，1 天之内就搞定了 如图是 审核成功 的结果： 审核通过后，点击查看 申请 AppSecret，和开通微信登录服务。 申请开通点击进去一看，人都傻了 调用一个微信登录的 API 接口要 300！，不过你是富哥富姐的话，可以考虑开通（狗头保命） 对于我这种就不开通了，浪费钱！！ 一般来说，三个登录方式就够了，如果说用多种方式登录对应的邮箱是一致的，那么就可以合并到一个账户里面去。"},{"title":"wiki侧边栏可设置为折叠块","path":"//posts/29.html","content":"前言stellar 主题不错，就是 wiki 文档数量过多的时候会有滚动条，未免有点难定位到自己的文章，所以我加了一个 folding 属性控制 wiki 侧边栏目录是否为折叠块。 具体效果 修改代码覆盖 themes/stellar/layout/_partial/widgets/tree.ejs 中的代码 %const proj = theme.wiki.tree[page.wiki]function layoutTocHeader(title) var el = el += `div class=widget-header dis-select` el += `span class=name$title || __(meta.toc)/span` el += `/div` return elfunction layoutWikiTocHeader(title) var el = el += `$title || __(meta.toc)` return elfunction layoutDocTree(pages) var el = for (let p of pages) if (p.title == null || p.title.length == 0) continue let isActive = if (p.path === page.path) isActive += active if (proj.pages.length 0) let href = url_for(p.path); if (p.is_homepage) href += #start el += `a class=link$isActive href=$href` el += `span class=toc-text$p.title/span` if (isActive.length 0) el += icon(default:bookmark.active) el += `/a` return elfunction layoutDiv(fallback) if (proj == null) return if (proj.pages == null || proj.pages.length == 0) return if (proj.sections == null || proj.sections.length == 0) return var el = let index = 0 for (let sec of proj.sections) if (sec.pages.length == 0) continue if (sec.title?.length 0 proj.folding page.path.startsWith(wiki)) const sectionIndex = findPageSectionIndex(proj.sections, page.path); if(sectionIndex === index) el +=`details class=tag-plugin colorful folding color=black opensummaryp` else el +=`details class=tag-plugin colorful folding color=blacksummaryp` el += layoutWikiTocHeader(sec.title) el += `/p/summary` const docTree = layoutDocTree(sec.pages) if (docTree.trim().length 0) el += `div class=p` el += `div class=widget-body fs14$docTree/div` el += `/p/div` el += `/details` index++ else el += layoutTocHeader(sec.title) const docTree = layoutDocTree(sec.pages) if (docTree.trim().length 0) el += `div class=widget-body fs14$docTree/div` if (el.trim().length 0) return `widget class=widget-wrapper$scrollreveal( ) post-list$el/widget` else return function findPageSectionIndex(sections, currentPagePath) for (let i = 0; i sections.length; i++) const sec = sections[i]; for (let j = 0; j sec.pages.length; j++) if (sec.pages[j].path === currentPagePath) return i; // 返回匹配的 section 索引 return -1; // 如果没有匹配项，返回 -1%%- layoutDiv() % 使用方法在 data/wiki/example.yml 中设置 folding 属性为 true 即可。 注意如果不设置，默认 wiki 侧边栏不折叠 yellow 拿 go-learn 举例子，对应的配置文件为 data/wiki/go-learn.yml name: golang学习指南title: golang学习指南subtitle: go语言圣经 | haohanxinghe.comtags: 文档icon: /assets/wiki/go-learn/icon.svgcover: /assets/wiki/go-learn/icon.svgcoverpage: truedescription: 总结学习golang的一些常用知识点share: truecomments: falsebase_dir: /wiki/go-learn/folding: truetree: 快速开始: - 入门指南 语法基础: - 基本语法/包 - 基本语法/关键字 - 基本语法/运算符 - 基本语法/字面量 - 基本语法/字符串 - 基本语法/时间与日期 - 基本语法/指针 - 基本语法/函数 - 基本语法/数组与切片 配置好后的 折叠效果"},{"title":"一个人进步最快的方式:主动去消除模糊","path":"//posts/28.html","content":"认知模糊带来的困境一个人变强的第一步就是提升自己对这个世界的精确度。毫不夸张地说，普通人生活当中的所有不幸和痛苦几乎都是源于认知的模糊。马斯克说过一句话，他从来都不相信这个世界上有什么行动力不足的事情，因为所有的行动力问题其实都来源于精确性的不足。在我们基因的编程当中，对于模糊不清的事物会本能地产生恐惧，从而不自觉地想逃避。因为在远古时代，我们的祖先看到草丛在动，但又无法得知那里面是什么时，就会产生很强的心理应激反应，用转身逃跑来防范随时可能跳出来的狮子。于是为了活命，逃避不确定性就被写入了我们的基因。但凡一件事在我们的认知中不够清晰，其边界就会无限扩大，原本并不困难的小事也会在模糊的潜意识里变得难以解决，然后迫使自己主动放弃。 1952 年，游泳运动员弗洛伦斯准备挑战成为第一个横穿英吉利海峡的人类。但是那天他运气不是很好，游到一半时，海上突然飘起浓雾。尽管他旁边救生艇上的工作人员不断鼓励他，给他指引正确的方向，可是他还是放弃了。事后他回忆道，那真的太可怕了，当时的迷雾让我看不清楚我究竟要去哪里，我一瞬间就被恐惧支配了身体。一片未知的迷雾让弗洛伦斯惊慌失措，他不顾一切地要终止挑战。而当他上船之后才发现，此时距离终点仅仅剩下最后的一英里的距离。 其实真正的困难总比我们想象的要小很多。我们之所以拖延纠结、畏惧害怕，根本原因往往不是事情本身有多难，而是这件事在我们的认知中不够清晰，我们自己把自己吓退了。但是因为消除模糊的过程是极其耗能的，我们会本能地逃避高耗能的事情。这也是为什么很多人宁愿待在原地持续受苦，也不愿意主动解决问题，因为解决问题需要动脑、需要行动、需要直面恐惧，而承受痛苦则只需要原地不动就行了。在潜意识中，这是更加确定的舒适区。所以人们宁愿选择忍受此刻确定的痛苦，也不愿意选择尝试结果未知的行动。可是任何痛苦事件都不会自动消失，我们过去逃避的问题一定会以不同的形式重复出现在生命中。所以解除痛苦唯一的办法就是正视它、看清它、拆解它、化解它、不断提高它在我们认知中的精确性。 消除模糊的方法我们的人生其实就是一场消除模糊性的比赛。谁的模糊越严重，谁就越混沌迷茫；谁的模糊越轻微，谁就越强大清醒。具体如何消除模糊、制造清晰呢？ 第一步，消除结果的模糊性。这一步需要先拓展认知中的信息量，先拨开遮挡在我们眼前的迷雾，知道自己什么样的行动会带来什么样的结果。可以进行大量的阅读和调研，去研究现实案例、去看名人传记、去读相关书籍、去拜访行业专家。总之先通过别人的经历和结果去提升自己认知中对于一件事情的达成路径和最终结果的精确性。不要站在原地空想，也不要浪费时间盲目试错，很多你冥思苦想不得解的问题，其实都只是过来人的常识。 第二步，消除过程的模糊性。这一步的关键是从上一步已知的信息中找出关键步骤框架。马斯克说，如果你要一件事情发生，就只需要去集齐这件事情要发生的所有的要素就行了。就像造火箭，关键步骤也只有 27 个。任何一个看似坚不可摧的庞然大物，都可以无限拆解成一个个简单可行的结构。从确定的结果中推导出自己行动的关键步骤，然后去匹配自己相对应的能力和资源，达成所有要素，结果就会自然发生。 第三步，在平和的情绪中坚定地行动。马斯克说，当你干一件重要事情的时候，先一点点干，不管是 30 分还是 20 分，甚至是十分也可以。你先去干，接受自己的烂。开始告诉自己，再烂的结果也比原地不动强。这个世界上绝大部分事情其实都非常非常简单，只要你开始去做，你就会发现一切都是很简单的，简直迎刃而解。但是你要是一直不去做，你光在脑子里面想，你就感觉什么都好难，什么都难以战胜。只要你开始行动了，你眼前的一切就会越来越清晰，任何事情都会变得越来越容易。你做着做着就会发现你的人生已经彻底改变了，你已经成为了一个完全不一样的人了。 一个人变强的底层逻辑一个人变强的底层逻辑就是不断地消除认知、情绪和行动上的模糊。消除模糊需要主动反本能，所以这必然是一条更难走的路。不过你也无需害怕，鼓起勇气面对就好了。因为这个世界只是一个巨大的牡蛎，你只要勇敢挥剑，它就会在你眼前徐徐展开。"},{"title":"添加echarts数据统计","path":"//posts/27.html","content":"前言添加 echarts 数据统计，效果展示 具体实现安装依赖$ 核心代码生成统计数据的脚本新建themes/stellar/scripts/filters/lib/generate-stats.js generate-stats.jsconst fs = require(fs);const path = require(path);const moment = require(moment);function generateStats(hexo) const posts = hexo.locals.get(posts); const monthlyCount = ; const tagCount = ; const categoryCount = ; posts.forEach(post = const month = moment(post.date).format(YYYY-MM); monthlyCount[month] = (monthlyCount[month] || 0) + 1; post.tags.data.forEach(tag = tagCount[tag.name] = (tagCount[tag.name] || 0) + 1; ); post.categories.data.forEach(category = categoryCount[category.name] = (categoryCount[category.name] || 0) + 1; ); ); const sortedMonthlyCount = Object.fromEntries( Object.entries(monthlyCount) .sort((a, b) = a[0].localeCompare(b[0])) // 按键（即月份）排序 ); const topTags = Object.entries(tagCount) .sort((a, b) = b[1] - a[1]) .slice(0, 8) .map(([name, count]) = ( name, count )); const topCategories = Object.entries(categoryCount) .sort((a, b) = b[1] - a[1]) .slice(0, 5) .map(([name, count]) = ( name, count )); const data = monthlyCount: sortedMonthlyCount, topTags, topCategories ; const isDevelopment = hexo.env.cmd === server; const outputDir = isDevelopment ? hexo.source_dir : hexo.public_dir; const outputPath = path.join(outputDir, stats.json); fs.mkdirSync(path.dirname(outputPath), recursive: true ); fs.writeFileSync(outputPath, JSON.stringify(data, null, 2));module.exports = generateStats ; 注册生成统计数据的脚本在themes/stellar/scripts/filters/index.js下添加一条记录 hexo.extend.filter.register(after_generate, () = require(./lib/generate-stats).generateStats(hexo)); 新建一个stats页面直接向文件写入以下代码 ---title: 数据统计date: 2024-11-11 13:10:57leftbar: social, recent---### 文章统计div id=monthlyChart style=width: 85%; height: 350px; margin: 0 auto;/div### 标签统计div id=tagsChart style=width: 85%; height: 350px; margin: 0 auto;/div### 分类统计div id=categoriesChart style=width: 85%; height: 350px; margin: 0 auto;/divscript src=https://cdn.jsdelivr.net/npm/echarts@5.5.1/dist/echarts.min.js/scriptscript // 使用 Ajax 获取 JSON 文件 fetch(/stats.json) .then(response = response.json()) .then(data = const monthlyCount, topTags, topCategories = data; // 渲染每月发布文章数图表（折线图） const monthlyChart = echarts.init(document.getElementById(monthlyChart)); monthlyChart.setOption( xAxis: type: category, data: Object.keys(monthlyCount) , yAxis: type: value , series: [ type: line, data: Object.values(monthlyCount), smooth: true, lineStyle: color: #5470C6 , itemStyle: color: #5470C6 , animationDuration: 1000 ], grid: containLabel: true, left: center, width: 80% ); // 渲染标签出现次数图表（饼图） const tagsChart = echarts.init(document.getElementById(tagsChart)); tagsChart.setOption( tooltip: trigger: item , series: [ type: pie, radius: 50%, data: topTags.map(tag = ( name: tag.name, value: tag.count )), label: formatter: b: c (d%) , color: [#5470C6, #91CC75, #FAC858, #EE6666, #73C0DE, #3BA272, #FC8452, #9A60B4], animationDuration: 1000 ], grid: containLabel: true, left: center, width: 80% ); // 渲染分类出现次数图表（横向柱状图），添加数值标注 const categoriesChart = echarts.init(document.getElementById(categoriesChart)); categoriesChart.setOption( xAxis: type: value , yAxis: type: category, data: topCategories.map(category = category.name).reverse() , series: [ type: bar, data: topCategories.map(category = category.count).reverse(), label: show: true, position: right, formatter: c, // 显示数值 fontSize: 12, fontFamily: Arial , itemStyle: color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [ offset: 0, color: #73C0DE , offset: 1, color: #5470C6 ]), emphasis: color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [ offset: 0, color: #EE6666 , offset: 1, color: #FC8452 ]) , animationDuration: 1000 ], grid: containLabel: true, left: center, width: 80% ); ) .catch(error = console.error(Error fetching stats data:, error));/script 如果尚不清楚可以去主题日志查看"},{"title":"添加chat组件","path":"//posts/26.html","content":"前言chat 组件，我参考了且听风吟和星日语大佬的博客，感谢他们提供的思路。 效果展示qqwechat21:16 5古诗词小游戏栈主克喵爱吃卤面君不见黄河之水天上来，奔流到海不复回。闲鱼zjj君不见高堂明镜悲白发，朝如青丝暮成雪。闲鱼zjj人生得意须尽欢，莫使金樽空对月。栈主克喵爱吃卤面天生我材必有用，千金散尽还复来。栈主克喵爱吃卤面数据科学概论实验https://github.com/Kemeow815/AKGraph发送 21:16 5古诗词小游戏栈主克喵爱吃卤面君不见黄河之水天上来，奔流到海不复回。闲鱼zjj君不见高堂明镜悲白发，朝如青丝暮成雪。闲鱼zjj人生得意须尽欢，莫使金樽空对月。栈主克喵爱吃卤面天生我材必有用，千金散尽还复来。栈主克喵爱吃卤面数据科学概论实验https://github.com/Kemeow815/AKGraph 用法介绍% chat style:qq/wechat title:标题 time:时间 %!-- chattip 2024年5月22日 21:43 --!-- chatcell user:user1 --content1!-- chatcell user:user2 align:right --content2% endchat % 一定要有users.yml文件，否则会报错。 对应效果 时间 2标题2024年5月22日 21:43 栈主克喵爱吃卤面content1闲鱼zjjcontent2 具体实现注册 chat 组件在themes/stellar/scripts/tags/index.js下新增以下代码 hexo.extend.tag.register(chat, require(./lib/chat)(hexo), true); 新增 chat.js新建themes/stellar/scripts/tags/lib/chat.js，并写入以下代码 chat.jsuse strict;module.exports = (ctx) = function (args, content = ) args = ctx.args.map(args, [title, time, style]); const users = ctx.theme.config.users; // 提取 chatTip 和 chatcell 内容 const chatTipMatch = content.match(/!-- chattip (.*?) --/); const chatContentMatches = [ ...content.matchAll( /!-- chatcell user:(\\w+)(?: align:(\\w+))? -- ([\\s\\S]*?)(?=!--|$)/g ), ]; // 将时间和内容赋值到 chat 对象 const chat = chatTip: chatTipMatch ? chatTipMatch[1] : , chatContent: chatContentMatches.map((match) = ( user: match[1], align: match[2] || left, // 如果 align 未指定，默认为 left words: match[3].trim(), // 获取 chatcell 标签下的文本内容 )), ; var el = `div class=tag-plugin chat iphone11 $args.style || wechat`; el += `div class=device-image/div`; el += `div class=status-bar`; el += `div class=left-itemsspan class=time$ args.time || /span/div`; el += `div class=right-itemssvg t=1725171674750 class=icon earphone viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=973 width=200 height=200path d=M320 960c-6.4 0-14.933333-4.266667-17.066667-10.666667-34.133333-53.333333-61.866667-153.6-74.666666-204.8-2.133333 0-6.4-2.133333-8.533334-4.266666-4.266667-4.266667-6.4-8.533333-6.4-14.933334 0-6.4-12.8-66.133333-23.466666-115.2-4.266667-23.466667-8.533333-44.8-12.8-61.866666l-6.4-4.266667c-12.8-6.4-19.2-19.2-19.2-34.133333v-115.2c0-14.933333 8.533333-27.733333 19.2-34.133334l40.533333-21.333333c6.4-2.133333 12.8-4.266667 19.2-4.266667h12.8c12.8 0 23.466667 6.4 29.866667 14.933334 8.533333-27.733333 32-46.933333 61.866666-46.933334h17.066667c81.066667 0 149.333333 66.133333 149.333333 149.333334s-68.266667 149.333333-149.333333 149.333333h-14.933333c-29.866667 0-55.466667-19.2-61.866667-46.933333l-6.4 6.4 10.666667 160c0 4.266667 0 8.533333-4.266667 12.8l68.266667 196.266666c4.266667 10.666667-2.133333 21.333333-10.666667 25.6-6.4 4.266667-8.533333 4.266667-12.8 4.266667z m-125.866667-452.266667l12.8 6.4c6.4 2.133333 8.533333 8.533333 10.666667 14.933334 2.133333 8.533333 4.266667 21.333333 6.4 34.133333v-12.8c0-10.666667 6.4-19.2 14.933333-21.333333v-21.333334c0-21.333333 17.066667-38.4 38.4-38.4h14.933334c12.8 0 21.333333 8.533333 21.333333 21.333334v49.066666c0 12.8 10.666667 21.333333 21.333333 21.333334h14.933334c59.733333 0 106.666667-49.066667 106.666666-106.666667s-46.933333-106.666667-106.666666-106.666667h-17.066667c-12.8 0-21.333333 10.666667-21.333333 21.333334v49.066666c0 12.8-8.533333 21.333333-21.333334 21.333334H277.333333c-21.333333 0-38.4-17.066667-38.4-38.4v-21.333334h-8.533333l-36.266667 19.2v108.8zM706.133333 742.4c-2.133333 0-6.4 0-8.533333-2.133333-10.666667-4.266667-14.933333-14.933333-10.666667-25.6l68.266667-196.266667c-2.133333-4.266667-4.266667-8.533333-4.266667-12.8l10.666667-160-6.4-6.4c-8.533333 27.733333-32 46.933333-61.866667 46.933333h-14.933333c-83.2 0-149.333333-68.266667-149.333333-149.333333s66.133333-149.333333 149.333333-149.333333h17.066667c29.866667 0 55.466667 19.2 61.866666 46.933333 6.4-8.533333 17.066667-14.933333 29.866667-14.933333h12.8c6.4 0 12.8 2.133333 19.2 4.266666l40.533333 21.333334c6.4 6.4 14.933333 19.2 14.933334 32v115.2c0 14.933333-8.533333 27.733333-19.2 34.133333l-6.4 2.133333c-4.266667 17.066667-8.533333 40.533333-12.8 64-8.533333 49.066667-21.333333 108.8-21.333334 115.2 0 6.4-4.266667 10.666667-6.4 14.933334-2.133333 2.133333-4.266667 4.266667-8.533333 4.266666-12.8 53.333333-40.533333 153.6-74.666667 204.8-6.4 6.4-12.8 10.666667-19.2 10.666667z m81.066667-433.066667c8.533333 2.133333 14.933333 10.666667 14.933333 21.333334v12.8c2.133333-12.8 4.266667-23.466667 6.4-34.133334 2.133333-6.4 4.266667-10.666667 10.666667-14.933333l12.8-6.4V179.2l-38.4-21.333333h-6.4v21.333333c0 21.333333-17.066667 38.4-38.4 38.4h-14.933333c-12.8 0-21.333333-8.533333-21.333334-21.333333V149.333333c0-12.8-10.666667-21.333333-21.333333-21.333333h-17.066667c-57.6 0-106.666667 46.933333-106.666666 106.666667s49.066667 106.666667 106.666666 106.666666h14.933334c12.8 0 21.333333-10.666667 21.333333-21.333333v-49.066667c0-12.8 8.533333-21.333333 21.333333-21.333333h14.933334c21.333333 0 38.4 17.066667 38.4 38.4v21.333333z fill=#4BB9A9 p-id=974/path/svg svg t=1725171785378 class=icon bluetooth viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1590 width=200 height=200path d=M561.066667 512l157.866666-134.4c4.266667-4.266667 8.533333-10.666667 8.533334-14.933333s-2.133333-12.8-8.533334-14.933334l-177.066666-149.333333c-6.4-6.4-17.066667-6.4-23.466667-4.266667-8.533333 4.266667-12.8 10.666667-12.8 19.2v251.733334l-168.533333-142.933334c-8.533333-8.533333-23.466667-6.4-32 2.133334-8.533333 8.533333-6.4 21.333333 2.133333 29.866666l187.733333 157.866667-187.733333 157.866667c-8.533333 8.533333-10.666667 21.333333-2.133333 29.866666 4.266667 4.266667 10.666667 6.4 17.066666 6.4 4.266667 0 10.666667-2.133333 14.933334-6.4l168.533333-142.933333V810.666667c0 8.533333 4.266667 17.066667 12.8 19.2 2.133333 2.133333 6.4 2.133333 8.533333 2.133333 6.4 0 10.666667-2.133333 14.933334-6.4l177.066666-149.333333c4.266667-4.266667 8.533333-10.666667 8.533334-14.933334s-2.133333-12.8-8.533334-14.933333L561.066667 512z m-12.8-251.733333l119.466666 102.4-119.466666 102.4v-204.8z m0 503.466666v-202.666666l119.466666 102.4-119.466666 100.266666z fill=#4BB9A9 p-id=1591/path/svg svg t=1725171737557 class=icon network viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1438 width=200 height=200path d=M486.4 746.666667h-85.333333V533.333333c0-23.466667 19.2-42.666667 42.666666-42.666666s42.666667 19.2 42.666667 42.666666v213.333334zM347.733333 746.666667h-85.333333v-128c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667v128zM622.933333 746.666667h-85.333333V448c0-23.466667 19.2-42.666667 42.666667-42.666667s42.666667 19.2 42.666666 42.666667v298.666667zM761.6 746.666667h-85.333333V320c0-23.466667 19.2-42.666667 42.666666-42.666667s42.666667 19.2 42.666667 42.666667v426.666667z fill=#4BB9A9 p-id=1439/path/svg svg t=1725171718141 class=icon wifi viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1283 width=200 height=200path d=M503.466667 810.666667l96-102.4c-25.6-25.6-59.733333-42.666667-96-42.666667s-72.533333 17.066667-96 42.666667l96 102.4zM503.466667 462.933333c-89.6 0-172.8 38.4-232.533334 102.4l76.8 81.066667c40.533333-42.666667 93.866667-68.266667 153.6-68.266667s115.2 25.6 153.6 68.266667l76.8-81.066667c-55.466667-64-136.533333-102.4-228.266666-102.4z fill=#4BB9A9 p-id=1284/pathpath d=M503.466667 260.266667c-142.933333 0-273.066667 61.866667-366.933334 162.133333l76.8 81.066667c74.666667-78.933333 177.066667-128 290.133334-128 113.066667 0 215.466667 49.066667 290.133333 128l76.8-81.066667c-93.866667-100.266667-224-162.133333-366.933333-162.133333z fill=#4BB9A9 p-id=1285/path/svg svg t=1725171698168 class=icon battery viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1125 width=200 height=200path d=M704 682.666667H234.666667c-83.2 0-149.333333-66.133333-149.333334-149.333334v-42.666666c0-83.2 66.133333-149.333333 149.333334-149.333334h469.333333c83.2 0 149.333333 66.133333 149.333333 149.333334v42.666666c0 83.2-66.133333 149.333333-149.333333 149.333334zM234.666667 384c-59.733333 0-106.666667 46.933333-106.666667 106.666667v42.666666c0 59.733333 46.933333 106.666667 106.666667 106.666667h469.333333c59.733333 0 106.666667-46.933333 106.666667-106.666667v-42.666666c0-59.733333-46.933333-106.666667-106.666667-106.666667H234.666667z fill=#4BB9A9 p-id=1126/pathpath d=M704 682.666667H234.666667c-83.2 0-149.333333-66.133333-149.333334-149.333334v-42.666666c0-83.2 66.133333-149.333333 149.333334-149.333334h469.333333c83.2 0 149.333333 66.133333 149.333333 149.333334v42.666666c0 83.2-66.133333 149.333333-149.333333 149.333334zM234.666667 384c-59.733333 0-106.666667 46.933333-106.666667 106.666667v42.666666c0 59.733333 46.933333 106.666667 106.666667 106.666667h469.333333c59.733333 0 106.666667-46.933333 106.666667-106.666667v-42.666666c0-59.733333-46.933333-106.666667-106.666667-106.666667H234.666667z fill=#4BB9A9 p-id=1127/pathpath d=M153.6 539.733333v-55.466666c0-38.4 32-70.4 70.4-70.4h490.666667c38.4 0 70.4 32 70.4 70.4v55.466666c0 38.4-32 70.4-70.4 70.4h-490.666667c-38.4 0-70.4-32-70.4-70.4zM896 554.666667c-12.8 0-21.333333-8.533333-21.333333-21.333334v-42.666666c0-12.8 8.533333-21.333333 21.333333-21.333334s21.333333 8.533333 21.333333 21.333334v42.666666c0 12.8-8.533333 21.333333-21.333333 21.333334z fill=#4BB9A9 p-id=1128/path/svg/div`; el += `/div`; el += `div class=navbar`; el += `div class=left-items`; el += `div class=back-btnsvg t=1725176176548 class=icon back viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=992 width=200 height=200path d=M347.008 574.379a85.547 85.547 0 0 1 0-124.758l285.483-267.477a42.39 42.39 0 0 1 60.074 2.07c16.022 17.237 15.104 44.223-2.069 60.309L405.013 512l285.483 267.477c17.173 16.086 18.09 43.094 2.07 60.31a42.39 42.39 0 0 1-60.075 2.069L347.008 574.379z p-id=993/path/svg/div`; el += `div class=news-num$ chat.chatContent?.length || /divdiv class=title$args.title || /div`; el += `/div`; el += `div class=right-items`; el += `div class=more-btnsvg t=1725176222076 class=icon more viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1146 width=200 height=200path d=M106.667 170.667A42.667 42.667 0 0 1 149.333 128h725.334a42.667 42.667 0 1 1 0 85.333H149.333a42.667 42.667 0 0 1-42.666-42.666z m0 341.333a42.667 42.667 0 0 1 42.666-42.667h725.334a42.667 42.667 0 1 1 0 85.334H149.333A42.667 42.667 0 0 1 106.667 512z m0 341.333a42.667 42.667 0 0 1 42.666-42.666h725.334a42.667 42.667 0 1 1 0 85.333H149.333a42.667 42.667 0 0 1-42.666-42.667z p-id=1147/path/svg/div`; el += `/div`; el += `/div`; el += `div class=content`; el += `div class=chattip$chat.chatTip/div`; for (let messageContent of chat.chatContent) el += `div class=chatcell $ messageContent?.align div class=user-avatarimg src=$ users[messageContent?.user]?.avatar || https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/image/2659360.svg alt=avatar/divdiv class=user-maindiv class=headerspan class=label$ users[messageContent?.user]?.label?.text || /spanspan class=name$ users[messageContent?.user]?.name || /span/divdiv class=talk emoji$ messageContent?.words || /div/div/div`; el += `/div`; if (args.style === qq) el += `div class=bottomdiv class=inputdiv class=input-text/divdiv class=submit-btn发送/div/divdiv class=iconssvg t=1725181743954 class=icon voice viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=12114 width=200 height=200path d=M511.546501 703.829938c125.165633 0 224.028344-98.86271 224.028344-224.028344V224.028344C735.574845 98.86271 636.712135 0 511.546501 0 387.287865 0 287.518158 98.86271 287.518158 224.028344v255.77325c0 125.165633 99.769708 224.028344 224.028343 224.028344zM351.914969 224.028344c0-89.792737 70.745793-159.631532 159.631532-159.631533 89.792737 0 160.53853 69.838795 160.53853 159.631533v255.77325c0 89.792737-70.745793 160.53853-160.53853 160.53853-88.88574 0-159.631532-70.745793-159.631532-160.53853V224.028344z fill=#2c2c2c p-id=12115/pathpath d=M896.113375 479.801594h-64.396812c0 175.957484-144.212578 320.170062-320.170062 320.170062S192.283437 655.759079 192.283437 479.801594H127.886625c0 201.35341 153.282551 364.612932 351.914969 380.938884v163.259522h64.396812V860.740478c197.725421-16.325952 351.914969-179.585474 351.914969-380.938884z fill=#2c2c2c p-id=12116/path/svg svg t=1725181180856 class=icon photos viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=4604 width=200 height=200path d=M340.7 309.9c22.5 0 43.7 9.2 59.8 25.9 16.4 17 25.4 39.5 25.4 63.4 0 49-38.2 88.9-85.2 88.9-46.9 0-85.1-40.1-85.1-89.3 0-24 9-46.5 25.3-63.3 16-16.5 37.2-25.6 59.8-25.6m0-40c-69.2 0-125.1 57.6-125.1 128.9 0 71.2 55.9 129.3 125.1 129.3 69.2 0 125.2-58 125.2-128.9 0-70.8-56-129.3-125.2-129.3z p-id=4605/pathpath d=M753.1 895.1h-482c-53.5 0-104-20.6-142-58.1-7.9-7.7-8-20.4-0.2-28.3 7.7-7.9 20.4-8 28.3-0.2 30.6 30 71 46.6 114 46.6h482.1c89.6 0 162.6-72.9 162.6-162.6v-361c0-89.6-72.9-162.6-162.6-162.6H270.9c-89.6 0-162.6 72.9-162.6 162.6v299.1c0 11-9 20-20 20s-20-9-20-20V331.5c0-111.7 90.9-202.6 202.6-202.6h482.3c111.7 0 202.6 90.9 202.6 202.6v361.1c-0.1 111.6-91 202.5-202.7 202.5z p-id=4606/pathpath d=M586.9 895.1H273.2c-47.9 0-94.2-17.2-130.6-48.4-6.6-5.7-10.6-13.7-11.2-22.5-0.6-8.9 2.5-17.8 8.4-24.4l112.3-126c17.5-19.7 42.7-30.9 69-30.9 26.3 0 51.5 11.3 69 31l137.3 154.2 59.5 67z m-412.5-74c28.1 22 62.9 34 98.7 34h224.7l-0.4-0.4-137.2-154.2c-9.9-11.2-24.2-17.6-39.2-17.6-14.9 0-29.2 6.4-39.1 17.6L174.4 821.1z p-id=4607/pathpath d=M753.1 895.1H449.5l46.4-65.3L752 471.3c11-15.2 28.7-24.3 47.4-24.3h0.2c18.7 0.1 36.3 9.1 47.1 24.3l109 152.7v68.5c0 111.7-90.9 202.6-202.6 202.6z m-226.1-40h226.2c89.6 0 162.6-72.9 162.6-162.6v-55.7L814 494.5c-3.4-4.8-8.7-7.5-14.6-7.5h-0.1c-6 0-11.4 2.8-14.9 7.6L528.5 853l-1.5 2.1z p-id=4608/path/svg svg t=1725181229504 class=icon camera viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=5778 width=200 height=200path d=M512 288c-124.8 0-224 99.2-224 224s99.2 224 224 224 224-99.2 224-224-99.2-224-224-224z m0 400c-96 0-176-80-176-176s80-176 176-176 176 80 176 176-80 176-176 176zM768 371.2a1.6 1.6 0 1 0 102.4 0 1.6 1.6 0 1 0-102.4 0z fill= p-id=5779/pathpath d=M864 224h-96l-22.4-67.2c-6.4-16-25.6-28.8-41.6-28.8H320c-19.2 0-35.2 12.8-41.6 28.8L256 224h-96c-54.4 0-96 41.6-96 96v448c0 54.4 44.8 96 96 96h704c54.4 0 96-41.6 96-96V320c0-54.4-41.6-96-96-96z m48 544c0 25.6-22.4 48-48 48H160c-25.6 0-48-22.4-48-48V320c0-25.6 22.4-48 48-48h131.2l9.6-32 22.4-64h377.6l22.4 64 9.6 32H864c25.6 0 48 22.4 48 48v448z fill= p-id=5780/path/svg svg t=1725181292114 class=icon red-envelope viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=7925 width=200 height=200path d=M839.68 102.4c0-11.264-9.216-20.48-20.48-20.48-3.584 0-6.656 1.024-9.216 2.56-3.584-1.024-7.168-1.536-11.264-1.536H225.28c-4.096 0-7.68 0.512-11.264 1.536-2.56-1.536-5.632-2.56-9.216-2.56-11.264 0-20.48 9.216-20.48 20.48 0 5.12 0 10.752 0.512 15.872 0 1.536-0.512 3.584-0.512 5.632V901.12c0 22.528 18.432 40.96 40.96 40.96h573.44c22.528 0 40.96-18.432 40.96-40.96V123.392c0-2.048 0-3.584-0.512-5.632 0.512-4.608 0.512-10.24 0.512-15.36z m-41.984 20.992C786.944 271.36 663.04 388.608 512 388.608S237.056 271.872 226.304 123.392h571.392zM225.28 901.12V260.608c55.808 100.864 163.328 168.96 286.72 168.96s230.912-68.608 286.72-168.96V901.12H225.28z p-id=7926/pathpath d=M595.968 550.4l-51.712 95.744c-2.048 3.584 0.512 7.68 4.608 7.68h52.736c7.68 0 13.824 6.144 13.824 13.824 0 7.68-6.144 13.824-13.824 13.824h-65.536c-3.072 0-5.12 2.048-5.12 5.12v33.792h75.776c7.68 0 13.824 6.144 13.824 13.824 0 7.68-6.144 13.824-13.824 13.824h-70.656c-3.072 0-5.12 2.048-5.12 5.12v53.76c0 9.728-7.68 17.408-17.408 17.408s-17.408-7.68-17.408-17.408v-53.76c0-3.072-2.048-5.12-5.12-5.12H417.792c-7.68 0-13.824-6.144-13.824-13.824 0-7.68 6.144-13.824 13.824-13.824h77.824v-33.792c0-3.072-2.048-5.12-5.12-5.12H422.912c-7.68 0-13.824-6.144-13.824-13.824 0-7.68 6.144-13.824 13.824-13.824h53.76c4.096 0 6.144-4.096 4.608-7.68l-51.2-95.744c-5.632-10.752 2.048-24.064 14.336-24.064h2.56c6.144 0 11.776 3.584 14.848 9.216l43.008 90.112c2.56 5.632 5.632 12.288 9.216 20.992h0.512c2.56-6.656 5.632-14.336 9.216-22.016l43.52-89.088c2.56-5.632 8.192-9.216 14.848-9.216 11.776 0 19.968 13.312 13.824 24.064z p-id=7927/path/svg svg t=1725182023098 class=icon smile viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=13177 width=200 height=200path d=M675.328 117.717333A425.429333 425.429333 0 0 0 512 85.333333C276.352 85.333333 85.333333 276.352 85.333333 512s191.018667 426.666667 426.666667 426.666667 426.666667-191.018667 426.666667-426.666667c0-56.746667-11.093333-112-32.384-163.328a21.333333 21.333333 0 0 0-39.402667 16.341333A382.762667 382.762667 0 0 1 896 512c0 212.074667-171.925333 384-384 384S128 724.074667 128 512 299.925333 128 512 128c51.114667 0 100.8 9.984 146.986667 29.12a21.333333 21.333333 0 0 0 16.341333-39.402667z m48.384 532.928A234.538667 234.538667 0 0 1 520.405333 768a234.538667 234.538667 0 0 1-203.264-117.333333 21.333333 21.333333 0 0 0-36.949333 21.333333 277.184 277.184 0 0 0 240.213333 138.666667c100.16 0 190.997333-53.546667 240.213334-138.666667a21.333333 21.333333 0 0 0-36.906667-21.333333zM341.333333 426.624c0-23.552 18.944-42.624 42.666667-42.624 23.573333 0 42.666667 19.157333 42.666667 42.624v42.752A42.538667 42.538667 0 0 1 384 512c-23.573333 0-42.666667-19.157333-42.666667-42.624v-42.752z m256 0c0-23.552 18.944-42.624 42.666667-42.624 23.573333 0 42.666667 19.157333 42.666667 42.624v42.752A42.538667 42.538667 0 0 1 640 512c-23.573333 0-42.666667-19.157333-42.666667-42.624v-42.752z fill=#3D3D3D p-id=13178/path/svg svg t=1725181698540 class=icon more viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=10952 width=200 height=200path d=M882.2 355.6c-20.2-47.8-49.2-90.8-86.1-127.7-36.9-36.9-79.9-65.9-127.7-86.1-49.5-21-102.2-31.6-156.4-31.6s-106.9 10.6-156.4 31.6c-47.9 20.2-90.8 49.2-127.7 86.1-36.9 36.9-65.9 79.9-86.1 127.7-21 49.6-31.6 102.2-31.6 156.4s10.6 106.9 31.6 156.4c20.2 47.8 49.2 90.8 86.1 127.7 36.9 36.9 79.9 65.9 127.7 86.1 49.5 21 102.2 31.6 156.4 31.6s106.9-10.6 156.4-31.6c47.9-20.2 90.8-49.2 127.7-86.1 36.9-36.9 65.9-79.9 86.1-127.7 21-49.5 31.6-102.2 31.6-156.4s-10.6-106.9-31.6-156.4zM512 877.8c-201.7 0-365.8-164.1-365.8-365.8 0-201.7 164.1-365.8 365.8-365.8 201.7 0 365.8 164.1 365.8 365.8 0 201.7-164.1 365.8-365.8 365.8z p-id=10953/pathpath d=M752.8 512.2c0 9.9-8.1 18-18 18H530.2v204.6c0 9.9-8.1 18-18 18s-18-8.1-18-18V530.2H289.6c-9.9 0-18-8.1-18-18s8.1-18 18-18h204.6V289.6c0-9.9 8.1-18 18-18s18 8.1 18 18v204.6h204.6c9.9 0 18 8 18 18z p-id=10954/path/svg/div/div`; else el += `div class=bottomsvg t=1730482672119 class=icon voice viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=6039 width=48 height=48path d=M513 959.5c-58.1 0-114.8-11-168.4-32.8-55.5-22.5-105.3-55.6-148.1-98.3-42.7-42.7-75.8-92.5-98.3-148C76.5 626.8 65.5 570.1 65.5 512c0-58.1 11-114.8 32.8-168.4 22.5-55.5 55.6-105.3 98.3-148 42.7-42.7 92.5-75.8 148-98.3C398.2 75.5 454.9 64.5 513 64.5s114.8 11 168.4 32.8c55.5 22.5 105.3 55.6 148 98.3 42.7 42.7 75.8 92.5 98.3 148 21.7 53.6 32.8 110.3 32.8 168.4 0 58.1-11 114.8-32.8 168.4-22.5 55.5-55.6 105.3-98.3 148-42.7 42.7-92.5 75.8-148 98.3-53.7 21.8-110.3 32.8-168.4 32.8z m0-839c-50.9 0-100.4 9.6-147.3 28.7-48.5 19.7-92.1 48.6-129.5 86-37.4 37.4-66.3 80.9-86 129.5-19 46.9-28.7 96.5-28.7 147.3 0 50.9 9.6 100.4 28.7 147.3 19.7 48.5 48.6 92.1 86 129.5 37.4 37.4 80.9 66.3 129.5 86 46.9 19 96.5 28.7 147.3 28.7 50.9 0 100.4-9.6 147.3-28.7 48.5-19.7 92.1-48.6 129.5-86 37.4-37.4 66.3-81 86-129.5 19-46.9 28.7-96.5 28.7-147.3s-9.6-100.4-28.7-147.3c-19.7-48.5-48.6-92.1-86-129.5-37.4-37.4-80.9-66.3-129.5-86-46.9-19-96.5-28.7-147.3-28.7z fill= p-id=6040/pathpath d=M569.1 764c-10.5-10.2-11.4-26.7-2.1-38 49.8-60.1 77-135.2 77-214 0-78.8-27.2-153.9-77-214-9.3-11.3-8.5-27.8 2.1-38 11.7-11.3 30.6-10.3 41 2.2C668.3 332.4 700 420 700 512s-31.7 179.6-89.9 249.8c-10.4 12.5-29.3 13.6-41 2.2zM450.7 649.7c-10-9.7-11.5-25.3-3.3-36.5 21.3-29.2 32.8-64.4 32.8-101.2s-11.5-71.9-32.8-101.2c-8.2-11.2-6.7-26.8 3.3-36.5 12.2-11.8 32.1-10.1 42 3.6 28.3 38.8 43.5 85.4 43.5 134.1 0 48.7-15.3 95.3-43.5 134.1-10 13.7-29.8 15.4-42 3.6zM349.3 551.8c-7.8-7.5-10.4-18.7-7.1-29 1.1-3.4 1.7-7.1 1.7-10.8 0-3.7-0.6-7.3-1.7-10.8-3.3-10.3-0.6-21.5 7.1-29 14.9-14.4 39.7-8.2 46.1 11.4 2.9 9 4.4 18.6 4.4 28.3s-1.5 19.3-4.4 28.3c-6.4 19.8-31.2 25.9-46.1 11.6z fill= p-id=6041/path/svgdiv class=input-text/divsvg t=1730481816484 class=icon smile viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=1014 width=48 height=48path d=M600.1 637h-36 36zM918.5 334.2c-22.6-53.4-55-101.5-96.2-142.7-41.2-41.2-89.2-73.6-142.7-96.2C624.2 71.9 565.5 60 504.8 60 444.2 60 385.4 71.9 330 95.3c-53.4 22.6-101.5 54.9-142.7 96.2-41.2 41.2-73.6 89.2-96.2 142.7C67.9 389.6 56 448.4 56 509c0 60.6 11.9 119.4 35.3 174.8 22.6 53.4 54.9 101.5 96.2 142.7 41.2 41.2 89.2 73.6 142.7 96.2C385.6 946.1 444.3 958 505 958c60.6 0 119.4-11.9 174.8-35.3 53.4-22.6 101.5-55 142.7-96.2 41.2-41.2 73.6-89.2 96.2-142.7C942.1 628.4 954 569.7 954 509c0-60.7-12.1-119.4-35.5-174.8zM504.9 893.1c-211.8 0-384.1-172.3-384.1-384.1s172.3-384.1 384.1-384.1S889 297.2 889 509 716.7 893.1 504.9 893.1z p-id=1015/pathpath d=M348.4 439.4c31 0 56.2-25.1 56.2-56.2 0-31-25.1-56.2-56.2-56.2-31 0-56.2 25.1-56.2 56.2s25.2 56.2 56.2 56.2zM661.6 439.4c31 0 56.2-25.1 56.2-56.2 0-31-25.1-56.2-56.2-56.2-31 0-56.2 25.1-56.2 56.2 0.1 31.1 25.2 56.2 56.2 56.2zM751 547.8c0-9.3-7.6-16.8-17-16.8H276c-9.3 0-16.9 7.5-17 16.8v0.2c0 16.1 1.6 31.8 4.5 47C285.4 708.4 385.2 794 505 794s219.6-85.6 241.5-199c2.9-15.2 4.5-30.9 4.5-47v-0.2zM505 731c-84.8 0-156.1-57.7-176.9-136h353.8c-20.8 78.3-92.1 136-176.9 136z p-id=1016/path/svg svg t=1730481878865 class=icon more viewBox=0 0 1024 1024 version=1.1 xmlns=http://www.w3.org/2000/svg p-id=949 width=48 height=48path d=M512 82.773333a426.666667 426.666667 0 1 0 426.666667 426.666667 426.666667 426.666667 0 0 0-426.666667-426.666667z m0 800.426667a374.186667 374.186667 0 1 1 373.76-374.186667A374.613333 374.613333 0 0 1 512 883.2z fill=#333333 p-id=950/pathpath d=M705.28 482.986667h-166.4V324.693333a26.026667 26.026667 0 0 0-25.6-26.453333 26.026667 26.026667 0 0 0-26.026667 26.026667v158.72H319.573333a26.026667 26.026667 0 0 0 0 52.053333h166.4v158.293333a26.026667 26.026667 0 0 0 26.026667 26.453334 26.453333 26.453333 0 0 0 26.453333-26.026667v-158.72h167.253334a26.026667 26.026667 0 0 0 0-52.053333z fill=#333333 p-id=951/path/svg/div`; el += `/div`; return el; ; 新增 chat.styl新建themes/stellar/source/css/_components/tag-plugins/chat.styl，并写入以下代码 chat.styl.md-text .tag-plugin .chat width 375px margin 1rem auto border-radius 8px background var(--chat-block) box-shadow rgba(0,0,0,.16) 0 1px 4px display flex flex-direction column height 658px width 320px overflow hidden .iphone11 width 312px height 658px border-radius 3em padding 1em position relative box-shadow unset .device-image background-image url(https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.4/frame/iphone11.svg) width 100% height 100% position absolute top 0 left 0 z-index 2 background-repeat round .status-bar display flex margin .5em .7em justify-content space-between .left-items font-size .75rem width 5em display flex justify-content center .right-items display flex flex-direction row align-items center svg .icon width 1.3em height 1.3em path fill var(--text-p1) .bottom margin 0 .4em padding-bottom .75em .navbar display flex padding .3rem 0 justify-content space-between z-index 4 .left-items display flex align-items center .back-btn margin-left .2em .icon .back width 1.3em height 1.3em .news-num background var(--chat-bg) border-radius 8px font-size .75em padding 0 4px margin-right 8px color var(--text-p2) .right-items .more-btn height 100% margin-right .5em .content background var(--chat-bg) overflow auto flex 1 z-index 3 overflow-x hidden div :first-child margin-top 1em .chattip font-size .75rem color var(--text-p3) margin auto width fit-content margin-bottom 1em .chatcell margin 0 .5em margin-bottom 1em .user-avatar float left img width 32px height 32px border-radius 50% .user-main padding 0 .5em display flex flex-flow column .header line-height 1.5 font-size 13px margin-bottom .5em overflow hidden position relative display flex flex-wrap wrap align-items center .label padding 0 2px color var(--theme-color) background var(--theme-color-opa) border-radius 2px margin-right 4px font-size calc(.75rem - .1rem) font-weight 600 .name color var(--text-p3) font-size .75rem .talk width fit-content max-width calc(100% - 32px) background var(--chat-block) padding calc((32px - 1.3 * .875rem)/ 2) .5em border-radius 6px p font-size .875rem line-height 1.3 margin 0 .error-img-to-show min-width 100px min-height 100px .link .link-card background var(--chat-block) box-shadow unset transition unset -webkit-transition unset -moz-transition unset -o-transition unset :hover transform none color var(--text-p3) .top margin .5em max-width unset span white-space unset font-size .875rem .center margin 0 .5em column-gap .5em display flex align-self unset .left width calc(100% - 32px - .5em) height 32px .desc -webkit-line-clamp 2 .right flex 1 .bottom margin .5em .5em .3em .5em padding-top .3em border-top 1px solid var(--chat-border) display flex align-items center .voice display flex align-items center justify-content left padding 4.5px .5em cursor pointer .voice-btns flex-shrink 0 svg .icon width 1.3em height 1.3em path fill var(--text-p1) canvas .voice-wave margin 0 .5em div .voice-wave height 1.2em margin 0 .5em display flex justify-content center align-items center position relative .play-line position absolute top -20% left 0 height 140% width 1px background var(--text-p2) content opacity 0 .active opacity 1 .back transition transform .3s linear!important -moz-transition transform .3s linear!important -webkit-transition transform .3s linear!important -o-transition transform .3s linear!important span .voice-wave-item background var(--text-p2) width 2px border-radius 2px flex-shrink 0 .voice-metas font-size .875rem display flex flex-shrink 0 span line-height 1 .video position relative line-height 0 .video-btns position absolute top 0 left 0 width 100% height 100% svg .icon width 3em height 3em path fill var(--chat-video-button) video width 100% border-radius 6px .file background 0 0!important display flex padding unset!important column-gap .3rem width calc(100% - 32px) cursor pointer .content background var(--chat-block) padding .5em border-radius 6px flex-grow 1 .top display flex align-items center column-gap .5rem .left height 2.5rem flex-grow 1 span white-space unset font-size .875rem font-weight 500 color var(--text-p1) overflow hidden text-overflow ellipsis max-width 100% display -webkit-box -webkit-box-orient vertical -webkit-line-clamp 2 line-height calc(2.5rem / 2) .right height fit-content svg .icon height 2.5rem width unset .bottom margin-top .5em display flex span line-height .75rem .download-btn display flex align-items flex-end svg .icon height 1rem width 1rem padding .2em border-radius 50% background var(--chat-block) path fill var(--text-p1) .right .user-avatar float right .user-main flex-flow row-reverse flex-wrap wrap .header flex-basis 100% justify-content flex-end .talk .file flex-direction row-reverse .bottom z-index 1 padding-bottom .5em background var(--chat-bg) box-shadow rgba(0,0,0,.06) 0 1px 1px 0 inset .input display flex align-items center justify-content space-between margin 0 .5em margin-top .5em height 32px .input-text background var(--chat-block) border-radius 6px width calc(100% - 40px - .5em) height 100% .submit-btn padding 3px 6px background var(--theme-color-opa) border-radius 6px font-size .875rem color var(--theme-color) .icons margin 0 .5em display flex justify-content space-between margin-top .5em svg .icon width 1.5em height 1.5em .voice width 1.3em!important height 1.3em!important path fill var(--text-p2) .person .content .chatcell .user-main min-height 32px justify-content center align-content unset .header display none .right .user-main justify-content unset align-content center .wechat .iphone11 background var(--chat-bg) .bottom padding-bottom .75rem .navbar background var(--chat-bg) box-shadow rgba(27,31,35,.02) 0 1px 0 .left-items .news-num background var(--chat-news-num) .content .chatcell .user-avatar img border-radius 4px .user-main .header line-height 1 margin-bottom .2em .label display none .talk position relative border-radius 4px :before content position absolute left -2.5px top 11px width 10px height 10px border-radius 1.5px transform rotate(-45deg) background var(--chat-block) .file .download-btn display none .right .user-main .header display none .talk :before right -2px left unset .bottom display flex align-items center justify-content space-between padding .5em column-gap .5em .input-text border-radius 4px flex-grow 1 height 2rem background var(--chat-block) .icon height 1.5rem width 1.5rem path fill var(--text-p2).md-text .tag-plugin.chat.iphone11.status-bar.right-itemssvg.icon.bluetooth,.md-text .tag-plugin.chat.iphone11.status-bar.right-itemssvg.icon.earphone display none.md-text .tag-plugin.chat.iphone11.content,.md-text .tag-plugin.chat.iphone11.navbar margin 0 .4em.md-text .tag-plugin.chat.navbar .left-items.back-btn,.md-text .tag-plugin.chat.navbar .right-items.more-btn display flex align-items center.md-text .tag-plugin.chat.navbar .left-items.back-btnsvgpath,.md-text .tag-plugin.chat.navbar .right-items.more-btnsvgpath fill var(--text-p1).md-text .tag-plugin.chat.content .chatcell .user-main .talk.emoji,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.file,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.image,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.link,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.video background unset!important padding 0!important.md-text .tag-plugin.chat.content .chatcell .user-main .talk.link .link-card .bottomspan,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.link .link-card .bottomsvg height .8rem.md-text .tag-plugin.chat.content .chatcell .user-main .talk.video .video-btns .pause-btn,.md-text .tag-plugin.chat.content .chatcell .user-main .talk.video .video-btns .play-btn align-items center justify-content center width 100% height 100%.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.emoji:before,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.image:before,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.video:before display none.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.emojiimg,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.file.content,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.imageimg,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.link.link-card,.md-text .tag-plugin.chat.wechat.content.chatcell.user-main.talk.videovideo border-radius 4px.md-text .tag-plugin.chat.wechat.content.chatcell.right.user-main.talk.md,.md-text .tag-plugin.chat.wechat.content.chatcell.right.user-main.talk.md:before,.md-text .tag-plugin.chat.wechat.content.chatcell.right.user-main.talk.voice,.md-text .tag-plugin.chat.wechat.content.chatcell.right.user-main.talk.voice:before background var(--chat-wechat-green) 修改 config.js修改themes/stellar/scripts/events/lib/config.js，插入一段users的配置，之后一定要新建_data/users.yml文件，否则会报错 config.js/** * 部分代码借鉴自 NexT: * https://github.com/next-theme/hexo-theme-next/blob/master/scripts/events/lib/config.js * Volantis: * https://github.com/volantis-x/hexo-theme-volantis/blob/master/scripts/events/lib/cdn.js */use strict;const path = require(path);module.exports = (ctx) = const cache, language_switcher = ctx.theme.config; const warning = function (...args) ctx.log.warn( `Since $args[0] is turned on, the $args[1] is disabled to avoid potential hazards.` ); ; if (cache cache.enable language_switcher) warning(language_switcher, caching); cache.enable = false; if (cache cache.enable ctx.config.relative_link) warning(caching, `relative_link` option in Hexo `_config.yml`); ctx.config.relative_link = false; // ctx.config.meta_generator = false; // merge data const data = ctx.locals.get(data); // merge widgets: 可覆盖删除的合并 var widgets = ctx.render.renderSync( path: path.join(ctx.theme_dir, _data/widgets.yml), engine: yaml, ); if (data.widgets) for (let i of Object.keys(data.widgets)) let widget = data.widgets[i]; if (widget == null || widget.length == 0) // delete delete widgets[i]; else // create if (widgets[i] == null) widgets[i] = widget; else // merge for (let j of Object.keys(widget)) widgets[i][j] = widget[j]; ctx.theme.config.widgets = widgets; var users = ctx.render.renderSync( path: path.join(ctx.source_dir, _data/users.yml), engine: yaml, ); if (data.users) for (let i of Object.keys(data.users)) let user = data.users[i]; if (user == null || user.length == 0) // delete delete users[i]; else // create if (users[i] == null) users[i] = user; else // merge for (let j of Object.keys(users)) users[i][j] = user[j]; ctx.theme.config.users = users; // merge icons: 简单覆盖合并 var icons = ctx.render.renderSync( path: path.join(ctx.theme_dir, _data/icons.yml), engine: yaml, ); if (data.icons) icons = Object.assign(, icons, data.icons); ctx.theme.config.icons = icons; // default menu if (ctx.theme.config.menubar == undefined) ctx.theme.config.menubar = ; ; 添加 users.yml新增source/_data/users.yml users.ymluser1: name: 浩瀚星河 avatar: https://haohanxinghe.com/assets/images/avatar.jpg label: text: 群主user2: name: zjj avatar: https://image.codepzj.cn/image/202411102156995.png label: text: 闲鱼 感谢他们提供的思路，如果尚不清楚可以去主题日志查看"},{"title":"学者网用户关系的可视化与六度关系理论的探索","path":"//posts/25.html","content":"前言“六度关系理论”是由社交网络的奠基人斯坦利·米尔格拉姆提出的一个假设，认为地球上任意两个人之间通过不超过六个中介就可以建立联系。这一理论在各类社交网络中得到了广泛的验证，本实验旨在通过对学者网用户关系数据的分析，探讨学者网中是否存在类似的现象 实验内容数据可视化：基于学者网用户的社交关系（如关注、被关注、团队成员关系、同学关系等）及用户属性数据，对学者网的社交网络进行可视化展示。六度关系理论分析：分析学者网用户网络中是否存在类似“六度关系理论”的现象，即通过少数几步，任何两个人都能建立联系。 激烈讨论21:16 3和朋友讨论栈主克喵爱吃卤面你现在思路是什么闲鱼zjj就是我想着那个 neo4j 的如果点太多就搞一个静态图，把那些人的关系搞出来，然后去画一个热力图，根据他们之间的联系，有在一起和没在一起搞个热力图，然后看几个人之间有没有连在一起证明他有那个六度关系理论，我觉得有一点，就是不一定非要抽取六个人去证明吧闲鱼zjj然后通过他的人数据证明六度关系吧 内容太多暂时写不完，有时间再补充~~~"},{"title":"neo4j图数据库基本语法","path":"//posts/24.html","content":"neo4j 是什么neo4j 是一种图数据库，属于非关系型数据库（nosql），常用于表示复杂的网络关系，知识图谱等等。 neo4j 的增删改查增加节点create(n:Personname:pzj) 增加关系create(n:Personname:贾宝玉)-[:表妹]-(m:Personname:林黛玉) 修改节点属性match (n:Person) where n.name=张三 set n.type=乐队 return n 查询节点match(n:Person) where n.name=张三 return n 删除节点match(n:Person) where n.name=张三 delete n 删除节点特定属性match(n)where n.name=张三 remove n.type return n 删除节点及关系match (n:Person)-[r]-() where n.name=张三 delete n,r 删除所有节点及关系match (n) optional match (n)-[r]-() delete n,r"},{"title":"git基础命令","path":"//posts/23.html","content":"本教程会介绍一些 git 的基本命令，包括版本控制、提交、回退、合并等。 添加到暂存区git add . # 添加所有文件git add file # 添加指定文件 停止追踪某个文件适用于文件已经 add 处于暂存区，但是在 gitignore 中排除的情况，就需要使用这个命令。 git rm --cached newfile 提交到本地仓库git commit -m commit message 查看提交记录git log --oneline --graph --all 查看当前分支git branch 添加远程分支git remote add origin url # https 和 ssh 均可git remote -v # 查看远程仓库 提交到远程仓库git push origin branch:remote-branch 第一个 branch 指的是本地分支，第二个 branch 指的是远程分支。 拉取远程仓库git pull origin remote-branch:branch 同理，第一个 branch 指的是远程分支，第二个 branch 指的是本地分支。 合并分支git merge branch git merge 的前提 false 当前处于 main 分支，现在需求是将最新的 dev 分支合并，合并的前提是 dev 与 main 分支的均来源于同一个祖先节点。 [*] | [origin] / \\ [dev] [main] | |[commit1] | | |[commit2] | | | [merge] ----|"},{"title":"Follow认证订阅源","path":"//posts/22.html","content":"Follow 是什么Follow 是一款订阅源，可以订阅各种源，例如：Github，博客，小红书，豆瓣，知乎等，甚至还可以订阅 Follow 用户，以及用户分享的订阅列表。万物皆可订阅，感觉很酷。 Follow 是什么？它不止是 RSS 阅读器，但万物皆可订阅 Follow 功能 支持订阅各种源，例如：Github，博客，小红书，豆瓣，知乎等。 支持订阅用户，例如：Follow 用户，用户分享的订阅列表。 运用了区块链技术，用户可在 Follow 中完成任务，获取虚拟代币，可用于打赏，生成邀请码，购买订阅列表等等 我决定在这篇文章中嵌入 Follow 的订阅源认证。 This message is used to verify that this feed (feedId:74692849261056000) belongs to me (userId:74684007892567040). Join me in enjoying the next generation information browser https://follow.is."},{"title":"qexo管理hexo文章","path":"//posts/21.html","content":"前言Qexo 是一个快速、强大、美观的在线静态博客编辑器，使用的 Django 和 Bootstrap 框架开发，使用 GPL3.0 开源协议，支持Vercel 部署和本地部署。 今天我们使用 docker 来部署 Qexo 来搭建 hexo 博客的后台。如果您需要使用 vercel 部署或者本地部署，可参阅官方文档。 官方文档中，使用本地部署（服务器部署）的方案，其实是开发环境下的。 pip3 install -r requirements.txtpython3 manage.py makemigrationspython3 manage.py migratepython3 manage.py runserver 0.0.0.0:8000 --noreload 假如说服务器宕机了，那么这个进程就会停止了，再次重启服务器，这个管理后台就打不开了，因为这个进程已经被杀死了。通过查阅 Django 官方文档，使用的是 WSGI 与 Nginx 服务器的方式部署，我觉得操作起来非常麻烦，WSGI 设置为开机自启才能保证网站在服务器重启之后自动运行。最后，我选择了使用 Docker 部署 Qexo。 快速开始mkdir /www/qexo -pcd /www/qexomkdir buildcd build 新建一个 qexo文件夹，用于存放 qexo 的应用程序以及构建镜像所需的配置文件（build 文件夹），先进入 build 文件夹，新增三个文件，分别是 Dockerfile，configs.py，run.sh DockerfileFROM python:3.11.3-alpine# 维护者信息LABEL maintainer=codepzj# 设置生产模式环境变量# ENV APP_ENV production# pipy源设置RUN pip config set global.index-url https://mirrors.cloud.tencent.com/pypi/simple/# 设置时区RUN sed -i s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g /etc/apk/repositories \\ apk --no-cache add tzdata \\ cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ apk --no-cache del tzdata \\ apk --no-cache add git \\ mkdir /app# 设置工作目录WORKDIR /app# 拷贝数据RUN git clone -b dev https://github.com/Qexo/Qexo.git .# 安装依赖RUN pip install --upgrade pipRUN pip install -r requirements.txt# 拷贝启动脚本COPY . /app/RUN chmod +x /app/run.sh# 暴露端口EXPOSE 8000# 挂载目录VOLUME [/app/db, /app/data]# 启动djangoENTRYPOINT [/bin/sh, /app/run.sh] configs.pyimport pymysqlimport osDOMAINS = *DATABASES = default: ENGINE: django.db.backends.sqlite3, NAME: os.path.join(/app/db, db.sqlite3), 我们这里使用 Sqlite数据库进行部署，这是一个文件数据库，主要是方便，这只是一个管理后台，并不需要过多的请求，所以直接使用文件数据库即可。 run.sh#!/bin/bashpython3 manage.py makemigrationspython3 manage.py migratepython3 manage.py runserver 0.0.0.0:8000 --noreload 打包镜像docker build -t qexo . 使用这条命令打包 qexo 镜像，同时我把镜像上传到了 github，直接使用即可，不需要担心任何问题，有需要的自取。 qexo镜像https://hub.docker.com/repository/docker/codepzj/qexo/tags docker-compose.yaml 启动 qexo 容器在 www/qexo下新建一个 docker-compose.yaml文件 version: 3.9services: qexo: image: codepzj/qexo:1.0 volumes: - ./data/blog:/app/data - ./data/qexo/db:/app/db - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro ports: - 8000:8000 container_name: qexo 在 www/qexo目录下执行 docker-compose up -d即可运行 qexo 容器 服务器的话可以使用 ip 地址+端口号进行访问，也可以通过 Nginx 反代使用域名访问 Qexo 管理后台。 效果预览 本地部署2024/12/16更新因为有小伙伴私信我，问这个本地该如何部署，很简单，直接按照这个视频做即可，qexo 本地部署教学视频，每次操作完就会在挂载目录生成新的文章，不过需要在服务器本地通过 pnpm run build 重新生成静态文件，放置到 nginx 对应的网站目录当中。"},{"title":"1panel部署yourls短链接服务","path":"//posts/20.html","content":"今天给大家分享一下如何在 1panel 上部署 yourls 短链接服务。 安装 yourls 服务首先，部署 yourls 需要 mysql 数据库，安装好后直接安装 yourls 即可。 配置yourls 然后安装完成以后，大概长这个样子 yourls初始界面 使用 Sleeky 主题原装主题界面太丑了，建议使用 Sleeky 主题，安装方法如下： Sleeky主题https://github.com/Flynntes/Sleeky 前台：sleeky-frontend 下的文件夹下的所有文件上传到 yourls 的根目录下 后台：sleeky-backend 文件夹直接上传到根目录下的 userplugins下，在后台激活即可 遇到的 bug前端css样式丢失 解决方法：在 yourls 根目录下的.htaccess 文件中添加以下内容 在前端主题 frontend header.php 15 行的位置下删除 ?php echo $YOURLS_SITE ?即可 效果预览图前台效果预览图 后台效果预览图"},{"title":"国内云服务器厂商的价格与性价比调研","path":"//posts/19.html","content":"首先，我们需要明确一点，云服务器的性价比是一个相对的概念，不同的用户对于性价比的定义是不同的，有的用户认为性价比高的云服务器是价格低廉，有的用户认为性价比高的云服务器是性能强大，有的用户认为性价比高的云服务器是服务质量好。所以，我们在调研云服务器的价格与性价比时，需要根据自己的需求来选择适合自己的云服务器。 我选择了三种云服务器厂商的价格调研，分别是阿里云、腾讯云和华为云。我选择了这三家云服务器厂商，是因为这三家云服务器厂商是国内最大的云服务器厂商，市场份额最大，用户最多，服务最全面，价格最有竞争力。所以，我选择了这三家云服务器厂商进行价格调研。 阿里云99 元1 年，2 核 2G3M 带宽，这个是与服务器是云服务器，不是 VPS，所以价格比较高，但是阿里云服务器比较稳定，不会出现宕机的情况，所以价格比较高。轻量应用服务器 82 元1 年，2 核 2G3M 带宽，这个是 VPS，价格比较低，但是稳定性不如云服务器。 腾讯云79 元1 年，2 核 2G4M 带宽，腾讯云价格实惠，带宽很快，实际带宽真的高，用户体验好，但是稳定性比阿里云略差，偶尔会出现宕机的情况。 华为云28 元1 年，2 核 2G2M 带宽，华为云价格最低，但是稳定性不如阿里云和腾讯云，经常会出现 CPU 飙升导致宕机的情况，但是在价格方面性价比最高，但是稳定性偏差，适合小型网站使用。我分析的是云闪耀 X 实例，不过如果买价格稍微贵一点的话，购买云闪耀 L 实例，在同等价格下性价比会比其他厂家更好。 国内从这三家购买服务器，通常要在同一个服务厂商购买域名。假如要购买域名的话，华为云是最不推荐的，因为华为云的域名使用 Certbot 申请 Let’s Encrypt 证书会不成功，因为不太支持 ACME 协议，同理，华为云的 OBS 也不推荐，因为很多备份的 S3 服务都不支持华为云的 OBS。而阿里云和腾讯云都是支持的。OSS 和 COS 的知名度都是比 OBS 高的。 综上所述，阿里云的价格最高，但是稳定性最好，适合大型网站使用；腾讯云的价格适中，带宽高，适合中小型网站使用；华为云的价格最低，性价比最高，但是稳定性偏差，适合小型网站使用。所以，根据自己的需求来选择适合自己的云服务器。"},{"title":"又掌握了一门新技能-剪辑","path":"//posts/18.html","content":"不怕别人笑话，现在大三了，我都不会剪辑。最近要交公选课作业，题目是制作一部微电影，只能被迫营业了。作为一名计算机学生，我最烦的就是运用类似 Word，PDF，Excel 等办公软件了，因为对于我来说十分不熟练（主要是用惯了 markdown），使用效率非常低下。今天我又接触到了剪辑，体验效果比这些办公软件还差，主要是很折腾，每一帧都要加文本，还要调节画面背景，润色，加 bgm，去水印，去音频等等，反正就是很折磨。 这个是小组作业，然后三个牢玩家齐聚一堂，绞尽脑汁地思考，经过一番激烈的讨论，我们决定制作一个敦煌九色鹿的微电影脚本。然后我就被分配到了去字幕，去水印，加字幕，拼接视频的任务。 一开始，我想先去水印，和剪映比对了一下，假如说去水印，每一帧都加蒙版的话非常麻烦，所以我决定使用一些代码工具去水印，然后我在 github 上找了一个源仓库，配环境花了半天，直到我发现需要下载Conda（一个 Python 的包管理工具），借助Conda创建虚拟环境，下载Pytorch库，加上一些GPU渲染的一些库，加起来都快 3G 了，配置了镜像源，也是龟速下载，然后就放弃了。我懊恼不已，决定另辟蹊径，直接使用网上的在线工具去水印和音频，但是去除效果有点瑕疵，就是有一些画面的 logo 时隐时现的，有暴露的风险，不过先不管这么多了。 剩下需要加字幕，我没有剪映客户端，于是我选择了在浏览器上使用在线剪辑工具，精挑细选之下，选择了腾讯智影，这款工具，对于我这种小白来说，界面十分友好，功能繁多，我这种没剪辑过的都能快速上手，然后我通过他的字幕编辑功能，一帧帧给视频添加字幕，这个过程非常折磨，添加的文字非常多，跟吃了奥利给一样，浪费我两个半小时功夫才把字幕加好。 腾讯智影https://zenvideo.qq.com/ 然后剩下的活交给队友处理了，我直接静观其变，真是折磨的一天，虽然我初入剪辑，学习了一些粗浅皮毛，但是我丝毫高兴不起来，过程非常折磨，总是做一些很无聊，重复性的工作，也许是我没有兴趣，还是说剪辑就是很麻烦，很佩服那些短视频那些博主，也许我们在看视频的过程中很爽，但是别人在做视频的过程的这种毅力我们是无法直接看到的 🤡"},{"title":"论学习方法","path":"//posts/17.html","content":"学习不应该是沉重的负担，而是愉悦的冒险 仪式感在开始学习之前，进行一些带有仪式感的活动，可以帮助你调整心态，专注于接下来的任务。以下是一些建议，你可以选择性地采纳： 泡一杯咖啡 把手机放到远处充电，并调整为勿扰模式 清理桌面（无论是现实中的还是屏幕上的） 关上书房的门 听一首轻音乐让自己安静下来（准备好学习时应关掉它） 打开空调，让房间处于一个舒适的温度 伸伸懒腰 调整座椅，使之舒适 你也可以创造适合自己学习的仪式，确保一个原则：简单有用。 定目标为今天的学习定一个目标，切记以下要点： 易实现 设定容易实现的目标，不要好高骛远。一个难以实现的目标只会带来挫败感。 如果发现目标过于困难，调整目标，而不是自我怀疑。 随时调整 根据情况随时调整目标。如果完成目标只用了 1 个小时，可以追加目标；如果目标很难完成，及时调整。 记住：学习是一场长跑，比的是持久力，而不是冲刺。 专注在学习之前，利用零碎的时间准备好一切学习材料，确保学习时间不被打断： 关掉弹出广告，保持电脑的干净。 关闭社交软件，避免干扰。 保持全神贯注，把学习当作生命的全部。 总结每天学习完之后，进行总结。你可以选择以下方式之一： 散步，在心里复述今天学习到的核心内容。 对着物品（如小黄鸭）说出今天学到的内容。 写总结，详细记录今天的学习成果。写作可以帮助你磨平急躁的心态。 利用零碎时间生活中有很多零碎的时间，可以用来： 看几道面试题 读一篇博客 准备学习工具和课件 制定学习目标 回忆之前学习的重要内容 当然，你也可以选择： 玩一局游戏 刷抖音 和朋友聊天 学做一道菜 任何其他娱乐活动也可以适当进行，保持生活的平衡。"},{"title":"js动态执行","path":"//posts/16.html","content":"js 动态执行，传入字符串，执行字符串中的代码 eval可以去除字符串中的引号，执行代码是同步的，使用的局部变量setTimeout第一个参数可以传入字符串，会被当作代码来执行，是异步的，使用的全局变量 index.html script src=app.js/scriptapp.js let a = 1;function exec1(code) var a = 2; eval(code);function exec2(code) setTimeout(code);exec1(console.log(a););exec2(console.log(a););console.log(sync);结果 2 sync 1"},{"title":"particles库实现粒子效果","path":"//posts/15.html","content":"今天分享一个粒子动画效果的库 – particles.js 实现源码： index.html index.html!DOCTYPE htmlhtml lang=en head meta charset=UTF-8 / meta name=viewport content=width=device-width, initial-scale=1.0 / titleparticles demo/title link rel=stylesheet href=main.css / /head body div id=particles-js/div /body/htmlscript type=text/javascript src=particles.js/scriptscript type=text/javascript src=app.js/scriptmain.css main.css* margin: 0; padding: 0;#particles-js position: absolute; width: 100%; height: 100%; background-color: #b61924; background-repeat: no-repeat; background-size: cover; background-position: 50% 50%;app.js app.js/* particlesJS.load(@dom-id, @path-json, @callback (optional)); */particlesJS.load(particles-js, particles.json);particles.json particles.json particles: number: value: 80, density: enable: true, value_area: 800 , color: value: #ffffff , shape: type: circle, stroke: width: 0, color: #000000 , polygon: nb_sides: 5 , image: src: img/github.svg, width: 100, height: 100 , opacity: value: 0.5, random: false, anim: enable: false, speed: 1, opacity_min: 0.1, sync: false , size: value: 10, random: true, anim: enable: false, speed: 80, size_min: 0.1, sync: false , line_linked: enable: true, distance: 300, color: #ffffff, opacity: 0.4, width: 2 , move: enable: true, speed: 12, direction: none, random: false, straight: false, out_mode: out, bounce: false, attract: enable: false, rotateX: 600, rotateY: 1200 , interactivity: detect_on: canvas, events: onhover: enable: false, mode: repulse , onclick: enable: true, mode: push , resize: true , modes: grab: distance: 800, line_linked: opacity: 1 , bubble: distance: 800, size: 80, duration: 2, opacity: 0.8, speed: 3 , repulse: distance: 400, duration: 0.4 , push: particles_nb: 4 , remove: particles_nb: 2 , retina_detect: true 实现效果和codepen 的 demo效果类似"},{"title":"js中的值传递和引用传递","path":"//posts/14.html","content":"前言js 中的值传递和引用传递是一个很重要的概念，也是很多面试题的考察点，本文将详细介绍 js 中的值传递和引用传递的区别，以及如何在实际开发中使用这两种传递方式。这个概念很简单，但是实际开发中很多人都容易混淆。 值传递值传递指的是重新开辟一块内存空间，将旧变量值复制到新的内存空间中，新变量和旧变量就互不影响了。在 js 中，基本数据类型（number、string、boolean、null、undefined、symbol）都是值传递。 let a = 1;let b = a;b = 2;console.log(a); // 1console.log(b); // 2 引用传递指的是新变量的内存地址指向旧变量的内存地址，它们共享同一块内存空间，修改其中一个变量的值，另一个变量的值也会发生变化。在 js 中，引用数据类型（object、array、function）都是引用传递。 let a = name: 张三 ;let b = a;b.name = 李四;console.log(a, b); // name: 李四 , name: 李四 a.name = 王五;console.log(a, b); // name: 王五 , name: 王五 练习题题目1 module.jsmain.jsmodule.jsexport let a = 1;export function increase() a++;main.jsimport a, increase from ./module.js;console.log(a);increase();console.log(a);答案具名导入的变量都是引用传递，所以 a 的值会发生变化。结果1 2题目2 main.jsconst testFunc = () = let a = 1; let obj = name: pzj ; let changeVars = () = a++; obj.name = codepzj; ; return a, obj, changeVars, ;;const a, obj, changeVars = testFunc();console.log(a, obj);changeVars();console.log(a, obj);答案a 是基本数据类型，所以是值传递，obj 是引用数据类型，所以是引用传递。结果1 name: pzj 1 name: codepzj 总结基本数据类型（number、string、boolean、null、undefined、symbol）是值传递，引用数据类型（object、array、function）是引用传递。具名导入的变量都是引用传递。"},{"title":"博客真的需要魔改吗","path":"//posts/13.html","content":"博客真的需要魔改吗？很多人一开始都是贪新鲜感，为了让自己的博客更丰富、更吸引人，就会不断地去寻找各种插件、主题，甚至自己动手去修改博客的代码。但是，这样真的有必要吗？ 真正的简约远不止删繁就简，而是在纷繁中建立秩序博客的本质是记录，是分享，是交流，是沉淀。如果你的博客只是为了追求炫酷，那么你的博客就失去了本质。博客的本质是内容，而不是形式。人的注意力是有限的，要用有限的注意力去关注无限的内容，就需要有一个简洁的界面，让用户能够专注于内容本身，而不是被花里胡哨的界面所吸引。比如说一些卡通图像、五颜六色的组件、眼花缭乱的动画等等，这些东西都会让用户的注意力分散，让用户无法专注于内容本身。 降低视觉密度如果你的博客的界面太过于复杂，用户会觉得很累，不愿意继续阅读下去。所以，一个简洁的界面是非常重要的。比如说，你可以使用一些简洁的字体、简洁的颜色、简洁的布局等等，让用户能够更加专注于内容本身。 提高有效信息优先级标题永远是最重要的。用户在阅读博客的时候，首先会看标题，然后再决定是否继续阅读。所以，标题是非常重要的。不可交互的不重要的小标题（如侧边栏某个插件的标题），应该降低对比度。让用户专注更高优先级的标题、内容，而不是留意侧边栏不重要的信息。 删掉无效信息非常多的博客喜欢往自己的博客添加通讯电波、音乐播放器、彩蛋甚至是广告，这些东西都会让用户的注意力分散。所以应该把这些无效内容删除，让用户能够更加专注于内容本身，不被无关的东西所干扰。"},{"title":"hexo博客接入免费GPT","path":"//posts/12.html","content":"一直想要在 hexo 博客中接入 GPT，以此生成文章摘要，结果 bing 搜索发现这些 gpt 接入服务都需要付费，比如很多站点都在使用的 TianLiGPT TianLiGPThttps://docs_s.tianli0.top/ 明码标价写着PostChat 会员享无限摘要额度，18 元月，128 元年 但是这对于我来说，实在是太贵了，128 块钱我都能每年租一台配置为 2 核 2G4M 带宽的服务器了 所以重点来了，我决定用 TianLiGPT 的模板，重写这个 gpt 接口，实现 gpt 生成文章摘要自由！ 第一步、修改主题配置文件首先，来到主题配置文件：_config.stellar.yml 直接在最后插入以下代码: plugins: _config.stellar.yml ... tianli_gpt: enable: true js: /js/chatgpt.js field: post interface: name: 文章摘要 introduce: 我是文章辅助AI，点击下方的按钮，让我生成本文简介 version: OpenAI button: [介绍自己, 生成摘要] 第二步、注入自定义 GPT 的 js 文件然后在themes/stellar/source/js下新建chatgpt.js文件，写入 function ChucklePostAI(config) // 获取要插入 AI 的文章容器 function getArticleContainer() let container = null; if (!config.auto_mount config.el) container = document.querySelector( config.el || #post #article-container ); return container || findLargestContentElement(); // 计算一个元素的子元素的数量 function countChildElements(element) let count = 1; Array.from(element.children).forEach((child) = count += countChildElements(child); ); return count; // 检查一个元素是否应被排除（如 iframe、footer 等） function shouldExcludeElement(element) const tagBlacklist = [IFRAME, FOOTER, HEADER, BLOCKQUOTE]; const classBlacklist = [aplayer, comment]; return ( tagBlacklist.includes(element.tagName) || Array.from(element.classList).some((className) = classBlacklist.some((cls) = className.includes(cls)) ) ); // 查找内容最多的 DOM 元素 function findLargestContentElement() const rootElement = findRootElement(); return findLargestElementInTree(rootElement); // 查找内容最多的根元素 function findRootElement() const elementsToCheck = [document.body]; let rootElement = null; let maxCount = 0; while (elementsToCheck.length 0) const element = elementsToCheck.shift(); if (shouldExcludeElement(element)) continue; const childCount = countChildElements(element); if (childCount maxCount) maxCount = childCount; rootElement = element; Array.from(element.children).forEach((child) = elementsToCheck.push(child); ); return rootElement; // 查找最大的 DOM 元素 function findLargestElementInTree(rootElement) const weightMap = H1: 1.5, H2: 1, H3: 0.5, P: 1 ; let maxWeight = 0; let largestElement = null; function calculateWeight(element) if (shouldExcludeElement(element)) return; let elementWeight = Array.from(element.children).reduce( (weight, child) = return weight + (weightMap[child.tagName] || 0); , 0 ); if (elementWeight maxWeight) maxWeight = elementWeight; largestElement = element; Array.from(element.children).forEach(calculateWeight); calculateWeight(rootElement); return largestElement; // 创建并插入 AI 的 UI 元素 function createAIElement() const aiContainer = document.createElement(div); aiContainer.className = post-ai; aiContainer.id = post-ai; aiContainer.style.cssText = ` margin: 30px 0; `; const aiInterface = name: 文章辅助AI, introduce: 我是文章辅助AI，点击下方的按钮，让我生成本文简介, version: gpt-3.5-turbo-16k, buttons: [介绍自己, 生成摘要], ...config.interface, ; aiContainer.innerHTML = ` div class=ai-title div class=ai-title-text$aiInterface.name/div div class=ai-Toggle切换简介/div div class=ai-speech-box div class=ai-speech-content/div /div div class=ai-tag$aiInterface.version/div /div div class=ai-explanation$aiInterface.name初始化中.../div div class=ai-btn-box $aiInterface.buttons .map((btn) = `div class=ai-btn-item$btn/div`) .join() /div `; bindButtonEvents(aiContainer); const articleContainer = getArticleContainer(); if (articleContainer) articleContainer.insertBefore(aiContainer, articleContainer.firstChild); disableButtons(aiContainer); // 禁用按钮 generateSummary(aiContainer); // 初始化时生成文章摘要 // 绑定按钮事件 function bindButtonEvents(aiContainer) const generateIntroductionButton = aiContainer.querySelector( .ai-btn-item:first-child ); const generateSummaryButton = aiContainer.querySelector( .ai-btn-item:last-child ); generateIntroductionButton.addEventListener(click, () = disableButtons(aiContainer); // 禁用按钮 displaySummary( 我是文章辅助AI，使用的OpenAI的GPT-3.5-turbo-16k模型。点击下方的按钮，让我生成本文简介。, aiContainer ); ); generateSummaryButton.addEventListener(click, () = disableButtons(aiContainer); // 禁用按钮 generateSummary(aiContainer); // 将 aiContainer 传递给 generateSummary ); // 禁用所有按钮 function disableButtons(aiContainer) const buttons = aiContainer.querySelectorAll(.ai-btn-item); buttons.forEach((button) = button.disabled = true; button.style.pointerEvents = none; // 禁用点击事件 button.style.opacity = 0.5; // 调整按钮的透明度 ); // 启用所有按钮 function enableButtons(aiContainer) const buttons = aiContainer.querySelectorAll(.ai-btn-item); buttons.forEach((button) = button.disabled = false; button.style.pointerEvents = auto; // 允许点击事件 button.style.opacity = 1; // 恢复按钮的透明度 ); // 生成文章摘要 async function generateSummary(aiContainer) const content = getArticleContent(); const apiKey = sk-xxxxxx; // 请替换为你的实际 API KEY const requestBody = model: gpt-3.5-turbo-16k, messages: [ role: system, content: 请为下面的内容生成摘要，以本文讲述了开头，不要出现任何与文章无关的内容。, , role: user, content: content , ], temperature: 0, ; try const response = await fetch(https://free.gpt.ge/v1/chat/completions, method: POST, headers: Content-Type: application/json, Authorization: `Bearer $apiKey`, , body: JSON.stringify(requestBody), ); if (!response.ok) throw new Error(网络响应不是 OK); const data = await response.json(); displaySummary(data.choices[0].message.content, aiContainer); console.log(摘要生成成功:, data.choices[0].message.content); catch (error) console.error(请求失败:, error); // 获取文章内容 function getArticleContent() const articleContainer = getArticleContainer(); return articleContainer ? articleContainer.innerText : ; // 获取文章的文本内容 // 显示生成的摘要（添加打字机效果） function displaySummary(summary, aiContainer) const aiSpeechContent = document.querySelector(.ai-explanation); if (aiSpeechContent) aiSpeechContent.innerText = ; // 清空之前的内容 typeWriterEffect(aiSpeechContent, summary, 15, aiContainer); // 逐字显示摘要 // 打字机效果 function typeWriterEffect(element, text, delay, aiContainer) let index = 0; function type() if (index text.length) element.innerText += text.charAt(index); index++; setTimeout(type, delay); else enableButtons(aiContainer); // 打字效果结束后启用按钮 type(); // 初始化函数 function initialize() createAIElement(); initialize(); 第三步、前往 GitHub 获取公益 ApiKeyFreeGPT公益ApiKeyhttps://free.gpt.ge/github 获取了 ApiKey 之后，请填入上方代码的 apiKey 当中，apiKey 请您妥善保管，如果弄丢了，请到该页面重新生成即可 然后现在你就可以愉快的白嫖文章摘要了，美滋滋"},{"title":"python爬取LearnKu","path":"//posts/11.html","content":"分享一个 python 脚本，可用于爬取 LearnKu 社区的优质文档，存储到本地，供己学习 import osimport timeimport requestsfrom lxml import etreeBASEDIR = rC:\\Users\\pzj\\Desktop\\go入门指南 # 保存地址base_url = https://learnku.com/docs/the-way-to-go # 文档基地址url = https://learnku.com/docs/the-way-to-go/book-intro/3560 # 侧边栏第一章节第一个子页面的url(如前言)content_length = 22 # 文章侧边栏目录的数量if __name__ == __main__: content = requests.get(url).text tree = etree.HTML(content) for i in range(3, 3 + content_length): # 获取标题 title = tree.xpath(/html/body/div[2]/div[%s]/div[1]/text() % i) title = title[0].strip() # 获取md链接 a_link = tree.xpath(/ html / body / div[2] / div[%s] / div[2] / a/@href % i) droptitle_list = list( map( lambda x: x.strip().split(.)[-1].strip(), tree.xpath(/html/body/div[2]/div[%s]/div[2]/a/div/text() % i), ) ) md_urls = list(map(lambda x: base_url + / + x.split(/)[-1] + .md, a_link)) # 保存文件 md_dir = os.path.join(BASEDIR, title) folder = os.path.exists(md_dir) if not folder: os.makedirs(md_dir) for j in range(len(md_urls)): md_text = requests.get(md_urls[j]).text md_file = os.path.join(md_dir, str(j + 1) + . + droptitle_list[j] + .md) with open(md_file, w, encoding=utf-8) as f: f.write(md_text) print(md_file + 爬取成功) time.sleep(0.5)"},{"title":"cloudflare解决cors跨域问题","path":"//posts/10.html","content":"本站使用的 cloudfare 的 cdn，今天在博客访问 memos 时出现了跨域，原因是使用 CloudFlare 会导致一部分跨域问题，使某些样式无法正常加载，不过最终还是找到了解决方案，记录一下。 解决方案前往 cloudfare 控制台，规则 转换规则 修改响应头 创建规则 往里面新增一条跨域的规则 Access-Control-Allow-Methods: GET, HEAD, POST, OPTIONSAccess-Control-Allow-Origin: * 允许所有的源发送跨域请求 然后等待半分钟，强制刷新浏览器，即可生效 打开控制台，检测是否生效 origin和methods加到了响应头处 配置成功，完美解决 cloudfare 的跨域问题"},{"title":"使用stellar标签和代码片段在vscode中高效编写博客","path":"//posts/9.html","content":"前言什么是代码片段代码片段（Code Snippets），指的是一些使用率很高的代码模板，用户可以通过‘文件 首选项 用户片段’来创建自定义代码片段。每个代码片段包含‘key’（输入标记）、‘prefix’（触发提示的前缀）和‘body’（代码主体）。通过输入‘prefix’并按Tab键，可以在文件中快速插入预设的代码结构。详细步骤和更多高级配置可以参考相关链接。 stellar 博客标签种类繁多，每一个标签书写起来都得查阅 stellar 官方文档，非常麻烦，所以我配置了一下 vscode 当中书写 markdown 的代码片段，节省书写博客中查阅 stellar 标签耗费的时间 快速开始在根目录新建一个.vscode文件夹 新建一个文件settings.json，往里面写入： settings.json的作用 vscode 当中 markdown 格式的文件是无法使用代码片段的，所以需要用户加入一些自定义片段，允许在 markdown 文件当中使用代码片段 [markdown]: editor.quickSuggestions: other: true, comments: false, strings: false 新建 hexo 博客代码片段，设置 用户代码片段 新建hexo文件夹的代码片段文件，将其命名为 markdown 然后往这个.vscode/markdown.code-snippets文件写入： Emoji Tag: prefix: emoji, body: [% emoji $1:source $2:name $3:height:1.75em %], description: Insert emoji tag , Icon Tag: prefix: icon, body: [% icon $1:icon-source %], description: Insert icon tag , Mark Tag: prefix: mark, body: [% mark $1:内容 $2:color:default %], description: Insert mark tag , Hashtag Tag: prefix: hashtag, body: [% hashtag $1:text $2:url $3:color:default %], description: Insert hashtag tag , Image Tag: prefix: image, body: [ % image $1:src $2:description $3:download:bool/string $4:width:px $5:padding:px % ], description: Insert image tag , Quot Tag: prefix: quot, body: [% quot $1:内容 %], description: Insert quot tag , Poetry Tag: prefix: poetry, body: [ % poetry $1:诗名 author:$2:作者 footer:$3:节选 % $4:诗内容 % endpoetry % ], description: Insert poetry tag , Paper Tag: prefix: paper, body: [ % paper style:$1:样式 title:$2:标题 author:$3:作者 date:$4:日期 footer:$5:节选 % $6:内容 % endpaper % ], description: Insert paper tag , Reel Tag: prefix: reel, body: [ % reel $1:作品 author:$2:作者 date:$3:日期 footer:$4:节选 % $5:内容 % endreel % ], description: Insert reel tag , Note Tag: prefix: note, body: [% note $1:title $2:内容 $3:color:yellow %], description: Insert note tag , Link Tag: prefix: link, body: [% link $1:href $2:title $3:icon:src %], description: Insert link tag , Button Tag: prefix: button, body: [ % button $1:text $2:url $3:icon:key/src $4:color:color $5:size:xs % ], description: Insert button tag , OKR Goal: prefix: okr, body: [ % okr $1:o1 %, $2:2024年的小目标：独立开发一个商城系统, 来自$3:2025年的复盘：已《基本》实现目标 % emoji blobcat blobcatflower %, !-- okr kr1 percent:$4:0.9 --, $5:学习vue3和golang的基本语法, - $6:element-plus的使用, - $7:gorm的使用, !-- okr kr2 percent:0 status:off_track --, $8:开发商城购物前台, !-- okr kr3 percent:0 status:unfinished --, $9:开发商城管理后台, !-- okr kr4 status:at_risk --, $10:开发、测试和发布, $11:大概率完不成了。。。, % endokr % ], description: Insert an OKR goal , Copy Command: prefix: copy, body: [% copy $1:command prefix:$ %], description: Insert a copy command , Radio Button: prefix: radio, body: [ % radio color:$1:red $2:未勾选的单选框 %, % radio checked:true color:$3:green $4:已勾选的单选框 % ], description: Insert radio button , Checkbox: prefix: checkbox, body: [ % checkbox $1:普通的没有勾选的复选框 %, % checkbox checked:true $2:普通的已勾选的复选框 %, % checkbox symbol:plus color:green checked:true $3:显示为加号的绿色的已勾选的复选框 %, % checkbox symbol:minus color:yellow checked:true $4:显示为减号的黄色的已勾选的复选框 %, % checkbox symbol:times color:red checked:true $5:显示为乘号的红色的已勾选的复选框 % ], description: Insert checkboxes , Audio Tag: prefix: audio, body: [% audio type:$1:2 netease:$2:1856385686 autoplay:$3:0 %], description: Insert audio tag , Video Tag: prefix: video, body: [ % video bilibili:$1:BV1BK411L7DJ width:$2:80% autoplay:$3:0 % ], description: Insert video tag , Navbar: prefix: navbar, body: [ % navbar active:$1:/wiki/ $2:[文章](/) $3:[项目](/wiki/) $4:[留言](#comments) $5:[GitHub](https://github.com/Kemeow815) % ], description: Insert a navigation bar , Frame: prefix: frame, body: [ % frame iphone11 img:$1:https://xaoxuu.com/assets/wiki/prohud/toast/demo-loading.png video:$2:https://xaoxuu.com/assets/wiki/prohud/toast/demo-loading.mp4 focus:$3:top % ], description: Insert device frame , Text Decoration: prefix: textdecoration, body: [ - 这是 % psw $1:密码 % 标签, - 这是 % u $2:下划线 % 标签, - 这是 % emp $3:着重号 % 标签, - 这是 % wavy $4:波浪线 % 标签, - 这是 % del $5:删除线 % 标签, - 这是 % sup $6:上角标 color:$7:red % 标签, - 这是 % sub $8:下角标 % 标签, - 这是 % kbd $9:键盘样式 % 标签，试一试：% kbd Ctrl % + % kbd S % ], description: Insert text decoration tags , Static Timeline: prefix: timeline, body: [ % timeline %, !-- node $1:2024 年 8 月 28 日 --, $2:逐渐熟悉 **Stellar** 标签的用法, !-- node $3:2024 年 8 月 18 日 --, $4:初步建站，使用的 hexo-theme-stellar 主题, % endtimeline % ], description: Insert a static timeline , Render Markdown: prefix: md, body: [ % md $1:https://cdn.jsdmirror.com/gh/codepzj/AIContentSummaryCuteen/README.md % ], description: Render external markdown file , GHCard: prefix: ghcard, body: [% ghcard $1:codepzj %, % ghcard $2:codepzj/blog %], description: Insert GitHub card , TOC: prefix: toc, body: [% toc wiki:$1:xxx [open:$2:true] $3:title %], description: Insert a document table of contents , Folding Container: prefix: folding, body: [ % folding $1:title [codeblock:$2:bool] [open:$3:bool] [color:$4:color] %, $5:content, % endfolding % ], description: Insert a folding container , Multiple Folding Containers: prefix: folders, body: [ % folders %, !-- folder $1:题目1 --, $2:这是答案1, !-- folder $3:题目2 --, $4:这是答案2, !-- folder $5:题目3 --, $6:这是答案3, % endfolders % ], description: Insert multiple folding containers , Tabs: prefix: tabs, body: [ % tabs active:$1:2 align:$2:center %, !-- tab $3:图片 --, $4:图片, !-- tab $5:代码块 --, $6:代码块, % endtabs % ], description: Insert a tabbed container , Grid: prefix: grid, body: [ % grid %, !-- cell --, $1:% image $2:https://image.url %, !-- cell --, $3:内容, % endgrid % ], description: Insert a grid layout"},{"title":"tailwindcss实现响应式导航栏","path":"//posts/8.html","content":"前言响应式布局和自适应布局的区别 响应式布局是会根据屏幕的大小尺寸，给元素分配不同的尺寸和空间，例如在较大的页面一行会呈现多个元素，而随着页面尺寸的减小，一行能够容纳的元素变少，一些元素被挤压到下一行当中（@media）；而自适应布局呈现的是整个页面，会随着页面尺寸的减小，而缩小元素的尺寸以及间距，来实现一行呈现完所有元素的目的（%、vw、vh）。 快速开始tailwindcss制作响应式导航栏https://www.bilibili.com/video/BV1Ya411u7xR?vd_source=717e5631051a8339c2eea7fb70959d5b 最近学了 tailwindcss，然后仿照 B 站的教程做了一个 tailwindcss 实现响应式导航栏的 demo，本文将介绍实现该功能的流程，采用的是Vue和TailwindCSS框架。 我们来直接看核心代码 – Navbar.vue template div class=bg-gray-900 text-white px-6 py-3.5 shadow md:flex justify-between items-center div class=flex items-center span class=text-green-500 text-lg i class=bi bi-messenger/i /span h1 class=ml-1.5 text-lg @click=toggleOpenDesigner/h1 /div span class=md:hidden absolute right-6 top-3.5 text-2xl i :class=[open ? bi bi-x : bi bi-filter-right] @click=toggleOpen /i /span ul class=text-white bg-gray-900 rounded-bl-xl md:flex md:items-center md:px-3 px-8 md:py-0 py-3 md:w-auto w-full md:mx-0 ml-4 md:static absolute duration-500 ease-in-out :class=[open ? left-0 : left-[-120%]] li class=md:px-4 py-1.5 v-for=link in links a :href=link.link class=hover:text-green-600 focus:text-green-600 link.name /a /li buttonGet Started/button /ul /div/templatescript setup import ref from vue; import Button from ./Button.vue; let open = ref(false); let links = [ name: Brand, link: # , name: Product, link: # , name: Cart, link: # , name: About, link: # , ]; let toggleOpen = () = open.value = !open.value; ;/script 核心技巧 通过md:来实现响应式布局，md: 指的是在 min-width:768px 条件下执行冒号后面的样式，使用原生 css 要使用@media 媒体查询来控制不同尺寸下的样式，这样一来，使用原生 css 会出现较多的冗余代码 1，这就彰显出 tailwindcss 的强大之处，响应式前缀；sm: - 小屏幕（≥ 640px），md: - 中屏幕（≥ 768px），lg: - 大屏幕（≥ 1024px），xl: - 超大屏幕（≥ 1280px），例如：书写 md:flex，指的是宽度大于等于 768px 的屏幕是flex布局，小屏幕则是static布局；md:w-auto w-full，在宽度大于等于 768px 的屏幕时盒子根据内容的宽度调整，小屏幕则表示宽度占满整行。 通过md:hidden来控制元素隐藏，宽度足够大的时候不隐藏导航栏的其他元素，当处于小屏幕（768px）的时候，就会让控制导航栏隐藏信息折叠的按钮显现出来（本 demo 使用的时 bootstrap-icons 图标库），然后之前导航栏后半段设置的md:flex就会因为屏幕尺寸的减小而压缩导航栏之下。 tailwindcss 也能够很好的处理动画的渐变，比如说我点击折叠按钮，来控制导航栏剩余部分内容的呈现与隐藏。如:class=[open ? left-0 : left-[-120%]]通过折叠按钮是否处于开启状态来切换样式，同时也能控制渐变效果的时延，渐进渐出的效果，如duration-500 ease-in-out，使动画变得更加丝滑。 具体效果tailwindcss实现响应式导航栏 项目部署我们想要部署 vite 项目到 GitHub Pages 上，而且我的主域名codepzj.github.io已经使用了，应该怎么做呢？ 修改 vite-config-js： export default defineConfig( plugins: [vue()], base: /tailwindcss-responsive-design/,); 以此实现二级目录托管 将项目代码 push 到 main 分支，将打包好的 dist 静态文件 push 到 gh-pages 分支生成 Github Pages git initgit add .git commit -m tailwindcss响应式导航栏git remote add origin git@github.com:codepzj/tailwindcss-responsive-design.gitgit branch -M maingit push origin maingit checkout -b gh-pages# 将.gitignore中的dist注释git add distgit commit -m tailwindcss响应式导航栏静态页面git subtree push --prefix dist origin gh-pages# 将.gitignore中的dist取消注释 git subtree 是一个 Git 子命令，用于管理和推送子项目到一个 Git 仓库。它可以让你在一个项目中包含另一个 Git 仓库的内容，同时保持这些内容的历史记录 推送子树：将指定子目录的更改推送到远程仓库的指定分支。 git subtree push --prefix subdirectory repository branch 然后项目部署成功😃😃😃 项目仓库https://github.com/Kemeow815/tailwindcss-responsive-design 项目预览地址https://tailwindcss-responsive-design.vercel.app/"},{"title":"1panel部署gitea和act runner","path":"//posts/7.html","content":"前言gitea 是一个支持 git 托管、代码审查、团队协作、软件包注册和 CICD 的开源项目，与 GitHub、Bitbucket 和 GitLab 类似。该文档将介绍如何使用 1panel 来搭建 gitea，拥有属于自己的私有 git 仓库。 优势： 简单易用：零门槛，线上快速获取和安装，使用体验好。 卓越性能：采用 Go 语言编写，资源占用小、运行速度快。 高可配置：100+ 配置项，通过灵活的配置满足不同应用场景的需求。 安全稳定：被⼴泛验证，39k+ GitHub Star、40 万+ 安装量、1000+ 贡献者。 快速开始安装 gitea首先打开 1panel 的界面，安装 gitea，数据库建议使用 postgresql 注意ssh端口建议使用22端口，然后把原本服务器的端口给放出来，修改到其他端口上，否则后续在使用gitea的ssh方式操作代码会出现bug，一直报22端口未连接的错误，这是因为ssh协议默认使用的22端口，如果不使用22端口，使用了其他端口（如222端口），那么在使用ssh的方式在本地clone项目的时候，必须得指定端口 ssh 在本地连接 gitea，需在~/.ssh/config当中追加如下代码： Host gitea HostName gitea.example.com Port 222 User root IdentityFile ~/.ssh/id_rsa 但是如果公司多个人使用的话，每个人都需要修改自己的本地配置文件，非常麻烦，还不如将端口修改成 22，这样的话就不需要修改 ssh 端口即可顺利连接 gitea 内部的 ssh 主机，对代码仓库进行操作。 然后根据自己所需的情况安装，如果是内网就使用 ip 地址，公网可以考虑域名，根据业务需求做决定。 等待 1panel 安装 gitea 容器成功并启动容器，根据容器暴露的 ip 地址和端口进行访问，当然你也可以通过 1panel 中的 openresty 进行访问，进入一个安装 gitea 的界面，端口不需要更改，因为之前已经根据 1panel 默认配置好了，你可以按需修改域名，邮箱，添加管理员账号的操作。 然后就出现一直给茶壶倒茶的画面，还挺好看，符合中国人喜欢喝茶的思想，等待大概 30 秒就成功了，接下来的操作和 github 无异，请读者们自行探索 安装 act runner因为 gitea 没有集成这种 CI、CD 的工具，所以说要单独安装一个 act runner 实现持续集成、持续部署的功能。 token 需要在 gitea 平台处随机生成，官方文档 获取注册令牌Runner 级别决定了从哪里获取注册令牌。 实例级别：管理员设置页面，例如 /admin/runners。 组织级别：组织设置页面，例如 //settings/runners。 存储库级别：存储库设置页面，例如 ///settings/runners 然后下面的 Name 和 Label 自定义即可，注意这里有个坑，需点击下面的高级设置，修改docker-compose.yaml配置文件 ......volumes: - ./data/config.yaml:/config.yaml - ./data/data:/data - ./data/cache:/root/.cache - /var/run/docker.sock:/var/run/docker.sockenvironment: - CONFIG_FILE=/config.yaml # 取消注释 config.yaml在默认配置文件中被注释掉了，这个一定要加，不然 CI、CD 的时候没有 ubuntu-latest 镜像，使用如下方法生成config.yaml $ 然后再将config.yaml移动到volumes的对应的目录当中即可 再进入到 act_runner 所在目录，重建应用 docker-compose down docker-compose up 查看日志 .runner is missing or not a regular filelevel=info msg=Registering runner, arch=amd64, os=linux, version=v0.2.11.level=warning msg=Labels from command will be ignored, use labels defined in config file.level=debug msg=Successfully pinged the Gitea instance serverlevel=info msg=Runner registered successfully.SUCCESStime=2024-10-19T13:19:48Z level=info msg=Starting runner daemontime=2024-10-19T13:19:48Z level=info msg=runner: linux, with version: v0.2.11, with labels: [ubuntu-latest ubuntu-22.04 ubuntu-20.04], declare successfullytime=2024-10-19T13:19:48Z level=info msg=task 1 repo is codepzj/test https://github.com https://repository.codepzj.cn 如果出现以下日志和画面则代表 act runner 配置成功了 新建仓库，测试是否能够拥有 Github Action 的功能 在仓库根目录新建.gitea/workflows/test.yaml文件并写入： name: Gitea Actions Demorun-name: $ gitea.actor is testing out Gitea Actions 🚀on: [push]jobs: Explore-Gitea-Actions: runs-on: ubuntu-latest steps: - run: echo 🎉 The job was automatically triggered by a $ gitea.event_name event. - run: echo 🐧 This job is now running on a $ runner.os server hosted by Gitea! - run: echo 🔎 The name of your branch is $ gitea.ref and your repository is $ gitea.repository . - name: Check out repository code uses: actions/checkout@v4 - run: echo 💡 The $ gitea.repository repository has been cloned to the runner. - run: echo 🖥️ The workflow is now ready to test your code on the runner. - name: List files in the repository run: | ls $ gitea.workspace - run: echo 🍏 This jobs status is $ job.status . 提交并查看结果，进入 action 页面 出现以下页面则说明配置成功，恭喜你 🎉🎉🎉 总结通过上述步骤，你已经成功地在 1panel 中部署了 gitea 和 act runner，实现了一个私有的 Git 托管和 CICD 环境。整个过程从安装 gitea 开始，到配置 act Runner，最后测试 CICD 功能，覆盖了 gitea 的基本部署和持续集成的设置。"},{"title":"部署oracle数据库并配置","path":"//posts/6.html","content":"本地配置使用oracle-19c的版本了，从官网下载，然后按照如下配置 windows 配置 oracle 教程 windows 删除 oracle 教程 服务器配置配置 docker-compose.ymldocker pull truevoly/oracle-12c# 新建一个oracle文件夹mkdir /www/oraclecd /www/oracle# 新建数据挂载目录touch docker-compose.ymlmkdir data# 修改权限chmod -R a+w data 注意不修改权限会出现bug，所以务必确保你的data目录可读可写 将下面的内容写入到docker-compose.yml中 version: 3.8services: oracle-service: image: truevoly/oracle-12c container_name: oracle-12c ports: - 5502:8080 - 1521:1521 volumes: - ./data:/u01/app/oracle restart: always docker 容器启动docker-compose up -d 连接数据库命令行连接# 进入容器docker exec -it oracle-12c /bin/bash# 连接数据库sqlplus system# 输入用户令牌oracle web 端连接oracle 的 web 端已被我部署在公网上，预览地址 登录的账号和密码，如有需要，请联系博主 该网址需要 flash 环境，在 github 上面我找到一个绿色的 flash 环境浏览器，如果没有 flash 环境请自行安装。 https://github.com/Mzying2001/CefFlashBrowserhttps://github.com/Mzying2001/CefFlashBrowser navicat 连接请参考如下 github 仓库： https://github.com/MaksymBilenko/docker-oracle-12chttps://github.com/MaksymBilenko/docker-oracle-12c"},{"title":"windows下git对文件名大小写不敏感的bug","path":"//posts/5.html","content":"今天设置 blog 的 banner 的时候，有一张图片TailwindCSS.jpg是包含大写字母，放在一堆小写字母的文件中，我直接改名成tailwindcss.jpg，但是改名推送到远程仓库的时候发现文件名并没有改变，而且本地的 git 并没有把这个修改记录进去 注意这是因为 git 默认情况下是不区分大小写的，你更改了以后它还认为是大写的，它只关心文件内容是否变化，而不关心文件名是否变化。 让 git 能够识别大小写，其实做法非常简单，只需要一行配置就搞定了： git config core.ignorecase false"},{"title":"tailwindcss学习笔记","path":"//posts/4.html","content":"TIPS最近要做项目，要使用响应式布局，而且 element-plus 想要实现响应式布局只能在 el-row 和 el-col 内部写入元素，对于我这种强迫症患者，还是选择了 tailwindcss，接下来我介绍一下我的学习笔记 布局aspect-ratio 属性 aspect-audio，这个 CSS 属性用于设置元素的宽高比，使其保持 16:9 的比例，适用于大多数屏幕 Class Properties aspect-auto aspect-ratio: auto; aspect-square aspect-ratio: 1 1; aspect-video aspect-ratio: 16 9; container 属性 用于将元素的宽度固定至当前断点的组件。 Class Breakpoint Properties .container None width: 100%; sm (640px) max-width: 640px; md (768px) max-width: 768px; lg (1024px) max-width: 1024px; xl (1280px) max-width: 1280px; 2xl (1536px) max-width: 1536px; 在默认情况下（即屏幕宽度小于 640px），.container 的宽度是 100%。 当屏幕宽度至少为 640px 时，.container 的最大宽度将变为 640px。 当屏幕宽度至少为 768px 时，.container 的最大宽度将变为 768px。 当屏幕宽度至少为 1024px 时，.container 的最大宽度将变为 1024px。 当屏幕宽度至少为 1280px 时，.container 的最大宽度将变为 1280px。 当屏幕宽度至少为 1536px 时，.container 的最大宽度将变为 1536px。 注意Tailwind 的容器不会自动居中，并且没有任何内置的水平填充。 要使容器居中，请使用以下 mx-auto 实用程序： div class=container mx-auto !-- ... --/div columns 属性 用于控制元素内列数的实用程序，一般用于将父盒子分成几列。 Class Properties columns-1 columns: 1; columns-2 columns: 2; columns-3 columns: 3; columns-4 columns: 4; columns-5 columns: 5; columns-6 columns: 6; columns-7 columns: 7; columns-8 columns: 8; 注意gap 用于设置单元格之间的间隙大小 div class=gap-8 columns-3 ... img class=w-full aspect-video ... src=... / img class=w-full aspect-square ... src=... / !-- ... --/div box-sizing 属性 用于控制浏览器如何计算元素总大小的实用程序。 Class Properties box-border box-sizing: border-box; box-content box-sizing: content-box; div class=w-32 h-32 box-border p-4 border-2 background/div 注意box-sizing默认为content-box盒子会因为边框，内外边距而增大 box-sizing设置为border-box之后，会让边框和内边距共用子元素的width和height display 属性 用于控制元素显示框类型的实用程序。 Class Properties block display: block; inline-block display: inline-block; inline display: inline; flex display: flex; inline-flex display: inline-flex; table display: table; inline-table display: inline-table; table-caption display: table-caption; block 和 inline 布局div class=inline行内元素/div不是独占一行的后面还可以根元素span class=block块级元素是独占一行的/span flex 布局div class=flex justify-center items-center div这是一个align-item测试/div img src=https://www.baidu.com/favicon.ico alt=百度图标 //div grid 布局div class=grid gap-4 grid-cols-5 mt-auto span class=w-32 h-32 background1/span span class=w-32 h-32 background2/span span class=w-32 h-32 background3/span span class=w-32 h-32 background4/span span class=w-32 h-32 background5/span span class=w-32 h-32 background6/span span class=w-32 h-32 background7/span span class=w-32 h-32 background8/span span class=w-32 h-32 background9/span span class=w-32 h-32 background10/span/div hidden 属性class=hidden 相当于 display:none float 属性 用于控制元素周围内容包装的实用程序。 Class Properties float-start float: inline-start; float-end float: inline-end; float-right float: right; float-left float: left; float-none float: none; div class=float-left img src=https://huya.com/favicon.ico alt=虎牙直播图标 //div clear 属性 Class Properties clear-start clear: inline-start; clear-end clear: inline-end; clear-left clear: left; clear-right clear: right; clear-both clear: both; clear-none clear: none; div class=float-left img src=https://huya.com/favicon.ico alt=虎牙直播图标 //divdiv class=clear-both/divdiv1/divdiv2/divdiv3/div object-fit 属性 Value Description fill 默认值，拉伸内容以填充容器（可能会导致内容失真） contain 保持内容的宽高比，缩放内容以适应容器，可能会有空白区域 cover 保持内容的宽高比，缩放内容以填满容器，可能会裁剪内容 none 保持内容原始尺寸，不缩放 scale-down 内容根据 contain 和 none 的效果进行缩放选择 Class Properties object-contain object-fit: contain; object-cover object-fit: cover; object-fill object-fit: fill; object-none object-fit: none; object-scale-down object-fit: scale-down; div class=w-3/5 h-1/2 img src=https://image.codepzj.cn/image/202410191713308.png alt=添加请求头防止跨域 class=w-full h-full object-contain //div overflow 溢出 Value Description visible 内容超出元素边界时，内容会被显示出来，不会有滚动条。 hidden 内容超出元素边界时，会被裁剪掉，不会显示滚动条。 scroll 内容超出元素边界时，会始终显示滚动条，允许滚动查看全部内容。 auto 根据内容是否超出元素边界来决定是否显示滚动条。超出时显示，未超出时隐藏。 clip 内容超出元素边界时，会被剪切掉（类似于 hidden），但不使用滚动条。 inherit 从父元素继承 overflow 属性的值。 initial 设置为属性的默认值。 unset 继承父元素的 overflow 值，或者根据上下文决定是否隐藏溢出的内容。 Class Properties overflow-auto overflow: auto; overflow-hidden overflow: hidden; overflow-clip overflow: clip; overflow-visible overflow: visible; overflow-scroll overflow: scroll; overflow-x-auto overflow-x: auto; overflow-y-auto overflow-y: auto; overflow-x-hidden overflow-x: hidden; overflow-y-hidden overflow-y: hidden; overflow-x-scroll overflow-x: scroll; overflow-y-scroll overflow-y: scroll; div class=w-32 h-32 overflow-auto div class=w-48 h-48 bg-yellow-400/div/div positon 属性 Class Properties static position: static; fixed position: fixed; absolute position: absolute; relative position: relative; sticky position: sticky; ul class=flex justify-center items-center fixed top-0 w-full li class=mx-4 bg-yellow-2001/li li class=mx-4 bg-yellow-2001/li li class=mx-4 bg-yellow-2001/li li class=mx-4 bg-yellow-2001/li li class=mx-4 bg-yellow-2001/li li class=mx-4 bg-yellow-2001/li/ul position 的位置属性 Class Properties inset-0 inset: 0px; inset-x-0 left: 0px; right: 0px; inset-y-0 top: 0px; bottom: 0px; start-0 inset-inline-start: 0px; end-0 inset-inline-end: 0px; top-0 top: 0px; right-0 right: 0px; visibility 属性 Class Properties visible visibility: visible; invisible visibility: hidden; collapse visibility: collapse; display:none和visbility:hidden的区别 display:none 会隐藏元素，并使其脱离文档流，不占据空间visibility:hidden 也会隐藏元素，但是仍然占据原来的空间，不显示元素 z-index 属性 Class Properties z-0 z-index: 0; z-10 z-index: 10; z-20 z-index: 20; z-30 z-index: 30; z-40 z-index: 40; z-50 z-index: 50; z-auto z-index: auto; div class=z-10 h-20 w-20 bg-blue-600 relative hover:z-50/divdiv class=z-0 h-20 w-20 bg-green-600 relative bottom-10 left-10 hover:z-50/div 注意z-index 属性必须与定位属性 (position) 配合使用才能生效，并只对那些拥有 position 属性值为 relative、absolute、fixed 或 sticky 的元素有效 弹性盒子flex-basis 属性 Class flex-basis basis-0 0px basis-1 0.25rem (4px) basis-2 0.5rem (8px) basis-3 0.75rem (12px) basis-4 1rem (16px) div class=flex flex-row div class=basis-1/6 style=background-color: red;01/div div class=basis-1/3 style=background-color: green;02/div div class=basis-1/2 style=background-color: yellow;03/div/div 注意flex-basis:0时代表初始分配子元素空间为0，跟随flex-grow的配置，若flex-grow为1，则均匀分配 flex-basis:auto时代表根据子元素已有空间大小分配，随着屏幕尺寸大小对子元素进行伸缩 flex-direction 属性 Class Properties flex-row flex-direction: row; flex-row-reverse flex-direction: row-reverse; flex-col flex-direction: column; flex-col-reverse flex-direction: column-reverse; div class=flex flex-col-reverse items-center div1/div div2/div div3/div/div flex-wrap 属性 用于控制弹性项目如何换行的实用程序。即 flex 布局中元素太多执行的换行操作，保证响应式布局 Class Properties flex-wrap flex-wrap: wrap; flex-wrap-reverse flex-wrap: wrap-reverse; flex-nowrap flex-wrap: nowrap; div class=flex flex-wrap p class=flex-auto max-w-96 计算机体系结构是计算机科学的一部分，涉及到计算机硬件组件如何组合以形成一个完整的计算系统。它定义了计算机的基本功能，包括处理器、内存、输入/输出设备以及它们如何协同工作。理解体系结构对于设计高效的计算机系统至关重要，它帮助我们优化性能和资源利用。 /p p class=flex-auto max-w-96 处理器架构是计算机体系结构的核心部分。它包括中央处理单元（CPU）的设计，如指令集架构（ISA）和内部执行单元。现代处理器使用多核设计来提高处理能力，通过并行处理多个任务来加快计算速度。 /p p class=flex-auto max-w-96 内存体系结构涉及到计算机如何存储和访问数据。主要包括主内存（RAM）和缓存（Cache）。缓存是一种高速度的存储器，用于减少访问内存的延迟。优化内存管理能够显著提高系统的整体性能。 /p p class=flex-auto max-w-96 输入/输出（I/O）体系结构包括计算机如何与外部设备进行数据交换。它涉及到I/O端口、总线和控制器的设计。高效的I/O系统能够提升数据传输速度和系统的响应能力，对于各种应用至关重要。 /p p class=flex-auto max-w-96 计算机体系结构的演变反映了技术进步和需求变化。从早期的单核处理器到现代的多核和超线程技术，体系结构不断进化以支持更高效的计算任务。理解这些变化有助于开发更先进的计算机系统。 /p/div flex 属性 用于控制弹性项目如何增大和缩小的实用程序。 Class Properties flex-1 flex: 1 1 0%; flex-auto flex: 1 1 auto; flex-initial flex: 0 1 auto; flex-none flex: none; flex:1和flex:auto的区别 flex:1 指的是flex-grow:1,flex-shrink:1,flex-basis:0初始分配子元素空间为 0，根据 flex-grow 属性给子元素均匀分配flex:auto 指的是flex-grow:1 flex-shrink:1 flex-basis:auto初始子元素空间为默认空间大小，如 div 就是 100%，继承自定义 css 的宽度大小，可设置 max-width 控制元素大小设置响应式布局 grid column 属性 Class Properties grid-cols-1 grid-template-columns: repeat(1, minmax(0, 1fr)); grid-cols-2 grid-template-columns: repeat(2, minmax(0, 1fr)); grid-cols-3 grid-template-columns: repeat(3, minmax(0, 1fr)); grid-cols-4 grid-template-columns: repeat(4, minmax(0, 1fr)); grid-cols-5 grid-template-columns: repeat(5, minmax(0, 1fr)); div class=grid grid-cols-3 gap-4 div class=bg-cyan-4001/div div class=bg-yellow-4002/div div class=bg-red-4003/div div class=bg-green-4004/div div class=bg-purple-4005/div div class=bg-orange-4006/div/div grid column startend 属性 用于控制元素在网格列之间的大小和放置方式的实用程序。col-span-2 代表占据两个格子的空间，以此类推 Class Properties col-auto grid-column: auto; col-span-1 grid-column: span 1 / span 1; col-span-2 grid-column: span 2 / span 2; col-span-3 grid-column: span 3 / span 3; col-span-4 grid-column: span 4 / span 4; div class=grid grid-cols-3 gap-4 div class=w-1/3 h-10 background1/div div class=col-span-2 h-10 background2/div div class=col-span-3 h-10 background3/div div class=w-1/3 h-10 background4/div div class=w-1/3 h-10 background5/div/div grid row 属性 用于指定网格布局中的行的实用程序。（类似 grid-cols-xx） Class Properties grid-rows-1 grid-template-rows: repeat(1, minmax(0, 1fr)); grid-rows-2 grid-template-rows: repeat(2, minmax(0, 1fr)); grid-rows-3 grid-template-rows: repeat(3, minmax(0, 1fr)); grid-rows-4 grid-template-rows: repeat(4, minmax(0, 1fr)); div class=grid grid-rows-3 grid-flow-col gap-4 div class=background1/div div class=background2/div div class=background3/div div class=background4/div div class=background5/div div class=background6/div div class=background7/div/div 注意当使用grid-rows-xx的时候，需要往class里面多加一个grid-flow-col属性 原因是grid-auto-flow默认属性是row，是按照行排列的，现在应该改成按列排布 grid row startend 属性 用于控制元素大小和在网格行之间放置方式的实用程序。 Class Properties row-auto grid-row: auto; row-span-1 grid-row: span 1 / span 1; row-span-2 grid-row: span 2 / span 2; row-span-3 grid-row: span 3 / span 3; row-span-4 grid-row: span 4 / span 4; div class=grid grid-rows-3 grid-flow-col gap-4 div class=background1/div div class=background2/div div class=background3/div div class=background row-span-24/div div class=background5/div div class=background6/div div class=background7/div div class=background8/div div class=background9/div/div grid auto flow 属性 用于控制如何自动放置网格中的元素的实用程序。 Class Properties grid-flow-row grid-auto-flow: row; grid-flow-col grid-auto-flow: column; grid-flow-dense grid-auto-flow: dense; grid-flow-row-dense grid-auto-flow: row dense; grid-flow-col-dense grid-auto-flow: column dense; gap 属性 用于控制网格和弹性框项目之间的间距的实用程序。 Class Properties gap-0 gap: 0px; gap-x-0 column-gap: 0px; gap-y-0 row-gap: 0px; gap-px gap: 1px; gap-x-px column-gap: 1px; gap-y-px row-gap: 1px; gap-0.5 gap: 0.125rem; gap-x-0.5 column-gap: 0.125rem; gap-y-0.5 row-gap: 0.125rem; div class=grid grid-cols-3 gap-x-4 gap-y-8 div class=background1/div div class=background2/div div class=background3/div div class=background4/div div class=background5/div div class=background6/div/div 注意gap属性用于控制弹性盒子中子元素中的间距，一般适用于flex和grid布局 justify 属性 用于控制弹性项目和网格项目如何沿容器主轴定位的实用程序。 Class Properties justify-normal justify-content: normal; justify-start justify-content: flex-start; justify-end justify-content: flex-end; justify-center justify-content: center; justify-between justify-content: space-between; justify-around justify-content: space-around; align 属性 用于控制弹性项目和网格项目如何沿容器横轴定位的实用程序。 Class CSS Property items-start align-items: flex-start; items-end align-items: flex-end; items-center align-items: center; items-baseline align-items: baseline; items-stretch align-items: stretch; 间距padding 属性 元素的内边距 Class CSS Property p-0 padding: 0px; px-0 padding-left: 0px; padding-right: 0px; py-0 padding-top: 0px; padding-bottom: 0px; ps-0 padding-inline-start: 0px; pe-0 padding-inline-end: 0px; pt-0 padding-top: 0px; pr-0 padding-right: 0px; margin 属性 元素外边距 Class CSS Property m-0 margin: 0px; mx-0 margin-left: 0px; margin-right: 0px; my-0 margin-top: 0px; margin-bottom: 0px; ms-0 margin-inline-start: 0px; me-0 margin-inline-end: 0px; mt-0 margin-top: 0px; mr-0 margin-right: 0px; 尺寸width 属性 Class Properties w-0 width: 0px; w-px width: 1px; w-0.5 width: 0.125rem; w-1 width: 0.25rem; w-1.5 width: 0.375rem; w-2 width: 0.5rem; w-full width: 100%; w-screen width: 100vw; min-width 属性 Class Properties min-w-0 min-width: 0px; min-w-1 min-width: 0.25rem; min-w-2 min-width: 0.5rem; min-w-3 min-width: 0.75rem; min-w-4 min-width: 1rem; min-w-full min-width: 100%; max-width 属性 Class Properties max-w-0 max-width: 0px; max-w-px max-width: 1px; max-w-0.5 max-width: 0.125rem; max-w-1 max-width: 0.25rem; max-w-1.5 max-width: 0.375rem; max-w-2 max-width: 0.5rem; height 属性 Class Properties h-0 height: 0px; h-px height: 1px; h-0.5 height: 0.125rem; h-1 height: 0.25rem; h-1.5 height: 0.375rem; h-2 height: 0.5rem; h-full height: 100%; h-screen height: 100vh; min-height 属性 Class Properties min-h-0 min-height: 0px; min-h-1 min-height: 0.25rem; min-h-2 min-height: 0.5rem; min-h-3 min-height: 0.75rem; min-h-4 min-height: 1rem; max-height 属性 Class Properties max-h-0 max-height: 0px; max-h-px max-height: 1px; max-h-0.5 max-height: 0.125rem; max-h-1 max-height: 0.25rem; max-h-1.5 max-height: 0.375rem; max-h-2 max-height: 0.5rem; size 属性 Class Properties size-0 width: 0px; height: 0px; size-px width: 1px; height: 1px; size-4 width: 1rem; height: 1rem; size-12 width: 50%; height: 50%; size-13 width: 33.333333%; height: 33.333333%; size-23 width: 66.666667%; height: 66.666667%; size-full width: 100%; height: 100%; 排版fontfont-family 属性 Class Properties font-sans font-family: ui-sans-serif, system-ui, sans-serif, “Apple Color Emoji”, “Segoe UI Emoji”, “Segoe UI Symbol”, “Noto Color Emoji” font-serif font-family: ui-serif, Georgia, Cambria, “Times New Roman”, Times, serif font-mono font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, “Liberation Mono”, “Courier New”, monospace 有衬线，无衬线以及等宽字体的区别 有衬线：字体结尾有比分，如 宋体，楷体等无衬线：字体比较圆滑，如 Arial等宽：所有字体宽度相同，如 Consolas font-size 属性 Class Font Size Line Height text-xs 0.75rem 1rem text-sm 0.875rem 1.25rem text-base 1rem 1.5rem text-lg 1.125rem 1.75rem text-xl 1.25rem 1.75rem font-family 属性 Class Property italic font-style: italic; not-italic font-style: normal; font-weight 属性 Class Property font-thin font-weight: 100; font-extralight font-weight: 200; font-light font-weight: 300; font-normal font-weight: 400; font-medium font-weight: 500; font-semibold font-weight: 600; font-bold font-weight: 700; texttext-align 属性 Class Property text-left text-align: left; text-center text-align: center; text-right text-align: right; text-justify text-align: justify; text-start text-align: start; text-end text-align: end; text-color 属性 Class Property text-inherit color: inherit; text-current color: currentColor; text-transparent color: transparent; text-black color: rgb(0, 0, 0); text-white color: rgb(255, 255, 255); text-slate-50 color: rgb(248, 250, 252); text-slate-100 color: rgb(241, 245, 249); text-slate-200 color: rgb(226, 232, 240); text-slate-300 color: rgb(203, 213, 225); text-decoration 属性 Class Property underline text-decoration: underline; overline text-decoration: overline; line-through text-decoration: line-through; no-underline text-decoration: none; text-indent 属性 Class Property indent-0 text-indent: 0px; indent-px text-indent: 1px; indent-0.5 text-indent: 0.125rem; indent-1 text-indent: 0.25rem; indent-1.5 text-indent: 0.375rem; indent-2 text-indent: 0.5rem; indent-2.5 text-indent: 0.625rem; indent-3 text-indent: 0.75rem; indent-3.5 text-indent: 0.875rem; indent-4 text-indent: 1rem; indent-5 text-indent: 1.25rem; indent-6 text-indent: 1.5rem; indent-7 text-indent: 1.75rem; indent-8 text-indent: 2rem; line-height 属性 Class Property leading-3 line-height: 0.75rem; leading-4 line-height: 1rem; leading-5 line-height: 1.25rem; 伪类 content 属性 Class Property content-none content: none; 设置伪元素的内容使用 content-[“ “] 实用程序以及 before 和变体修饰符来设置和伪元素 after 的内容。 div 大家好，这是a href=https://haohanxinghe.com class=text-sky-400 after:content-[↗] target=_blank 我的博客/a /div 背景backgroundbackground-color 熟性 用于控制元素背景颜色的实用程序。 Class Properties bg-inherit background-color: inherit; bg-current background-color: currentColor; bg-transparent background-color: transparent; bg-black background-color: rgb(0 0 0); bg-white background-color: rgb(255 255 255); bg-slate-50 background-color: rgb(248 250 252); bg-slate-100 background-color: rgb(241 245 249); 在属性后面可以添加透明度 // 代表opacity为0.5div class=w-full h-full bg-blue-700/50/div background-repeat 属性 在一个元素中设置了 background-image 属性，如果 image 的尺寸小于该元素的尺寸，就会在元素中的 x，y 轴方向拓展图片 Class Property bg-repeat background-repeat: repeat; bg-no-repeat background-repeat: no-repeat; bg-repeat-x background-repeat: repeat-x; bg-repeat-y background-repeat: repeat-y; bg-repeat-round background-repeat: round; bg-repeat-space background-repeat: space; 边框borderborder-radius 属性 Class Properties rounded-none border-radius: 0px; rounded-sm border-radius: 0.125rem; rounded border-radius: 0.25rem; rounded-md border-radius: 0.375rem; rounded-lg border-radius: 0.5rem; rounded-xl border-radius: 0.75rem; border-width 属性 Class Properties border-0 border-width: 0px; border-2 border-width: 2px; border-4 border-width: 4px; border-8 border-width: 8px; border border-width: 1px; border-color 属性 Class Properties border-inherit border-color: inherit; border-current border-color: currentColor; border-transparent border-color: transparent; border-black border-color: rgb(0 0 0); border-white border-color: rgb(255 255 255); border-style 属性 Class Properties border-solid border-style: solid; border-dashed border-style: dashed; border-dotted border-style: dotted; border-double border-style: double; border-hidden border-style: hidden; border-none border-style: none; div class=w-80 h-80 rounded-full bg-blue-400 border-2 border-dashed border-black/div 效果box-shadow 属性 Class Properties shadow-sm box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05); shadow box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1); shadow-md box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); shadow-lg box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1); shadow-xl box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1); shadow-2xl box-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25); shadow-inner box-shadow: inset 0 2px 4px 0 rgb(0 0 0 / 0.05); shadow-none box-shadow: 0 0 #0000; box-shadow-color 属性 设置 box-shadow 阴影的颜色 Class Properties shadow-inherit --tw-shadow-color: inherit; shadow-current --tw-shadow-color: currentColor; shadow-transparent --tw-shadow-color: transparent; shadow-black --tw-shadow-color: #000; shadow-white --tw-shadow-color: #fff; shadow-slate-50 --tw-shadow-color: #f8fafc; shadow-slate-100 --tw-shadow-color: #f1f5f9; div class=bg-slate-700 w-40 h-40 ml-8 mt-8 shadow-2xl rounded-xl shadow-gray-400 hover:scale-105/div opacity 属性 控制元素的透明度 Class Properties opacity-0 opacity: 0; opacity-5 opacity: 0.05; opacity-10 opacity: 0.1; opacity-15 opacity: 0.15; opacity-20 opacity: 0.2; 注意opacity为1代表完全不透明 过渡和动画transaction 实现元素属性的平滑过渡效果，比如颜色、大小或位置的渐变。 Class Properties transition-none transition-property: none; transition-all transition-property: all; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; transition transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; transition-colors transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; transition-opacity transition-property: opacity; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; transition-shadow transition-property: box-shadow; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; button class=rounded-md transition-all ease-in-out duration-1000 bg-blue-300 p-5 m-5 hover:bg-cyan-500 button/button ease-in-out的作用 在 TailwindCSS 中，ease-in-out 是一个用于设置过渡动画的时间函数（timing function）的实用类。它会使元素的过渡动画在开始和结束时变得更平滑。具体来说，ease-in-out 是 CSS transition-timing-function 属性的一个预设值。CSS 中的 ease-in-out 时间函数会使过渡动画在开始和结束时加速和减速，使动画更自然。它的具体效果是：Ease-in: 动画开始时比较慢，加速过渡。Ease-out: 动画结束时比较慢，减速过渡。 duration 属性 设置动画过渡时间，单位是 ms Class Properties duration-0 transition-duration: 0s; duration-75 transition-duration: 75ms; duration-100 transition-duration: 100ms; duration-150 transition-duration: 150ms; duration-200 transition-duration: 200ms; ease 属性 设置元素动画效果缓入缓出 Class Properties ease-linear transition-timing-function: linear; ease-in transition-timing-function: cubic-bezier(0.4, 0, 1, 1); ease-out transition-timing-function: cubic-bezier(0, 0, 0.2, 1); ease-in-out transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); 注意ease-in 缓慢进入 ease-out 缓慢出去 ease-in-out 缓入缓出 delay 属性 控制 css 动画转换的时延 Class Properties delay-0 transition-delay: 0s; delay-75 transition-delay: 75ms; delay-100 transition-delay: 100ms; delay-150 transition-delay: 150ms; delay和duration的区别 delay 指的是在过渡开始之前的延迟时间，而 duration 是过渡效果持续的时间。简单来说，delay 是等待过渡开始的时间，duration 是过渡完成的时间。例如，如果 delay 设置为 100ms，duration 设置为 300ms，那么元素会在 100ms 后开始过渡，并且过渡将持续 300ms。 animation 属性animate-spin 属性 作用是旋转动画 button type=button class=inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-white bg-indigo-500 hover:bg-indigo-400 transition ease-in-out duration-150 cursor-not-allowed svg class=animate-spin -ml-1 mr-3 h-5 w-5 text-white xmlns=http://www.w3.org/2000/svg fill=none viewBox=0 0 24 24 circle class=opacity-25 cx=12 cy=12 r=10 stroke=currentColor stroke-width=4 /circle path class=opacity-75 fill=currentColor d=M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z /path /svg Processing.../button animate-pin 属性 使元素缩放并像雷达波或水波纹一样消失 span class=relative inline-flex button type=button class=inline-flex items-center px-4 py-2 font-semibold leading-6 text-sm shadow rounded-md text-sky-500 bg-white dark:bg-slate-800 transition ease-in-out duration-150 cursor-not-allowed ring-1 ring-slate-900/10 dark:ring-slate-200/20 disabled= font style=vertical-align: inherit; font style=vertical-align: inherit; 交易 /font/font /button span class=flex absolute h-3 w-3 top-0 right-0 -mt-1 -mr-1 span class=animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75 /span span class=relative inline-flex rounded-full h-3 w-3 bg-sky-500/span /span/span animate-pulse 属性 脉冲，实用程序以使元素逐渐淡入淡出 - 对于骨架加载器之类的东西很有用 div class=border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto div class=animate-pulse flex space-x-4 div class=rounded-full bg-slate-700 h-10 w-10/div div class=flex-1 space-y-6 py-1 div class=h-2 bg-slate-700 rounded/div div class=space-y-3 div class=grid grid-cols-3 gap-4 div class=h-2 bg-slate-700 rounded col-span-2/div div class=h-2 bg-slate-700 rounded col-span-1/div /div div class=h-2 bg-slate-700 rounded/div /div /div /div/div animate-bounce 属性 控制元素上下横跳 svg class=animate-bounce transition duration-1000 w-6 h-6 hover:animate-none xmlns=http://www.w3.org/2000/svg width=128 height=128 viewBox=0 0 24 24 path fill=currentColor d=M6 10.5v3.75q0 .325.213.538T6.75 15t.538-.213t.212-.537v-4.5q0-.325-.213-.537T6.75 9h-1q-.325 0-.537.213T5 9.75t.213.538t.537.212zM9.5 15H12q.425 0 .713-.288T13 14v-4q0-.425-.288-.712T12 9H9.5q-.425 0-.712.288T8.5 10v4q0 .425.288.713T9.5 15m.5-1.5v-3h1.5v3zm5.5-.75l1.55 1.975q.05.075.55.275q.425 0 .625-.387t-.075-.738L16.75 12l1.425-1.9q.275-.35.075-.725T17.6 9q-.175 0-.312.075t-.238.2L15.5 11.25v-1.5q0-.325-.212-.538T14.75 9t-.537.213T14 9.75v4.5q0 .325.213.538t.537.212t.538-.213t.212-.537zM5 21q-.825 0-1.412-.587T3 19V5q0-.825.588-1.412T5 3h14q.825 0 1.413.588T21 5v14q0 .825-.587 1.413T19 21z //svg"},{"title":"element-plus的布局属性","path":"//posts/3.html","content":"TIP组件默认使用 Flex 布局，不需要手动设置 type=flex。 请注意父容器避免使用 inline 相关样式，会导致组件宽度不能撑满。 基础布局 ​使用列创建基础网格布局。 通过 row 和 col 组件，并通过 col 组件的 span 属性我们就可以自由地组合布局。 el-row el-col :span=24div class=grid-content ep-bg-purple-dark //el-col/el-rowel-row el-col :span=12div class=grid-content ep-bg-purple //el-col el-col :span=12div class=grid-content ep-bg-purple-light //el-col/el-rowel-row el-col :span=8div class=grid-content ep-bg-purple //el-col el-col :span=8div class=grid-content ep-bg-purple-light //el-col el-col :span=8div class=grid-content ep-bg-purple //el-col/el-row 通过设置:span 来控制 el-col 占一行的比例 分栏间隔在 el-row 中设置 gutter 属性（单位为 px），控制 el-row 当中 el-col 之间的间距 template el-row :gutter=20 el-col :span=6div class=grid-content ep-bg-purple //el-col el-col :span=6div class=grid-content ep-bg-purple //el-col el-col :span=6div class=grid-content ep-bg-purple //el-col el-col :span=6div class=grid-content ep-bg-purple //el-col /el-row/template 列偏移通过在 el-col 列中设置偏移量 offset 即可达到偏移的目的 el-col :span=6 :offset=6 div class=grid-content ep-bg-purple //el-col 对齐方式在 el-row 中设置 justify 属性来控制行内块的对齐方式，属性有center,space-between,space-around,space-evenly,start,end等等 el-row class=row-bg justify=center/el-row 响应式布局参照了 Bootstrap 的 响应式设计，预设了五个响应尺寸：xs、sm、md、lg 和 xl。 属性名 说明 类型 默认值 xs 768px 响应式栅格数或者栅格属性对象 number object — sm ≥768px 响应式栅格数或者栅格属性对象 number object — md ≥992px 响应式栅格数或者栅格属性对象 number object — lg ≥1200px 响应式栅格数或者栅格属性对象 number object — xl ≥1920px 响应式栅格数或者栅格属性对象 number object — el-col :xs=8 :sm=6 :md=4 :lg=3 :xl=1 div class=grid-content ep-bg-purple //el-col 含义768px 时占 13 ≥768px 992px 时占 14 ≥992px 1200px 时占 16 ≥1200px 1920px 时占 18 ≥1920px 时占 124 基于断点的隐藏类 ​Element Plus 额外提供了一系列类名，用于在某些条件下隐藏元素。 这些类名可以添加在任何 DOM 元素或自定义组件上。 如果需要，请自行引入以下文件： import element-plus/theme-chalk/display.css; 这些类名为： hidden-xs-only - 当视口在 xs 尺寸时隐藏 hidden-sm-only - 当视口在 sm 尺寸时隐藏 hidden-sm-and-down - 当视口在 sm 及以下尺寸时隐藏 hidden-sm-and-up - 当视口在 sm 及以上尺寸时隐藏 hidden-md-only - 当视口在 md 尺寸时隐藏 hidden-md-and-down - 当视口在 md 及以下尺寸时隐藏 hidden-md-and-up - 当视口在 md 及以上尺寸时隐藏 hidden-lg-only - 当视口在 lg 尺寸时隐藏 hidden-lg-and-down - 当视口在 lg 及以下尺寸时隐藏 hidden-lg-and-up - 当视口在 lg 及以上尺寸时隐藏 hidden-xl-only - 当视口在 xl 尺寸时隐藏"},{"title":"hexo-theme-stellar常用标签组件","path":"//posts/2.html","content":"emoji 表情包 表情 索引 表情 索引 表情 索引 ablobcatheart ablobcatheartbroken blobcatheart blobcatheartpride blobcatlove blobcatkissheart blobcatsnuggle comfyuee comfyslep blobcatcomfysweat blobcatcomftears blobcatfacepalm blobcat0_0 blobcatangry blobbanhammerr blobcatt blobcatblush blobcatcoffee blobcatcry blobcatdead blobcatdied blobcatdisturbed blobcatfearful blobcatfingerguns blobcatflip blobcatflower blobcatgay blobcatgooglycry blobcatneutral blobcatopenmouth blobcatsadreach blobcatscared blobcatnomblobcat blobcatpresentred blobcatread blobcatsipsweat blobcatsnapped blobcatthink blobcattriumph blobcatumm blobcatverified blobcatbox blobcatcaged blobcatgooglytrash blobcatheadphones blobcathighfive blobcatmelt blobcatmeltthumb blobcatnotlikethis blobcatsaitama blobcatyandere blobcatpeek2 blobcatpeekaboo blobcatphoto ablobcatattentionreverse ablobcatreachrev ablobcatwave blobcatalt blobcatpolice blobcatshocked ablobcatrainbow 语法% emoji [source] name [height:1.75em] % 用法% emoji 爱你 height:2em %% emoji tieba 滑稽 height:2em %% emoji blobcat ablobcatheart %% emoji blobcat blobcatangry %% emoji blobcat blobcatflower % 效果 icon 图标标签语法用法% icon solar:planet-bold-duotone % # 直接使用icons.yml默认图标% icon https://image.codepzj.cn/image/202410192142540.png % # 使用外联图标% icon ph:seal-question-fill color:green % # 使用样式 效果 mark 标记标签语法用法# 支持多彩标记% mark 默认 %% mark 红 color:red %% mark 橙 color:orange %% mark 黄 color:yellow %% mark 绿 color:green %% mark 青 color:cyan %% mark 蓝 color:blue %% mark 紫 color:purple %% mark 亮 color:light %% mark 暗 color:dark %% mark 警告 color:warning %% mark 错误 color:error % 效果默认 红 橙 黄 绿 青 蓝 紫 亮 暗 警告 错误 hashtag 标签语法用法如果没有指定颜色，且没有设置默认颜色，则随机取一个颜色 % hashtag Stellar https://xaoxuu.com/wiki/stellar/ %% hashtag Hexo https://hexo.io/ %% hashtag GitHub https://github.com/xaoxuu/ %% hashtag Gitea https://git.xaox.cc/ color:green % 效果GitHub Gitee DockerHub image 图片标签语法% image src [description] [download:bool/string] [width:px] [padding:px] [bg:hex] [fancybox:bool/string] % src:图片地址description:图片描述download:href # 下载地址，设置此值后鼠标放在图片上会显示下载地址，如果下载地址为图片地址，可以设置为 truewidth:200px # 图片宽度padding:16px # 图片四周填充宽度bg:#ffffff # 图片区域背景颜色，16进制fancybox:href # fancybox 放大地址，设置此值后会调用该链接放大，如果放大地址为图片地址，可以设置为 true 用法% image https://image.codepzj.cn/image/202410192146575.gif 小猫摇KFC download:true width:200px %% image https://image.codepzj.cn/image/202410192148722.gif 调试css的狼狈样子 download:true width:200px padding:16px % 效果 调试 css 的狼狈样子 quot 引用语法用法% quot Stellar 是迄今为止最好用的主题 %% quot 热门话题 icon:hashtag %% quot 特别引用 icon:default %% quot prefix:solar:planet-bold-duotone 这是一个 icons.yml 配置的示例 % 效果Stellar 是迄今为止最好用的主题 热门话题 特别引用 这是一个 icons.yml 配置的示例 poetry 诗词语法用法% poetry 游山西村 author:陆游 footer:诗词节选 %莫笑农家腊酒浑，丰年留客足鸡豚。**山重水复疑无路，柳暗花明又一村。**箫鼓追随春社近，衣冠简朴古风存。从今若许闲乘月，拄杖无时夜叩门。% endpoetry % 效果观沧海曹操东临碣石，以观沧海。水何澹澹，山岛竦峙。树木丛生，百草丰茂。秋风萧瑟，洪波涌起。日月之行，若出其中；星汉灿烂，若出其里。幸甚至哉，歌以咏志。诗词节选 paper 纸张标签语法用法% paper style:underline title:六国论 author:苏洵 date:宋 footer:节选 %!-- paragraph --六国破灭，非兵不利，战不善，弊在赂秦。赂秦而力亏，破灭之道也。或曰：六国互丧，率赂秦耶？曰：不赂者以赂者丧。盖失强援，不能独完。故曰：弊在赂秦也。!-- paragraph --秦以攻取之外，小则获邑，大则得城。较秦之所得，与战胜而得者，其实百倍；诸侯之所亡，与战败而亡者，其实亦百倍。则秦之所大欲，诸侯之所大患，固不在战矣。思厥先祖父，暴霜露，斩荆棘，以有尺寸之地。子孙视之不甚惜，举以予人，如弃草芥。今日割五城，明日割十城，然后得一夕安寝。起视四境，而秦兵又至矣。然则诸侯之地有限，暴秦之欲无厌，奉之弥繁，侵之愈急。故不战而强弱胜负已判矣。至于颠覆，理固宜然。古人云：“以地事秦，犹抱薪救火，薪不尽，火不灭。”此言得之。!-- paragraph --齐人未尝赂秦，终继五国迁灭，何哉？与嬴而不助五国也。五国既丧，齐亦不免矣。燕赵之君，始有远略，能守其土，义不赂秦。是故燕虽小国而后亡，斯用兵之效也。至丹以荆卿为计，始速祸焉。赵尝五战于秦，二败而三胜。后秦击赵者再，李牧连却之。洎牧以谗诛，邯郸为郡，惜其用武而不终也。且燕赵处秦革灭殆尽之际，可谓智力孤危，战败而亡，诚不得已。向使三国各爱其地，齐人勿附于秦，刺客不行，良将犹在，则胜负之数，存亡之理，当与秦相较，或未易量。!-- paragraph --呜呼！以赂秦之地封天下之谋臣，以事秦之心礼天下之奇才，并力西向，则吾恐秦人食之不得下咽也。悲夫！有如此之势，而为秦人积威之所劫，日削月割，以趋于亡。为国者无使为积威之所劫哉！!-- paragraph --夫六国与秦皆诸侯，其势弱于秦，而犹有可以不赂而胜之之势。苟以天下之大，下而从六国破亡之故事，是又在六国下矣。% endpaper % 效果六国论六国破灭，非兵不利，战不善，弊在赂秦。赂秦而力亏，破灭之道也。或曰：六国互丧，率赂秦耶？曰：不赂者以赂者丧。盖失强援，不能独完。故曰：弊在赂秦也。秦以攻取之外，小则获邑，大则得城。较秦之所得，与战胜而得者，其实百倍；诸侯之所亡，与战败而亡者，其实亦百倍。则秦之所大欲，诸侯之所大患，固不在战矣。思厥先祖父，暴霜露，斩荆棘，以有尺寸之地。子孙视之不甚惜，举以予人，如弃草芥。今日割五城，明日割十城，然后得一夕安寝。起视四境，而秦兵又至矣。然则诸侯之地有限，暴秦之欲无厌，奉之弥繁，侵之愈急。故不战而强弱胜负已判矣。至于颠覆，理固宜然。古人云：“以地事秦，犹抱薪救火，薪不尽，火不灭。”此言得之。齐人未尝赂秦，终继五国迁灭，何哉？与嬴而不助五国也。五国既丧，齐亦不免矣。燕赵之君，始有远略，能守其土，义不赂秦。是故燕虽小国而后亡，斯用兵之效也。至丹以荆卿为计，始速祸焉。赵尝五战于秦，二败而三胜。后秦击赵者再，李牧连却之。洎牧以谗诛，邯郸为郡，惜其用武而不终也。且燕赵处秦革灭殆尽之际，可谓智力孤危，战败而亡，诚不得已。向使三国各爱其地，齐人勿附于秦，刺客不行，良将犹在，则胜负之数，存亡之理，当与秦相较，或未易量。呜呼！以赂秦之地封天下之谋臣，以事秦之心礼天下之奇才，并力西向，则吾恐秦人食之不得下咽也。悲夫！有如此之势，而为秦人积威之所劫，日削月割，以趋于亡。为国者无使为积威之所劫哉！夫六国与秦皆诸侯，其势弱于秦，而犹有可以不赂而胜之之势。苟以天下之大，下而从六国破亡之故事，是又在六国下矣。苏洵宋 reel 卷轴标签语法用法% reel 滕王阁序 author:王勃 date:重九日 footer:节选 %时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。% endreel % 效果滕王阁序王勃时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。重九日节选 note 备注块语法% note [title] content [color:color] % 用法% note **程序员黑话**那个bug没问题啊，你再试试br实际：刚偷偷改完这个bugbr使用场景：当非技术部门的同事给技术报问题的时候，技术可能在想“你个傻X会用吗”，当真的发现是自己的bug，会默默改掉，然后给出上边的答复，让非技术部门的人觉得什么也没发生过。color:red % 一共支持12 种颜色，可以满足几乎所有的需求了。 color 可设置 red、orange、amber、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 效果程序员黑话那个 bug 没问题啊，你再试试 实际：刚偷偷改完这个 bug 使用场景：当非技术部门的同事给技术报问题的时候，技术可能在想“你个傻 X 会用吗”，当真的发现是自己的 bug，会默默改掉，然后给出上边的答复，让非技术部门的人觉得什么也没发生过。 link 链接卡片语法% link href [title] [icon:src] [desc:true/false] % 用法% link https://www.baidu.com 百度 icon:https://www.baidu.com/favicon.ico % 效果百度https://www.baidu.com Githubhttps://github.com button 按钮语法% button text url [icon:key/src] [color:color] [size:xs] % 用法% button vue3文档 https://cn.vuejs.org icon:https://vueschool.io/images/banners/assets/CERTIFICATES/logo.svg color:yellow size:s % 效果vue3 文档 okr 目标管理语法用法% okr o1 %2024年的小目标：独立开发一个商城系统来自2025年的复盘：已《基本》实现目标 % emoji blobcat blobcatflower %!-- okr kr1 percent:0.9 --学习vue3和golang的基本语法- element-plus的使用- gorm的使用!-- okr kr2 percent:0 status:off_track --开发商城购物前台!-- okr kr3 percent:0 status:unfinished --开发商城管理后台!-- okr kr4 status:at_risk --开发、测试和发布大概率完不成了。。。% endokr % 效果 O1 2024 年的小目标：独立开发一个商城系统 来自 2025 年的复盘：已《基本》实现目标 正常 23% KR1 学习 vue3 和 golang 的基本语法 element-plus 的使用gorm 的使用 正常 90% KR2 开发商城购物前台 延期 0% KR3 开发商城管理后台 未完成 0% KR4 开发、测试和发布 大概率完不成了。。。 风险 0% copy 复制行语法用法% copy curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh %% copy curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh prefix:$ %% copy git:https aceld/golang %% copy git:ssh aceld/golang %% copy git:gh aceld/golang % 效果 $ radio 单选语法用法% radio color:red 未勾选的单选框 %% radio checked:true color:green 已勾选的单选框 % 效果未勾选的单选框 已勾选的单选框 checkbox 复选语法用法% checkbox 普通的没有勾选的复选框 %% checkbox checked:true 普通的已勾选的复选框 %% checkbox symbol:plus color:green checked:true 显示为加号的绿色的已勾选的复选框 %% checkbox symbol:minus color:yellow checked:true 显示为减号的黄色的已勾选的复选框 %% checkbox symbol:times color:red checked:true 显示为乘号的红色的已勾选的复选框 % 效果普通的没有勾选的复选框 普通的已勾选的复选框 显示为加号的绿色的已勾选的复选框 显示为减号的黄色的已勾选的复选框 显示为乘号的红色的已勾选的复选框 audio 音频标签语法用法% audio type:2 netease:1856385686 autoplay:0 % type:2/0 # 歌曲/歌单 # 不设置默认为2歌曲模式brnetease:xxx # 歌曲/歌单 id ，具体 id 在网易云网页版的网址链接中寻找brautoplay:1/0 # 自动播放/手动播放 # 不设置默认0手动播放br 效果 video 视频标签语法用法% video bilibili:BV1BK411L7DJ width:80% autoplay:0 % 效果 navbar 导航栏语法用法% navbar active:/wiki/ [文章](/) [项目](/wiki/) [留言](#comments) [GitHub](https://github.com/Kemeow815) % 效果文章项目留言GitHub frame 设备框架语法用法% frame iphone11 img:https://xaoxuu.com/assets/wiki/prohud/toast/demo-loading.png video:https://xaoxuu.com/assets/wiki/prohud/toast/demo-loading.mp4 focus:top % 效果 文本修饰标签集语法用法- 这是 % psw 密码 % 标签- 这是 % u 下划线 % 标签- 这是 % emp 着重号 % 标签- 这是 % wavy 波浪线 % 标签- 这是 % del 删除线 % 标签- 这是 % sup 上角标 color:red % 标签- 这是 % sub 下角标 % 标签- 这是 % kbd 键盘样式 % 标签，试一试：% kbd Ctrl % + % kbd S % 效果 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：Ctrl + S 静态时间线语法用法% timeline %!-- node 2024 年 8 月 28 日 --逐渐熟悉 **Stellar** 标签的用法!-- node 2024 年 8 月 18 日 --初步建站，使用的 hexo-theme-stellar 主题% endtimeline % 效果2024 年 8 月 28 日逐渐熟悉 Stellar 标签的用法2024 年 8 月 18 日初步建站，使用的 hexo-theme-stellar 主题 md 渲染外部 markdown 文件语法用法% md https://cdn.jsdmirror.com/gh/codepzj/AIContentSummaryCuteen/README.md % 效果 ghcard 卡片语法用法% ghcard codepzj %% ghcard codepzj/AKGraph % 效果 toc 文档目录树语法% toc wiki:xxx [open:true] title % 用法% toc wiki:niuke open:true 牛客 % 效果 folding 折叠容器语法% folding title [codeblock:bool] [open:bool] [color:color] %content% endfolding % 用法% folding 这是一段js代码 open:false color:blue %代码块...% endfolding % 效果这是一段 js 代码 console.log(555); folders 多个折叠容器聚合语法用法% folders %!-- folder 题目1 --这是答案1!-- folder 题目2 --这是答案2!-- folder 题目3 --这是答案3% endfolders % 效果题目1 这是答案 1题目2 这是答案 2题目3 这是答案 3 tabs 分栏容器语法用法% tabs active:2 align:center %!-- tab 图片 --图片!-- tab 代码块 --代码块% endtabs % 效果图片代码块func main() fmt.Println(666) grid 网格分区容器语法用法% grid %!-- cell --% image https://image.codepzj.cn/image/202410192149538.jpeg %!-- cell --The Galactic Center is the rotational center of the Milky Way galaxy. Its central massive object is a supermassive black hole of about 4 million solar masses, which is called Sagittarius A*. Its mass is equal to four million suns. The center is located 25,800 light years away from Earth. Ōwhiro Bay, Wellington, New Zealand Published on May 31, 2022 SONY, ILCE-6000 Free to use under the Unsplash License% endgrid % 效果 The Galactic Center is the rotational center of the Milky Way galaxy. Its central massive object is a supermassive black hole of about 4 million solar masses, which is called Sagittarius A*. Its mass is equal to four million suns. The center is located 25,800 light years away from Earth.Ōwhiro Bay, Wellington, New ZealandPublished on May 31, 2022SONY, ILCE-6000Free to use under the Unsplash License"},{"title":"白嫖cloudfare的cdn让网站更加流畅","path":"//posts/1.html","content":"cdn 是什么CDN 英文全称 Content Delivery Network，中文翻译即为 内容分发网络。它是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。 CDN 应用广泛，支持多种行业、多种场景内容加速，例如：图片小文件、大文件下载、视音频点播、直播流媒体、全站加速、安全加速。 所以 cdn 的作用就是，当用户使用网站，浏览器就会向服务器请求资源，而域名会通过 DNS 解析寻找距离请求地址最近的节点，并检查该请求是否命中节点中的缓存资源，如果命中，那么就直接返回数据；不命中的话，就直接向源站发请求，并把资源缓存到节点上。 cdn 的特点主要有 加速内容传输，缓存机制，负载均衡，安全性提升 等等特点。 测试我的网站不套 cdn 的速度首先，推荐大家一个网站测速，炸了么 - 网站测速, HTTP 测速, PING 检测, TCPPING 检测, CDN 测速, 多地区网站测速, 网络拨测工具 (zhale.me) 快速检测： 慢速监测： 这两者的区别 快速检测：指的是高并发场景，全国各地同时对源服务器请求到资源加载完全的平均时间 慢速监测：指的是队列，一个一个请求发送，监测系统对单个请求的平均响应时间 使用 cloudfare 免费 cdn进入 cloudfare 官网，注册你的域名 第一步、更换域名服务器 更换域名服务器，就是把将域名的 DNS 解析管理权给了该云厂商，假如说你使用的阿里云的域名就应该删除掉阿里云的 dns 解析记录，更换成 cloudfare，接下来你才能让 cloudfare 托管你的域名，并使用 cdn 加速，设置 A、AAAA、CNAME 等等的记录。 等待 cloudfare 验证 dns 解析等待大约 3-5 分钟 一路继续，设置成功。 第二步、更换 dns 解析记录然后之前所有在旧云服务厂商设置的 dns 解析记录，全部迁移到 cloudfare 中 在此处添加，不要忘记要打开代理模式，这样才会使用 cdn 第三步、设置一些免费的配置项优化网站安全性 自动程序 速度 优化 还有一些免费的功能自己探索！"},{"title":"设置","path":"/settings/index.html","content":"AI 摘要默认关闭 当前状态：loading 启用/禁用 黑夜模式默认白昼 白昼/黑夜/默认 雪花模式默认关闭 启用/禁用 重新加载清除缓存"},{"title":"主题更新日志","path":"/update/index.html","content":"2024 年 12 月 14 日修复最新评论a标签显示问题2024 年 12 月 1 日添加博客热力图2024 年 11 月 11 日添加 echarts 数据统计2024 年 11 月 10 日添加 chat 组件2024 年 11 月 8 日删除博客轮播图，剔除黑暗状态下卡片悬浮发光效果，修改 wiki 文档侧边栏目录为折叠块"},{"title":"每日新闻 & 放眼看世界","path":"/news/index.html","content":"本站会每日早晨定时更新新闻，准时为大家带来新鲜出炉的新闻汇总，让你不错过任何重要的国内外大事。小伙伴们，快来订阅我们的早间新闻吧，让每一天都有个信息满满的开始！期待成为你每日信赖的信息伙伴。 每日新闻"},{"title":"隐私政策","path":"/document/policy/index.html","content":"信息收集本站重视访客的隐私和个人信息保护，但为了更好的服务质量，我们可能会收集和使用您的相关信息： 用于保持状态的 Cookies 储存个性化配置的 LocalStorage 用户的 User-Agent 数据 有关您计算机的信息，包括但不限于 IP 地址、浏览器类型和版本以及操作系统类型和版本； 您主动提交给本站的个人信息，包括昵称、邮箱、网址； 有关您访问和使用本网站的信息，包括但不限于引荐来源、访问日期和时间、页面浏览量以及网站导航路径。 本站为深色模式切换，会通过 LocalStorage 在您的浏览器中进行本地存储以提供更便捷的体验，您可以随时清除浏览器中保存的所有 Cookies 以及 LocalStorage。 信息使用 对于收集到的 IP 地址、User-Agent 等用户信息，本站有多个用途： 通过 Umami 做分析之用，且仅博主可见； 在评论页面展示所在省份； 昵称仅作访客身份辨识。昵称信息全站访客可见； 邮箱地址将用于验证访客真实性，及接收评论回复通知； 提交评论时可选是否填写网址项，仅为方便博主回访及个人网站的推广。网址信息全站访客可见。 其他符合法律规定的合理用途。 我们保留您自由选择的权利，在本站（haohanxinghe.com）中可以在左下角的设置界面中关闭 Umami 统计。而其他站点可以在 LocalStorage 中设置 umamiStatus 值为 false 以关闭 Umami 统计。该操作不会影响任何站点的正常使用 如何共享、转让您的个人信息本站提供的服务可能会包含第三方的产品和服务，或包含通往他们的链接。本站无法控制第三方的隐私政策和规则，并且不对此承担任何责任。 本站不会主动公开披露用户信息，但以下情况除外： 中国的法律法规规定应当公开披露的信息； 与中国的国家安全、重大公共利益有关，或与犯罪侦查、起诉、审判和判决执行等有关，而应中国执法机构要求提供的； 出于维护您或其他个人的生命、财产等重大合法权益但又很难得到本人同意的； 您自行在本站评论区公开的个人信息； 本政策另有特别规定的情况。 该隐私政策仅针对以上未特殊标明的 haohanxinghe.com 下站点生效。 本站保留在任何时间修改、修订或更新本页政策内容的权利。 最后更新日期：2024102215:00:00"},{"title":"探索者笔记","path":"/explore/notes/探索者笔记.html","content":"2024年的小目标 O1 开发一个商城系统 正常 30% KR1 学习 vue3 和 golang 的基本语法 element-plus 的使用gin 的使用gorm 的使用 正常 90% KR2 开发商城购物前台和后台 延期 0% KR3 测试，发布和上线 风险 0% O2 开发一个用户日志管理系统 正常 5% KR1 学习 golang 的进阶语法 primevue 的使用tailwindcss 的使用 正常 10% KR2 尚未开始 延期 0% 感觉大概率完不成了，学习任务紧，看看能不能坚持把目标完成吧。"},{"title":"免责声明","path":"/document/disclaimer/index.html","content":"本站内容仅为个人言论，不代表站长本人所属（或曾经所属）机构或集体的观点。评论区的内容仅代表该评论发布者的观点，不代表本站认同该言论，且不对此内容产生的影响承担责任。 由于本站所发布的内容有其特定背景，而社会环境不断变化，又因获取资料信息限制，本站不对所发布内容之准确性、完整性、可靠性、可用性和及时性做保证。因此，相关读者有义务自行对所有内容在其预期用途中的适用性进行检查。在任何情况下，本站都不对因使用本站内容而造成的或与之有关的任何间接、附带或结果性损失负责或承担责任。 本站所发布的内容包含有外部网站链接，仅为方便读者而设。本站在添加链接时已尽可能检查其是否违反相关法律法规，但是外部网站内容始终由其相关提供者或运营者负责，本站无法控制这些外部网站，因此本站不对其内容承担任何责任。 最后更新日期：2024102215:00:00"},{"title":"关于本站 & 留言板","path":"/social/about/index.html","content":"本站是 克喵爱吃卤面 的 Blog，我爱好轻音乐，喜欢打乒乓球，常活跃于开源社区，热衷于设计和打磨美妙的东西。喜欢折腾一些博客，脚本，动画之类的玩意儿，希望大家能够喜欢我的博客。 我的相册 @tianhao_wang@eberhard@eberhard@eberhard@eberhard@vklemen 我的兴趣 喜欢的音乐喜欢的游戏非常热爱音乐，喜欢的品类很多，但是特别喜欢轻音乐 stilla little storycollapsing world城南花已开风居住的街道空山比较喜欢农和植物大战僵尸 王者荣耀植物大战僵尸"},{"title":"即刻短文","path":"/shuoshuo/index.html","content":"第一步：打开 GitHub打开 Stellar 的 GitHub 页面。第二步：点击 Star如果发现右上角的 Star 还没点亮，就点亮它！"},{"title":"node相关问题","path":"/explore/solutions/node相关问题.html","content":"解决本地npm安装依赖时缓存错误 npm ERR! A complete log of this run can be found in: C:\\Users\\pzj\\AppData\\Local pm-cache_logs\\2024-10-29T14_56_45_532Z-debug-0.lognpm cache clean --forcerm -rf node_modules package-lock.jsonnpm i"},{"title":"收藏的站点","path":"/explore/sites/收藏的站点.html","content":"编程社区 Gin-Vue-Adminhttps://www.gin-vue-admin.com/LearnKuhttps://learnku.com/看云https://www.kancloud.cn/ 大佬网站 陈明勇-go语言大佬https://chenmingyong.cn/ 我的站点 gitea存储库https://repo.codepzj.cn/it-tools实用工具库https://tools.codepzj.cn/alist云盘https://share.codepzj.cn/ 前端工具库 图片背景消除https://www.remove.bg/zh/图片压缩https://tinypng.com/AI去图片水印https://www.photoroom.com/zh/tools/remove-object-from-photo/高清图片修复https://www.tpqxb.com/logo徽章生成https://shields.io/badges免费静态资源cdnhttps://imagekit.io/ 第三方服务平台 国外短信服务接收平台https://lubansms.com/"},{"title":"小伙伴们 & 朋友文章","path":"/social/friends/index.html","content":"我的小伙伴们 xaoxuu崔亮的博客杜老师说Thun888张洪HeoMC-Sep纸鹿本鹿姓王者子书沐晨nukix的工具箱华岁云小屋萝卜兔农场星日语收录客薩魔5mg龙腾收录网BlogFinder浪海导航宇阳小妖客栈陵长镜Allen的小破站十年老狗 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 长期更新：网站内容需定期更新，以保持活跃度和吸引用户访问。 欢迎大家来申请友链 我已满足全部条件，快告诉我如何交换友链！ 如果您没有满足上述条件，即时提交了申请也不会通过哦～若要添加友链，请先添加本站友链，并按以下格式在下方评论区留言- 网站名: 浩瀚星河 网站简介: 代码，日常，生活 网址: https://haohanxinghe.com 头像: https://haohanxinghe.com/assets/images/avatar.webp"},{"title":"数据统计","path":"/social/stats/index.html","content":"Blog Heatmap Monthly Article Statistics Tag Statistics Category Statistics CategoryTree Statistics"},{"title":"windows相关问题","path":"/explore/solutions/windows相关问题.html","content":"id_rsa Load key: Permission denied 的解决方法 C:\\Users\\pzjecho %USERNAME%AdministratorC:\\Users\\pzjicacls C:\\Users\\pzj\\.ssh\\id_rsa /inheritance:r /grant:r Administrator:(R)processed file: C:\\Users\\pzj\\.ssh\\id_rsaSuccessfully processed 1 files; Failed processing 0 filesC:\\Users\\pzjssh -T git@github.comHi codepzj! Youve successfully authenticated, but GitHub does not provide shell access."},{"title":"我的说说 & 记录生活","path":"/social/talks/index.html","content":"这里是我发牢骚的地方，也是我记录生活的地方 😃😃"},{"title":"入门指南","path":"/wiki/go-learn/入门指南.html","content":"背景Go 语言诞生于 2007 年 9 月 20 日，由三位大佬共同创造，他们分别是Ken Thompson，图灵奖获得者，Unix 系统创始人，B 语言创始人，C 语言创始人Rob Pike，Plan9 操作系统作者之一，UTF-8 发明者之一，Go 语言设计领头人Robert Griesemer，JS V8 引擎研发者，三人之中最年轻 安装直接安装指定 go 版本在镜像站拉取 golang 压缩包$ 解压到指定目录$ 设置环境变量在$HOME/.bashrc文件中设置环境变量 export GOROOT=$HOME/goexport GOPATH=$HOME/gopathexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin $ GOROOT的作用 GOROOT 是 Go 语言安装的位置，它包含 Go 的标准库和工具链（比如编译器和 go 命令）。$GOROOT/pkg/mod 目录包含编译后的标准库包，这些是 Go 语言自带的包，而不是你的项目依赖GOPATH的作用 GOPATH 在 Go 模块出现之前，是用来存放你自己的 Go 代码和第三方包的地方。$GOPATH/pkg/mod目录是 Go 模块缓存依赖的地方，即便 Github 上的 go 依赖包被删除了，也能在本地缓存继续使用设置 GO111MODULE 为 on 设置 GO111MODULE 为 on 的作用是 gopath 默认为工作目录，如果不开启的话，就只能在$GOPATH/src目录下创建 go 项目，使用 go 模块，但是开启之后就能在任意目录使用 go 模块 安装包管理工具 gvmgvm 是 Go Version Manager 的缩写，它是一个用于管理 Go 语言版本的工具。通过 gvm，用户可以轻松地安装、卸载不同版本的 Go 语言环境，并在它们之间切换。类似 node 的 nvm 和 python 的 pyenv Github 仓库地址gvm - golang版本管理工具https://github.com/moovweb/gvm 安装 Bison$ 安装 gvm$ 配置环境变量export GVM_ROOT=$HOME/.gvm[ -s $GVM_ROOT/scripts/gvm ] source $GVM_ROOT/scripts/gvm $ 安装指定版本# 查找相应版本gvm listall# 安装相应版本的二进制（相比直接安装会快很多）gvm install go1.18.10 -Bgvm install go1.23.1 -B# 查看所有版本gvm list# 使用相应版本govm use 1.23.1"},{"title":"项目起步","path":"/wiki/ggzx/项目起步.html","content":"这个项目的来源此项目是来自尚硅谷的硅谷甄选，是一个 vue3+ts 后台管理实战项目，并且我会对其进行封装和重构，新增前端，后端，和 admin 前置工作硅谷甄选视频中有 30 节课是讲解如何配置项目的，我自己封装了一套 vite + ts 的脚手架模板，防止花费太多时间在配置依赖上面，影响开发 vite 模板 https://github.com/favicon.icohttps://github.com/Kemeow815/vite-template-ts 克隆仓库$ 安装依赖 只保留 package.json，删除 pnpm-lock.yaml pnpm i 完成后就可以顺利进入开发阶段了"},{"title":"关键字","path":"/wiki/go-learn/基本语法/关键字.html","content":"golang 中的 25 个关键字 break default func interface selectcase defer go map structchan else goto package switchconst fallthrough if range typecontinue for import return var"},{"title":"包","path":"/wiki/go-learn/基本语法/包.html","content":"注意事项导包时import _ 的作用 import _ go-learn/example作用就是不导入该包的任何函数，主要用于执行包的 init 函数，用于初始化 包的循环导入 在 golang 当中是不允许包的循环导入，比如 B 包中导入了 A 包的函数，C 包中导入了 B 包的函数，A 包中导入了 C 包的函数 +-----+ | A | +-----+ ↗ ↘ / \\ v v+-----+ +-----+| B | -- | C |+-----+ +-----+ go中的internal包 go 中 internal 包是内部包，不允许外部包访问，比如 Project/A/internal，只允许在 Project/A 的目录下的所有包访问，不允许 Project/A 之外的包访问，比如说 Project/B 下的包Project/├── A/│ ├── internal/│ │ └── x/│ └── y/└── B/ └── z/这种情况就是 Project/A/y 下可以导入 internal 包，但是 Project/B/z 不行"},{"title":"函数","path":"/wiki/go-learn/基本语法/函数.html","content":"defer 关键字，在函数的最后执行（return 之后），如果有多个 defer，则执行先进后出原则 闭包，指的是匿名函数，golang 不允许在函数内部套函数，可以使用 func()() 实现 ...Type 可以传递变长参数，如 func add(a int,b int,args ...int), args 为切片类型，相反的，也可以解析变长参数传参，如 min(args...) 习题： 题目1 package mainimport fmtfunc f() (ret int) defer func() ret++ () return 1func main() fmt.Println(f())答案 false2"},{"title":"字符串","path":"/wiki/go-learn/基本语法/字符串.html","content":"字符串一般使用””来表示 strings 包的使用 Go 中使用 strings 包来完成对字符串的主要操作。 strings.Contains检查子字符串是否存在于字符串中。 package mainimport ( fmt strings)func main() fmt.Println(strings.Contains(hello, world, world)) // true strings.Count计算子字符串在字符串中非重叠的出现次数。 package mainimport ( fmt strings)func main() fmt.Println(strings.Count(cheese, e)) // 3 strings.HasPrefix检查字符串是否以指定前缀开头。 package mainimport ( fmt strings)func main() fmt.Println(strings.HasPrefix(hello, world, hello)) // true strings.HasSuffix检查字符串是否以指定后缀结尾。 package mainimport ( fmt strings)func main() fmt.Println(strings.HasSuffix(hello, world, world)) // true strings.Index查找子字符串在字符串中首次出现的索引。 package mainimport ( fmt strings)func main() fmt.Println(strings.Index(hello, world, world)) // 7 strings.Join将字符串切片用指定的分隔符连接成一个字符串。 package mainimport ( fmt strings)func main() slice := []stringthis, is, a, dog fmt.Println(strings.Join(slice, )) // this is a dog strings.Replace将子字符串替换为另一个子字符串。 package mainimport ( fmt strings)func main() fmt.Println(strings.Replace(hello, world, world, Go, 1)) // hello, Go strings.Split将字符串按指定的分隔符拆分成子字符串切片。 package mainimport ( fmt strings)func main() fmt.Println(strings.Split(a,b,c, ,)) // [a, b, c] strings.ToLower将字符串转换为小写。 package mainimport ( fmt strings)func main() fmt.Println(strings.ToLower(HELLO, WORLD)) // hello, world strings.ToUpper将字符串转换为大写。 package mainimport ( fmt strings)func main() fmt.Println(strings.ToUpper(hello, world)) // HELLO, WORLD strconv 包的使用 strconv 包主要用于字符串和其他格式之间的互转 strconv.Atoi将字符串转换为整数。 package mainimport ( fmt strconv)func main() i, err := strconv.Atoi(123) if err != nil fmt.Println(err) else fmt.Println(i) // 123 strconv.Itoa将整数转换为字符串。 package mainimport ( fmt strconv)func main() str := strconv.Itoa(123) fmt.Println(str) // 123 strconv.ParseFloat将字符串转换为浮点数。 package mainimport ( fmt strconv)func main() f, err := strconv.ParseFloat(123.45, 64) if err != nil fmt.Println(err) else fmt.Println(f) // 123.45 strconv.FormatFloat将浮点数转换为字符串。 package mainimport ( fmt strconv)func main() str := strconv.FormatFloat(123.45, f, 2, 64) fmt.Println(str) // 123.45 strconv.ParseInt将字符串转换为整数，支持指定进制。 package mainimport ( fmt strconv)func main() i, err := strconv.ParseInt(123, 10, 64) if err != nil fmt.Println(err) else fmt.Println(i) // 123"},{"title":"字面量","path":"/wiki/go-learn/基本语法/字面量.html","content":"字符字面量字符字面量必须使用单引号括起来’’，Go 中的字符完全兼容 utf8。 aä你\\t\\000\\007\\377\\x07\\xff\\u12e4\\U00101234 unicode和utf-8的区别 unicode 是一种字符集，而 utf-8 是一种以 unicode 字符集为基础的编码格式utf-8编码是怎么算的 UTF-8 的编码规则如下：1 字节：0xxxxxxx（0-127）2 字节：110xxxxx 10xxxxxx（128-2047）3 字节：1110xxxx 10xxxxxx 10xxxxxx（2048-65535）4 字节：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx（65536 及以上）比如说小写字母 a，转为 unicode 为 U+61 ，对应的 utf-8 编码为 61比如说汉字 亚，转为 unicode 为 U+4E9A，十进制是 20122，二进制1001101000111010，通过规定好的填充方法填充二进制，即 utf-8 编码为 E9 A8 BAutf-8，utf-16，utf-32的区别 编码方式单元大小空间效率主要用途UTF-81 个字节高效（对拉丁字符）适合拉丁字符（如英语），网页和文件存储UTF-162 个字节中等（对非拉丁字符高效）Windows API、Java、JavaScript（内部处理）UTF-324 个字节低效图形和文本处理库编码一个字符 a：utf-8 61（1 个字节）utf-32 00 00 00 61（4 个字节） 字符串字面量字符串字面量必须使用双引号””括起来或者反引号（反引号字符串不允许转义），而且双引号中可以识别 unicode `abc` // abc` ` // \\ // Hello, world! 今天天气不错日本語\\u65e5本\\U00008a9e // 日本语\\xff\\u00FF"},{"title":"指针","path":"/wiki/go-learn/基本语法/指针.html","content":"指针的作用指针，即指向一个变量或一个函数的地址，通过可以对已有变量取地址，*对指针解引用找出变量对应的值 为什么golang中常量没有指针 因为常量不占用程序运行时的存储空间，因此没有内存地址。常量被直接嵌入到最终的可执行文件中，比如 fmt.Println(a) ，常量 a 直接被嵌入到 Println 中为什么golang当中指针p++是不合法的 不允许 p++ 这样的指针算术操作，是为了保持语言的类型安全、简洁和内存安全。空指针的反向引用是不合法的 package mainfunc main() var p *int = nil *p = 0因为 p 是一个 nil 指针，它没有指向任何有效的内存地址var value intp := value // 让 p 指向 value 变量的地址*p = 0 // 现在这是安全的，因为 p 不再是 nil，它指向了 valuep := new(int) // 分配内存，并让 p 指向这个内存地址*p = 0 // 现在这是安全的"},{"title":"时间与日期","path":"/wiki/go-learn/基本语法/时间与日期.html","content":"time 包常用方法获取当前时间使用 time.Now() 获取当前时间。 package mainimport ( fmt time)func main() t := time.Now() fmt.Println(t) 格式化时间使用 Format 方法将时间格式化为指定的字符串格式。 package mainimport ( fmt time)func main() t := time.Now() fmt.Println(t.Format(2006-01-02 15:04:05)) 时间加减使用 Add 方法对时间进行加减操作。 package mainimport ( fmt time)func main() t := time.Now() week := 60 * 60 * 24 * 7 * 1e9 // 一周的纳秒数 weekDuration := time.Duration(week) tt := t.Add(weekDuration) fmt.Println(tt.Format(2006-01-02 15:04:05)) 计算时间差使用 Sub 方法计算两个时间之间的差值。 package mainimport ( fmt time)func main() t1 := time.Now() t2 := t1.Add(time.Hour * 24) diff := t2.Sub(t1) fmt.Println(diff) 解析时间字符串使用 Parse 方法将时间字符串解析为 time.Time 对象。 package mainimport ( fmt time)func main() timeStr := 2023-10-01 12:00:00 t, err := time.Parse(2006-01-02 15:04:05, timeStr) if err != nil fmt.Println(err) else fmt.Println(t)"},{"title":"数组与切片","path":"/wiki/go-learn/基本语法/数组与切片.html","content":"数组是一种可以存储一个或多个同种类型的数据结构，具有定长，支持索引访问，内存连续等特点，而切片是数组的一种延伸，长度可变，即 C++中的动态数组。 初始化var arr [len]type 当然，你也可以把len省略成...它能直接预估数组的长度，而不需要手算。 而切片就是直接省略，留空即可。 var slice1 []typeslice2 := make([]type, len, cap) 切片，顾名思义，就是数组切割形成的片段，而且 slice 是引用类型，它的底层是一个数组。它的起始地址是数组的起始地址，它的长度是切片的长度，它的容量是从切片的第一个元素到数组的最后一个元素的长度。 数组与切片在内存的底层 浅拷贝和深拷贝数组与切片的赋值都是浅拷贝，即只是拷贝了地址，而不是值。它们都是共享内存的。当其中一个值改变时，另一个值也会改变。所以想让它们不共享内存，相互独立，就需要深拷贝。 深拷贝需要使用copy函数 oldSlice := []int1, 2, 3newSlice := make([]int, 10)n := copy(newSlice, oldSlice) 字符串与字节切片字符串是只读的字节切片，它的值是不可变的。而字节切片是可变的，它的值是可变的。 在内存中，一个字符串实际上是一个双字结构，即一个指向实际数据的指针和记录字符串长度的整数 字符串的底层原理 如何相互转换呢？ byteSlice := []byte(str)str := string(byteSlice) 课后练习题目1 package mainimport fmtfunc main() x := []int2, 3, 5, 7, 11 y := x[1:3] fmt.Println(x, y, y[0:4])答案[2 3 5 7 11] [3 5] [3 5 7 11]"},{"title":"运算符","path":"/wiki/go-learn/基本语法/运算符.html","content":"运算符的优先级 Precedence Operator 5 * / % ^ 4 + - | ^ 3 == != = = 2 1 || ^ 和 ^ 的区别 ^ 指的是按位异或（两个操作数），二进制取反（一个操作数）^指的是后面操作数转二进制每一位取反后与前面操作数做按位与运算例如，假设我们有两个数字 5 和 3：5 的二进制表示为 1013 的二进制表示为 0115 ^ 3 110 65 ^ 3 101 100 100 4 提示Go 语言中没有自增与自减运算符，它们被降级为了语句 statement，并且规定了只能位于操作数的后方，所以不用再去纠结 i++和++i 这样的问题。 a++ // 正确++a // 错误a-- // 正确 还有一点就是，它们不再具有返回值，因此 a b++这类语句的写法是错误的，会报错：expected ;, found ++"},{"title":"锁","path":"/wiki/go-learn/基本语法/锁.html","content":"锁，是操作系统的一种阻塞机制，为了保证数据在读写的过程中不被篡改。 互斥锁同一时刻内，只允许一个goroutine对资源进行读写操作。 示例代码： package mainimport ( fmt sync time)type Resource struct data int mu sync.Mutexfunc (r *Resource) Read() int r.mu.Lock() defer r.mu.Unlock() return r.datafunc (r *Resource) Write(newdata int) r.mu.Lock() defer r.mu.Unlock() r.data = newdatafunc main() r := Resourcedata: 100 go func() for i := 0; i 5; i++ fmt.Println(i, r.Read()) () go func() r.Write(666) () time.Sleep(1 * time.Second) 读写锁互斥锁的升级版，数据允许同一时刻被多个goroutine读取，只允许一个goroutine写入。目的是为了对于读需求比较多的业务，提高goroutines的并发效率。与互斥锁一样，写数据的过程中也是不允许其他goroutine进行读取操作的。 示例代码： package mainimport ( fmt sync time)type Resource struct data int mu sync.RWMutexfunc (r *Resource) Read() int r.mu.RLock() defer r.mu.RUnlock() return r.datafunc (r *Resource) Write(newdata int) r.mu.Lock() defer r.mu.Unlock() r.data = newdatafunc main() r := Resourcedata: 100 go func() for i := 0; i 5; i++ fmt.Println(i, r.Read()) () go func() r.Write(666) () time.Sleep(1 * time.Second)"},{"title":"2024/12","path":"/wiki/notes/2024/12/index.html","content":"wsl安装ubuntu 查看可安装镜像$NAME FRIENDLY NAMEUbuntu UbuntuDebian Debian GNU/Linuxkali-linux Kali Linux RollingUbuntu-18.04 Ubuntu 18.04 LTSUbuntu-20.04 Ubuntu 20.04 LTSUbuntu-22.04 Ubuntu 22.04 LTSUbuntu-24.04 Ubuntu 24.04 LTSOracleLinux_7_9 Oracle Linux 7.9OracleLinux_8_7 Oracle Linux 8.7OracleLinux_9_1 Oracle Linux 9.1openSUSE-Leap-15.6 openSUSE Leap 15.6SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6openSUSE-Tumbleweed openSUSE Tumbleweed直接安装$查看可安装镜像$适用于 Linux 的 Windows 子系统分发:docker-desktop-data (默认)docker-desktopUbuntu-24.04设置Ubuntu-24.04为默认$gin中匹配路由*和:的区别 /find/user 这种可以接收到路由（带/）pg.GET(/find/*id, ProgramApi.ProgramFindAll) # /user/find/6 这种接收参数pg.GET(/find/:id, ProgramApi.ProgramFindAll) # 6pinia持久化存储的原理 将对象序列化成 json 存储到 session 和 localstorge 里面，每次修改或获取值都通过 setItem 和 getItem 完成。cookie在前后端的交互是怎么样的 用户登录，后端往浏览器置入cookie，在用户发起请求的时候会校验请求头token或者cookie中的jwt加密字符串，一般前端会使用pinia把登录后返回的用户信息存储起来。退出登录，要让pinia持久化数据失效，同时向后端发起清空 cookie 的操作。cookie 应该设置HttpOnly让前端无法直接访问，防止一些跨站脚本的攻击。a标签的target参数分析 target: _self,指的是在当前页打开 target: _blank,指的是在新的标签页打开数据库允许root用户远程登录 mysql SELECT Host, User FROM mysql.user WHERE User = root;+-----------+------+| Host | User |+-----------+------+| localhost | root |+-----------+------+1 row in set (0.00 sec)mysql CREATE USER root@% IDENTIFIED BY pzj20162116;Query OK, 0 rows affected (0.01 sec)mysql GRANT ALL PRIVILEGES ON *.* TO root@% WITH GRANT OPTION;Query OK, 0 rows affected (0.00 sec)mysql flush privileges;Query OK, 0 rows affected (0.00 sec)mysql SELECT Host, User FROM mysql.user WHERE User = root;+-----------+------+| Host | User |+-----------+------+| % | root || localhost | root |+-----------+------+2 rows in set (0.00 sec)vue3设置@别名可点击跳转 在项目根目录新建jsconfig.json:jsconfig.json compilerOptions: baseUrl: ., paths: @/*: [src/*] , target: ES6, allowSyntheticDefaultImports: true , include: [src/**/*], exclude: [node_modules]gin中ShouldBind传参传默认值，切记不要使用required 在 gin 里面，有 c.ShouldBind 这个方法，常用于绑定结构体，如果你设置 json 字段为required（即必填），就算你填了对应的零值（即默认值），shouldbind 会认为你没填，就会绑定失败。所以如果传参包含默认值，对应的 json 字段不应该设置为 required，比如说金额（int），默认为 0，我没买东西，传参为 0，设定 required 是无法识别的，会误认为你没有传参。jsdliver有缓存怎么强制清除 假如说你的 cdn 地址是这样https://cdn.jsdelivr.net/gh/user/repo@version/file那么使用如下地址https://purge.jsdelivr.net/gh/user/repo@version/file id: oBCXlFgXNJdiqwIb, status: finished, timestamp: 2024-12-18T06:20:53.917Z, paths: /gh/codepzj/fonts@main/QianMoKai/result.css: throttled: false, providers: CF: true, FY: true 返回如下结果就说明刷新成功。"},{"title":"2024/11","path":"/wiki/notes/2024/11/index.html","content":"golang遍历文件夹，判断子文件类型 package mainimport ( fmt os)func main() pathList, err := os.ReadDir(D:/Code/Program/Hexo) if err != nil errMsg := fmt.Sprintf(读取失败，错误为：%v, err) panic(errMsg) for _, pathName := range pathList fmt.Println(pathName.Name(), pathName.IsDir()) Linux修改主机名 # 方法一hostnamectl set-hostname newHostNameservice network restart# 方法二echo newHostName /etc/hostname# 重启sudo rebootLinux修改ip地址 cd /etc/sysconfig/network-scriptsvi ifcfg-ens33然后修改 IPADDRTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=4e255d11-c746-4da9-af60-07462b04a19aDEVICE=ens33ONBOOT=yesIPADDR=192.168.202.202GATEWAY=192.168.202.2DNS1=192.168.202.2重启网络service network restartgolang如何读取文件内容 为什么不直接用 os.ReadFile 读取，再 string()转换成文件直接输出呢。因为直接读取整个文件会造成额外的内存开销，如果文件很大，就容易让内存负载过高，package mainimport ( bufio fmt os)func main() file, _ := os.Open(D:/Code/Program/hexo/package.json) // 一行行读取 scanner := bufio.NewScanner(file) for scanner.Scan() fmt.Println(scanner.Text()) // 打印每一行 if err := scanner.Err(); err != nil panic(err) golang如何使用channel优化读取速度 不使用goroutine使用goroutinepackage mainimport ( fmt os time)var ( matches = 0 query = test)func Search(pathName string) fileList, err := os.ReadDir(pathName) if err == nil for _, file := range fileList if file.Name() == query fmt.Println(pathName+/+file.Name(), matches) matches++ if file.IsDir() Search(pathName + / + file.Name()) func main() startTime := time.Now() Search(D:/Code) fmt.Println(matches) fmt.Println(time.Since(startTime))package mainimport ( fmt os sync time)var query = test// Search 函数接收一个路径，递归查找匹配的文件func Search(pathName string, c chan int, wg *sync.WaitGroup) defer wg.Done() // 确保每个 goroutine 执行完后，调用 Done() // 读取目录内容 fileList, err := os.ReadDir(pathName) if err != nil fmt.Println(Failed to read dir:, err) return // 遍历文件列表 for _, file := range fileList // 如果是目录，递归查找 if file.IsDir() wg.Add(1) // 对每个子目录，增加 WaitGroup 计数 go Search(pathName+/+file.Name(), c, wg) // 如果文件名匹配，发送到通道 if file.Name() == query fmt.Println(pathName+/+file.Name(), matches) c - 1 func main() startTime := time.Now() // 创建 WaitGroup 和通道 var wg sync.WaitGroup c := make(chan int, 1000) // 使用缓冲通道来防止阻塞 // 启动递归搜索 wg.Add(1) // 初始计数 go Search(D:/Code, c, wg) // 先启动接收操作 matches := 0 go func() for match := range c matches += match () // 等待所有的 goroutine 完成 wg.Wait() // 关闭通道 close(c) // 输出结果 fmt.Println(Total matches:, matches) fmt.Println(Time taken:, time.Since(startTime))golang互斥锁和读写锁的运用场景 对于互斥锁，在对共享资源进行频繁的写操作且不希望同时有多个协程进行读写操作的场景下使用。对于读写锁，在读操作远多于写操作的场景下，如缓存系统、配置文件读取等，可以提高并发性能。更新.gitignore发现文件已经加入缓冲区 git rm -r --cached .git add .这样即可删除索引，重新加入暂存区，使.gitignore生效"},{"title":"2024/11","path":"/wiki/why/2024/11/index.html","content":"为什么 CLI 被命名为脚手架？ 答：全称为 Command Line Interface，是一种命令行接口。把我们比作建筑工人，那么 CLI 就是临时的基础结构，我们只需考虑更高层次的施工工作即可，脚手架的命名由此而来，主要用于快速生成项目结构，规范管理依赖，让程序员更加能专注于业务逻辑的实现。"}]