<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>克喵🐱の小筑</title>
  <subtitle>每一段旅行都有终点~</subtitle>
  <icon>https://haohanxinghe.com/assets/images/avatar.jpg</icon>
  <link href="https://haohanxinghe.com/atom.xml" rel="self"/>
  <link href="https://haohanxinghe.com/"/>
  <updated>2025-01-19T03:11:56.000Z</updated>
  <id>https://haohanxinghe.com/</id>
  
  <author>
    <name>克喵爱吃卤面</name>
    <email>kemiao@kmblog.icu</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode中git放弃了所有更改怎么办</title>
    <link href="https://haohanxinghe.com/posts/47.html"/>
    <id>https://haohanxinghe.com/posts/47.html</id>
    <published>2025-01-19T03:11:56.000Z</published>
    <updated>2025-01-19T03:11:56.000Z</updated>
    
    
    <category term="技术分享" scheme="https://haohanxinghe.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="vscode" scheme="https://haohanxinghe.com/tags/vscode/"/>
    
    
    <summary type="html">vscode中git放弃了所有更改怎么办，使用&#39;本地历史记景：查找要还原的条目&#39;来恢复</summary>
    
    
    <content type="html"><![CDATA[<div class="tag-plugin colorful note" ><div class="body"><p>使用 vscode 的 git 管理工具的时候，不小心放弃了所有更改，这时候怎么办呢？</p></div></div><ol><li><code>Ctrl + Shift + P</code> 打开命令面板，输入 <code>Local History:Find Entry to Restore</code>，打开。</li><li>选择你想要恢复的文件，直接点击即可。<br><img src="https://image.codepzj.cn/image/202501191122301.png" alt="恢复文件"></li></ol><p>目前没有找到特别好的方法，只能一个个文件恢复，如果有更好的方法，欢迎留言交流。</p>]]></content>
    
  </entry>
  
  <entry>
    <title>如何正确处理别人的pr</title>
    <link href="https://haohanxinghe.com/posts/46.html"/>
    <id>https://haohanxinghe.com/posts/46.html</id>
    <published>2025-01-02T14:22:33.000Z</published>
    <updated>2025-01-02T14:22:33.000Z</updated>
    
    
    <category term="技术分享" scheme="https://haohanxinghe.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="github" scheme="https://haohanxinghe.com/tags/github/"/>
    
    <category term="pull request" scheme="https://haohanxinghe.com/tags/pull-request/"/>
    
    
    <summary type="html">本文介绍了如何从 GitHub 拉取 PR，如何推送本地修改到远程仓库，如何进行 Squash 和 Merge 操作，以及如何清理本地分支。</summary>
    
    
    <content type="html"><![CDATA[<h2 id="使用-Git-进行远程仓库管理与合并操作"><a href="#使用-Git-进行远程仓库管理与合并操作" class="headerlink" title="使用 Git 进行远程仓库管理与合并操作"></a>使用 Git 进行远程仓库管理与合并操作</h2><p>在开发中，经常需要与团队成员或外部贡献者一起协作，在这个过程中，我们可能需要从其他人的分支获取代码、合并并推送到主分支。本文将详细介绍如何使用 Git 执行这些操作，包括如何从远程拉取特定的 Pull Request、推送本地修改到远程仓库、以及如何清理本地仓库等步骤。</p><h3 id="1-从远程拉取-Pull-Request"><a href="#1-从远程拉取-Pull-Request" class="headerlink" title="1. 从远程拉取 Pull Request"></a>1. 从远程拉取 Pull Request</h3><p>首先，假设我们需要从 GitHub 上获取某个 Pull Request (PR) 的内容。在 Git 中，我们可以使用 <code>git fetch</code> 命令来获取远程仓库的最新内容。以下是一个从远程仓库拉取 PR 的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin pull/10/head:<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>在这个命令中：</p><ul><li><code>origin</code> 是默认的远程仓库名称。</li><li><code>pull/10/head</code> 表示获取 PR 编号为 10 的代码。</li><li><code>test</code> 是本地新创建的分支名称，用来跟踪该 PR 的内容。</li></ul><p>成功执行此命令后，我们可以使用 <code>git checkout test</code> 切换到 <code>test</code> 分支，查看和编辑拉取下来的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h3 id="2-配置远程仓库并推送代码"><a href="#2-配置远程仓库并推送代码" class="headerlink" title="2. 配置远程仓库并推送代码"></a>2. 配置远程仓库并推送代码</h3><p>如果你需要将本地修改推送到远程仓库，首先需要确保你已经正确设置了远程仓库的地址。假如你希望将本地的 <code>test</code> 分支推送到远程仓库，可以通过 <code>git remote add</code> 命令添加一个新的远程仓库地址。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add github-desktop-xingwangzhe &lt;远程仓库URL&gt;<br></code></pre></td></tr></table></figure><p>这将添加一个新的远程仓库。你可以通过 <code>git remote -v</code> 查看当前配置的远程仓库。</p><p>接下来，我们可以将本地的 <code>test</code> 分支推送到远程仓库的 <code>main</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push github-desktop-xingwangzhe <span class="hljs-built_in">test</span>:main<br></code></pre></td></tr></table></figure><p>执行这个命令后，Git 会将 <code>test</code> 分支的内容推送到远程仓库的 <code>main</code> 分支。如果推送成功，Git 会显示推送的对象和提交信息。</p><h3 id="3-远程仓库进行-Squash-和-Merge"><a href="#3-远程仓库进行-Squash-和-Merge" class="headerlink" title="3. 远程仓库进行 Squash 和 Merge"></a>3. 远程仓库进行 Squash 和 Merge</h3><p>通常，在 PR 拉取请求合并时，你可能需要执行 Squash 和 Merge 操作，这样可以将多个提交压缩成一个提交，以便保持历史记录的简洁。GitHub 提供了这种操作的功能，具体步骤如下：</p><ul><li>进入 GitHub 仓库，找到对应的 PR。</li><li>选择 “Squash and Merge” 选项来合并该 PR。</li><li>根据需要修改合并提交的信息，然后点击 “Confirm Merge” 完成合并。</li></ul><h3 id="4-清理本地仓库"><a href="#4-清理本地仓库" class="headerlink" title="4. 清理本地仓库"></a>4. 清理本地仓库</h3><p>在完成上述步骤后，通常我们会清理掉本地临时分支。可以通过以下命令删除本地分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -D <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>该命令会删除本地的 <code>test</code> 分支，清理掉之前拉取 PR 的内容。</p><p>最后，如果不再需要该远程仓库地址，可以使用 <code>git remote remove</code> 命令删除它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote remove github-desktop-xingwangzhe<br></code></pre></td></tr></table></figure><p>这样，我们就清理掉了本地对远程仓库的引用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了如何从 GitHub 拉取 PR，如何推送本地修改到远程仓库，如何进行 Squash 和 Merge 操作，以及如何清理本地分支。通过这些操作，我们可以更高效地管理代码库，并确保我们的本地仓库和远程仓库保持一致。</p><p>希望这些内容能帮助你更好地进行 Git 远程仓库管理。如果有任何问题或疑问，欢迎随时联系！</p>]]></content>
    
  </entry>
  
</feed>